# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

#####
# INCLUDE MACRO FILES
#####
[include macros/*.cfg]

#####
# GENERAL MACROS
#####
[gcode_macro PAUSE]
description: Pauses the print
rename_existing: PAUSE_BASE
variable_extrude: 1.5           # extrusion in mm when resuming the print
variable_retract: 1.5           # retraction in mm when print is paused
variable_fan_speed: 0           # internal use only. Do not touch!
variable_idex_mode: ""          # internal use only. Do not touch!
variable_idex_toolhead: 0       # internal use only. Do not touch!
variable_idex_toolhead_x: 0.0   # internal use only. Do not touch!
variable_idex_toolhead_y: 0.0   # internal use only. Do not touch!
variable_idex_toolhead_z: 0.0   # internal use only. Do not touch!
gcode:
	# parameter
	{% set runout_detected = true if params.RUNOUT|default(false)|lower == 'true' else false %}

	# visual feedback
	_LED_PAUSE

	# IDEX mode
	{% set idex_mode = '' %}
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
		{% set idex_toolhead = 1 if idex_mode == 'primary' else 0 %}
	{% endif %}

	# Save gcode state
	{% if printer["dual_carriage"] is not defined %}
		SAVE_GCODE_STATE NAME=PAUSE_state
	{% else %}
		SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=idex_mode VALUE='"{idex_mode}"'
		SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=idex_toolhead VALUE={idex_toolhead}
		SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=idex_toolhead_x VALUE={printer.gcode_move.gcode_position.x|float}
		SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=idex_toolhead_y VALUE={printer.gcode_move.gcode_position.y|float}
		SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=idex_toolhead_z VALUE={printer.gcode_move.gcode_position.z|float}
		DEBUG_ECHO PREFIX="PAUSE" MSG="idex_mode: {idex_mode}, idex_toolhead: {idex_toolhead}, idex_toolhead_x: {idex_toolhead_x}, idex_toolhead_y: {idex_toolhead_y}, idex_toolhead_z: {idex_toolhead_z}"
	{% endif %}

	# set is_printing_gcode state
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=False

	# Handle toolhead settings
	CACHE_TOOLHEAD_SETTINGS KEY="pause"
	SET_MACRO_TRAVEL_SETTINGS

	# Calculate safe Z position
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set current_z = printer.toolhead.position.z|float %}
	{% if current_z < (max_z - 20.0) %}
		{% set z_safe = 20.0 %}
	{% else %}
		{% set z_safe = max_z - current_z %}
	{% endif %}

	# Call internal PAUSE command
	PAUSE_BASE

	# Cache part cooling fan speed 
	{% if printer["dual_carriage"] is not defined %}
		SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=fan_speed VALUE={printer["fan"].speed|float}
	{% else %}
		{% if idex_mode == 'copy' or idex_mode == 'mirror' %}
			SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=fan_speed VALUE={printer["fan_generic part_fan_t0"].speed|float}
		{% else %}
			{% if idex_toolhead == 0 %}
				SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=fan_speed VALUE={printer["fan_generic part_fan_t0"].speed|float}
			{% else %}
				SET_GCODE_VARIABLE MACRO=PAUSE VARIABLE=fan_speed VALUE={printer["fan_generic part_fan_t1"].speed|float}
			{% endif %}
		{% endif %}
	{% endif %}

	# Turn part cooling fan off
	M106 S0

	# Can extruder extrude
	{% set can_extrude = true if printer['extruder'].can_extrude|lower == 'true' else false %}
	{% if idex_mode != '' %}
		{% if idex_mode == 'copy' or idex_mode == 'mirror' %}
			{% set can_extrude = true if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' else false %}
		{% else %}
			{% if printer.toolhead.extruder == 'extruder1' %}
				{% set can_extrude = true if printer['extruder1'].can_extrude|lower == 'true' else false %}
			{% endif %}
		{% endif %}
	{% endif %}

	# Retract
	{% set R = printer["gcode_macro PAUSE"].retract|float %}
	{% if can_extrude %}
		G91                # Relative positioning
		G1 E-{R} F2100
		G90                # Absolute positioning
	{% else %}
		{action_respond_info("Extruder not hot enough")}
	{% endif %}

	# Move to park position
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	{% set pause_print_park_x = printer["gcode_macro RatOS"].pause_print_park_x %}
	{% set pause_print_park_in = printer["gcode_macro RatOS"].pause_print_park_in %}
	{% if runout_detected %}
		{% set pause_print_park_x = printer["gcode_macro RatOS"].runout_park_x %}
		{% set pause_print_park_in = printer["gcode_macro RatOS"].runout_park_in %}
	{% endif %}

	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	DEBUG_ECHO PREFIX="PAUSE" MSG="z_speed: {z_speed}, pause_print_park_x: {pause_print_park_x}, pause_print_park_in: {pause_print_park_in}, default_toolhead: {default_toolhead}"
	{% if "xyz" in printer.toolhead.homed_axes %}
		G91                        # Relative positioning
		G1 Z{z_safe} F{z_speed}
		G90                        # Absolute positioning
		{% if printer["dual_carriage"] is not defined %}
			# DEFAULT
			_PARK LOCATION={pause_print_park_in} X={pause_print_park_x}
		{% else %}
			# IDEX
			{% set parking_position = printer["gcode_macro T%s" % default_toolhead].parking_position|float %}
			{% if idex_mode == 'copy' or idex_mode == 'mirror' %}
				_IDEX_SINGLE X={parking_position}
			{% else %}
				PARK_TOOLHEAD
			{% endif %}
			_PARK LOCATION={pause_print_park_in} X={pause_print_park_x}
		{% endif %}
	{% else %}
		{action_respond_info("Printer not homed")}
	{% endif %} 

	# Handle toolhead settings
	RESTORE_TOOLHEAD_SETTINGS KEY="pause"


[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
	# (the TOOLHEAD parameter is getting passed by the _JOIN_SPOOL macro)

	# Config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

	# Target IDEX mode
	{% set target_idex_mode = '' %}
	{% if printer["dual_carriage"] is defined %}
		{% set target_idex_mode = printer["gcode_macro PAUSE"].idex_mode|lower %}
	{% endif %}

	# Can extruder extrude
	{% set can_extrude = true if printer['extruder'].can_extrude|lower == 'true' else false %}
	{% if target_idex_mode != '' %}
		{% if target_idex_mode == 'copy' or target_idex_mode == 'mirror' %}
			{% set can_extrude = true if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' else false %}
		{% else %}
			{% if printer.toolhead.extruder == 'extruder1' %}
				{% set can_extrude = true if printer['extruder1'].can_extrude|lower == 'true' else false %}
			{% endif %}
		{% endif %}
	{% endif %}

	# Turn part cooling back fan on 
	{% set fan_speed = printer["gcode_macro PAUSE"].fan_speed|float %}
	{% if printer["dual_carriage"] is not defined %}
		M106 S{(fan_speed * 255)}
	{% else %}
		{% if idex_mode == 'copy' or idex_mode == 'mirror' %}
			SET_FAN_SPEED FAN=part_fan_t0 SPEED={fan_speed}
			SET_FAN_SPEED FAN=part_fan_t1 SPEED={fan_speed}
		{% else %}
			{% if params.TOOLHEAD is defined %}
				# toolhead override for spool join feature
				{% if params.TOOLHEAD == 0 %}
					SET_FAN_SPEED FAN=part_fan_t0 SPEED={fan_speed}
				{% else %}
					SET_FAN_SPEED FAN=part_fan_t1 SPEED={fan_speed}
				{% endif %}
			{% else %}
				{% if printer["gcode_macro PAUSE"].idex_toolhead == 0 %}
					SET_FAN_SPEED FAN=part_fan_t0 SPEED={fan_speed}
				{% else %}
					SET_FAN_SPEED FAN=part_fan_t1 SPEED={fan_speed}
				{% endif %}
			{% endif %}
		{% endif %}
		# Update core Klipper's fan speed to the fan speed of the active toolhead
		# Only do this if you have a sacrificial [fan] section
		M106.1 S{fan_speed}
	{% endif %}

	# Restore IDEX state
	{% if printer["dual_carriage"] is defined %}
		{% if target_idex_mode == "copy" %}
			_IDEX_COPY DANCE=0
		{% elif target_idex_mode == "mirror" %}
			_IDEX_MIRROR DANCE=0
		{% else %}
			{% if params.TOOLHEAD is defined %}
				_SELECT_TOOL T={params.TOOLHEAD} X=-1 Y=-1 TOOLSHIFT=false
			{% else %}
				_SELECT_TOOL T={printer["gcode_macro PAUSE"].idex_toolhead} X=-1 Y=-1 TOOLSHIFT=false
			{% endif %}
		{% endif %}
		# restore IDEX toolhead position
		{% set x = printer["gcode_macro PAUSE"].idex_toolhead_x|float %}
		{% set y = printer["gcode_macro PAUSE"].idex_toolhead_y|float %}
		{% set z = printer["gcode_macro PAUSE"].idex_toolhead_z|float %}
		G1 X{x} Y{y} Z{z} F{speed}
		{% if params.TOOLHEAD is defined %}
			# overwrite internal gcode state to make sure new toolheads offsets are getting applied 
			SAVE_GCODE_STATE NAME=PAUSE_STATE
		{% endif %}
	{% endif %}

	# Prime
	{% if params.TOOLHEAD is not defined %}
		{% set E = printer["gcode_macro PAUSE"].extrude|float %}
		{% if can_extrude %}
			G91              # Relative positioning
			G1 E{E} F2100
			G90              # Absolute positioning
		{% else %}
			{action_respond_info("Extruder not hot enough")}
		{% endif %}
	{% endif %}

	# Restore gcode state
	{% if printer["dual_carriage"] is not defined %}
		RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED={speed}
	{% endif %}

	# set is_printing_gcode state
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=True

	# Call internal RESUME command
	RESUME_BASE

	# visual feedback
	_LED_PRINTING


[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_BASE
gcode:
	END_PRINT
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	#SDCARD_RESET_FILE
	CANCEL_PRINT_BASE
	

#####
# START PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####
[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
variable_post_processor_version: 2       # internal use only. Do not touch!
variable_is_printing_gcode: False        # internal use only. Do not touch!
variable_both_toolheads: True            # internal use only. Do not touch!
variable_object_xoffset: 0               # internal use only. Do not touch!
variable_first_x: -1                     # internal use only. Do not touch!
variable_first_y: -1                     # internal use only. Do not touch!
variable_total_toolshifts: 0             # internal use only. Do not touch!
variable_initial_tool: 0                 # internal use only. Do not touch!
variable_extruder_first_layer_temp: ""   # internal use only. Do not touch!
variable_extruder_other_layer_temp: ""   # internal use only. Do not touch!
gcode:
	# in case VAOC calibration is still active end it
	{% if "xyz" in printer.toolhead.homed_axes and printer["dual_carriage"] is defined and printer["gcode_macro _VAOC"] is defined %}
		{% if printer["gcode_macro _VAOC"].is_started|default(true)|lower == 'true' %}
			_VAOC_END
		{% endif %}
	{% endif %}

	# visual feedback
	_LED_START_PRINTING

	# cache toolhead settings
	CACHE_TOOLHEAD_SETTINGS KEY="start_print"

	# user START_PRINT hook
	_USER_START_PRINT { rawparams } 

	# get ratos settings
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set bed_heat_soak_time = printer["gcode_macro RatOS"].bed_heat_soak_time|default(0)|int %}
	{% set hotend_heat_soak_time = printer["gcode_macro RatOS"].hotend_heat_soak_time|default(0)|int %}
	{% set z_probe_stowable = printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
	{% if printer["dual_carriage"] is defined %}
		{% set toolchange_standby_temp = printer["gcode_macro RatOS"].toolchange_standby_temp|default(-1)|float %}
	{% endif %}

	# beacon contact config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}

	# get macro parameters
	{% set X0 = params.X0|default(-1)|float %}
	{% set X1 = params.X1|default(-1)|float %}
	{% set Y0 = params.Y0|default(-1)|float %}
	{% set Y1 = params.Y1|default(-1)|float %}
	{% if first_x == -1 or first_y == -1 %}
		{% set first_x = params.FIRST_X|default(-1)|float %}
		{% set first_y = params.FIRST_Y|default(-1)|float %}
	{% endif %}
	{% set total_toolshifts = params.TOTAL_TOOLSHIFTS|default(0)|int %}
	{% set initial_tool = params.INITIAL_TOOL|default(default_toolhead)|int %}
	{% set start_chamber_temp = params.START_CHAMBER_TEMP|default(0)|int %}
	{% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}
	{% set bed_temp = params.BED_TEMP|default(printer.heater_bed.target, true)|float %}
	{% set total_layer_count = params.TOTAL_LAYER_COUNT|default(0)|int %}
	{% set extruder_first_layer_temp = (params.EXTRUDER_TEMP|default("")).split(",") %}
	{% set client_post_processor_version = params.POST_PROCESSOR_VERSION|default(0)|int %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# check for TOTAL_LAYER_COUNT parameter, important for beacon probe
	{% if params.TOTAL_LAYER_COUNT is not defined %}
		{% set link_url = "https://github.com/HelgeKeck/RatOS/tree/documentation_v2.1/site/docs/slicers.md" %}
		{% set link_text = "RatOS 2.1 Slicer Configuration" %}
		{% set line_1 = '"Your slicer gcode settings are not up to date._N_Learn more about the <a href="%s" target="_blank" >%s</a>"' % (link_url, link_text) %}
		CONSOLE_ECHO TITLE="Incomplete Slicer Configuration detected" TYPE="warning" MSG={line_1}
	{% endif %}

	# check client post processor version if needed
	{% if client_post_processor_version > 0 %}
		{% if client_post_processor_version < post_processor_version %}
			{ action_raise_error("Client post processor outdated. Please download the new version from the scripts folder.")}
		{% endif %}
	{% endif %}

	# update printer stats
	SET_PRINT_STATS_INFO CURRENT_LAYER=1
	SET_GCODE_VARIABLE MACRO=_ON_LAYER_CHANGE VARIABLE=layer_number VALUE=1
	{% if total_layer_count > 0 %}
		SET_PRINT_STATS_INFO TOTAL_LAYER={total_layer_count}
	{% endif %}

	# swap toolheads if needed
	{% if printer["dual_carriage"] is defined %}
		{% set swap_toolheads = true if printer["gcode_macro _IDEX_REMAP_TOOLHEADS"].enabled|default(false)|lower == 'true' else false %}
		{% if swap_toolheads %}
			{% set initial_tool = 0 if initial_tool == 1 else 1 %}
		{% endif %}
	{% endif %}

	# reset is_printing_gcode state
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=False

	# update Frontend
	SET_GCODE_VARIABLE MACRO=T0 VARIABLE=active VALUE=True
	{% if printer["dual_carriage"] is defined %}
		SET_GCODE_VARIABLE MACRO=T1 VARIABLE=active VALUE=True
	{% endif %}

	# set both_toolheads variable based on toolshift count. we first assume both toolheads will be needed
	{% set both_toolheads = true %}
	{% if total_toolshifts == 0 %}
		{% set both_toolheads = false %}
	{% endif %}

	# IDEX mode
	{% set idex_mode = '' %}
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
		{% set parking_position = printer["gcode_macro T%s" % default_toolhead].parking_position|float %}
		_IDEX_SINGLE X={parking_position}
	{% endif %}
	{% if both_toolheads and (idex_mode == "copy" or idex_mode == "mirror") %}
		_LED_START_PRINTING_ERROR
		{ action_raise_error("Gcode tool changes found. Copy and mirror mode do not support toolchanges.")}
	{% endif %}
	{% if idex_mode == "copy" or idex_mode == "mirror" %}
		{% set both_toolheads = true %}
	{% endif %}

	# cache print variables
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=initial_tool VALUE={initial_tool}
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_x VALUE={first_x}
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_y VALUE={first_y}
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=total_toolshifts VALUE={total_toolshifts}
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=both_toolheads VALUE={both_toolheads}
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_first_layer_temp VALUE="'{params.EXTRUDER_TEMP}'"
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=extruder_other_layer_temp VALUE="'{params.EXTRUDER_OTHER_LAYER_TEMP}'"

	# reset toolshift counter
	{% if printer["dual_carriage"] is defined %}
		SET_GCODE_VARIABLE MACRO=_TOOLCHANGE VARIABLE=toolshift_count VALUE=0
	{% endif %}

	# load IDEX variable file
	{% if printer["dual_carriage"] is defined %}
		{% set svv = printer.save_variables.variables %}
	{% endif %}

	# IDEX toolhead x-offset sanity check
	{% if printer["dual_carriage"] is defined %}
		{% set parking_position_t0 = printer["gcode_macro T0"].parking_position|float %}
		{% set parking_position_t1 = printer["gcode_macro T1"].parking_position|float %}
		{% set stepper_x_position_min = printer.configfile.settings.stepper_x.position_min|float %}
		{% set stepper_x_position_endstop = printer.configfile.settings.stepper_x.position_endstop|float %}
		{% set dual_carriage_position_max = printer.configfile.settings.dual_carriage.position_max|float %}
		{% set dual_carriage_position_endstop = printer.configfile.settings.dual_carriage.position_endstop|float %}
		{% set x_parking_space = parking_position_t0 - (stepper_x_position_endstop , stepper_x_position_min)|max %}
		{% set dc_parking_space = (dual_carriage_position_endstop , dual_carriage_position_max)|min - parking_position_t1 %}
		{% if svv.idex_xoffset|abs >= (x_parking_space - 0.5) or svv.idex_xoffset|abs >= (dc_parking_space - 0.5) %}
			_LED_START_PRINTING_ERROR
			{ action_raise_error("Toolhead x-offset is too high for the available parking space. Calibrate your X and DC endstop positions and make sure you stay below 1mm." % (copy_mode_max_width)) }
		{% endif %}
	{% endif %}

	# IDEX post processor sanity check
	{% if printer["dual_carriage"] is defined %}
		{% if params.MIN_X is not defined or params.MAX_X is not defined or params.USED_TOOLS is not defined or params.WIPE_ACCEL is not defined or params.FIRST_X is not defined or params.FIRST_Y is not defined %}
			_LED_START_PRINTING_ERROR
			{ action_raise_error("Something went wrong! Missing important post processor start print parameter!") }
		{% endif %}
	{% endif %}

	# IDEX copy and mirror mode sanity check
	{% if idex_mode == "copy" or idex_mode == "mirror" %}

		# reset object xoffset
		SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=object_xoffset VALUE=0

		{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}

		# ToDo!
		# get boundary box from slicer if already available on PS and SS
		{% set boundary_box_min_x = params.MIN_X|default(0)|float %}                 # params.MIN_X | bounding box value | post processor
		{% set boundary_box_max_x = params.MAX_X|default(printable_x_max)|float %}   # params.MAX_X | bounding box value | post processor

		# Take toolhead x offset into account
		{% set svv = printer.save_variables.variables %}

		{% if default_toolhead == 0 %}
			# T1 x-offset must be negative, its part of the sanity checks in the init macro
			{% set boundary_box_max_x = boundary_box_max_x + svv.idex_xoffset %}
		{% else %}
			# T0 x-offset must be positive, its part of the sanity checks in the init macro
			{% set boundary_box_min_x = boundary_box_min_x - svv.idex_xoffset %}
		{% endif %}

		{% set center_x = printable_x_max / 2.0 %}
		{% set safe_distance = printer.configfile.settings.dual_carriage.safe_distance|float %}
		{% set object_width = boundary_box_max_x - boundary_box_min_x %}
		{% set copy_mode_max_width = center_x %}
		{% set mirror_mode_max_width = center_x - safe_distance / 2.0 %}

		DEBUG_ECHO PREFIX="START_PRINT" MSG="OBJECT_WIDTH: {object_width} BOUNDARY_BOX_MIN_X: {boundary_box_min_x} BOUNDARY_BOX_MAX_X: {boundary_box_max_x} CENTER_X: {center_x} SAFE_DISTANCE: {safe_distance}"

		# object size sanity check
		{% if idex_mode == "copy" and object_width > copy_mode_max_width %}
			_LED_START_PRINTING_ERROR
			{ action_raise_error("Object is too big for copy mode! Max supported width is %s mm" % (copy_mode_max_width)) }
		{% endif %}
		{% if idex_mode == "mirror" and object_width > mirror_mode_max_width %}
			_LED_START_PRINTING_ERROR
			{ action_raise_error("Object is too big for mirror mode! Max supported width is %s mm" % (mirror_mode_max_width)) }
		{% endif %}

		# get object x-offset to center the object on the build plate
		{% if printer["gcode_macro RatOS"].auto_center_subject|default(false)|lower == 'true' %}
			{% set object_xoffset = (printable_x_max - boundary_box_max_x - boundary_box_min_x) / 2 %}
			SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=object_xoffset VALUE={object_xoffset}
		{% endif %}

	{% endif %}

	# filament detection in case user has filament sensors configured
	{% set has_initial_toolhead_filament_sensor = true if printer["filament_switch_sensor toolhead_filament_sensor_t%s" % initial_tool] is defined else false %}
	{% if has_initial_toolhead_filament_sensor %}
		# Initial toolhead filament sensor check 
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t%s" % initial_tool].enabled|lower == "true" %}
			{% if printer["filament_switch_sensor toolhead_filament_sensor_t%s" % initial_tool].filament_detected|lower != "true" %}
				_LED_START_PRINTING_ERROR
				{ action_raise_error("Filament not detected! Toolhead T%s filament sensor is empty." % (initial_tool)) }
			{% endif %}
		{% endif %}
	{% endif %}
	{% set has_initial_bowden_filament_sensor = true if printer["filament_switch_sensor bowden_filament_sensor_t%s" % initial_tool] is defined else false %}
	{% if has_initial_bowden_filament_sensor %}
		# Initial toolhead bowden filament sensor check 
		{% if printer["filament_switch_sensor bowden_filament_sensor_t%s" % initial_tool].enabled|lower == "true" %}
			{% if printer["filament_switch_sensor bowden_filament_sensor_t%s" % initial_tool].filament_detected|lower != "true" %}
				_LED_START_PRINTING_ERROR
				{ action_raise_error("Filament not detected! Toolhead T%s bowden sensor is empty." % (initial_tool)) }
			{% endif %}
		{% endif %}
	{% endif %}
	{% if printer["dual_carriage"] is defined and both_toolheads %}
		# Secondary toolhead filament sensor check 
		{% set has_secondary_toolhead_filament_sensor = true if printer["filament_switch_sensor toolhead_filament_sensor_t%s" % (1 if initial_tool == 0 else 0)] is defined else false %}
		{% if has_secondary_toolhead_filament_sensor %}
			{% if printer["filament_switch_sensor toolhead_filament_sensor_t%s" % (1 if initial_tool == 0 else 0)].enabled|lower == "true" %}
				{% if printer["filament_switch_sensor toolhead_filament_sensor_t%s" % (1 if initial_tool == 0 else 0)].filament_detected|lower != "true" %}
					_LED_START_PRINTING_ERROR
					{ action_raise_error("Filament not detected! Toolhead T%s filament sensor is empty." % (1 if initial_tool == 0 else 0)) }
				{% endif %}
			{% endif %}
		{% endif %}
		# Secondary toolhead bowden filament sensor check 
		{% set has_secondary_bowden_filament_sensor = true if printer["filament_switch_sensor bowden_filament_sensor_t%s" % (1 if initial_tool == 0 else 0)] is defined else false %}
		{% if has_secondary_bowden_filament_sensor %}
			{% if printer["filament_switch_sensor bowden_filament_sensor_t%s" % (1 if initial_tool == 0 else 0)].enabled|lower == "true" %}
				{% if printer["filament_switch_sensor bowden_filament_sensor_t%s" % (1 if initial_tool == 0 else 0)].filament_detected|lower != "true" %}
					_LED_START_PRINTING_ERROR
					{ action_raise_error("Filament not detected! Toolhead T%s bowden sensor is empty." % (1 if initial_tool == 0 else 0)) }
				{% endif %}
			{% endif %}
		{% endif %}
	{% endif %}

	# chamber filter control
	_CHAMBER_FILTER_ON AT="before_print_start"

	# spool join
	{% if printer["dual_carriage"] is defined %}
		{% if printer["gcode_macro _IDEX_JOIN_SPOOLS"].enabled|default(false)|lower == 'true' %}
			{% if both_toolheads %}
				RATOS_ECHO MSG="Spool join is not possible if both toolheads are in use!"
				SET_GCODE_VARIABLE MACRO=_IDEX_JOIN_SPOOLS VARIABLE=enabled VALUE=False
			{% endif %}
		{% endif %}
	{% endif %}

	# reset toolhead offset
	{% if printer["dual_carriage"] is defined %}
		{% if idex_mode == '' %}
			_SET_TOOLHEAD_OFFSET T={default_toolhead} MOVE={1 if "xyz" in printer.toolhead.homed_axes else 0}
		{% endif %}
	{% endif %}

	# start 
	CLEAR_PAUSE                                # clear pause state
	{% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
		G90
	{% endif %}
	SAVE_GCODE_STATE NAME=start_print_state    # save gcode state

	# Metric values
	G21
	# Absolute positioning
	G90 
	# Set extruder to absolute mode
	M82
	_USER_START_PRINT_BEFORE_HOMING { rawparams }

	# handle stowable probe
	{% if z_probe_stowable == true %}
		STOWABLE_PROBE_BEGIN_BATCH
	{% endif %}

	# Home if needed
	MAYBE_HOME

	# Make sure we're clear of the bed
	G1 Z{z_hop} F{z_speed}

	# move toolhead to the oozeguard if needed
	{% if idex_mode != '' and not (printer.configfile.settings.beacon is defined and beacon_contact_z_calibration) %}
		PARK_TOOLHEAD
	{% endif %}

	# heat chamber
	{% if chamber_temp > 0 %}
		{% if printer["fan_generic filter"] is defined %}
			{% if printer["gcode_macro RatOS"].chamber_heater_filter_fan_speed|default(0)|float > 0 %}
				SET_FAN_SPEED FAN=filter SPEED={printer["gcode_macro RatOS"].chamber_heater_filter_fan_speed|default(0)|float}
			{% endif %}
		{% endif %}
		_CHAMBER_HEATER_ON START_CHAMBER_TEMP={start_chamber_temp} CHAMBER_TEMP={chamber_temp}
		_USER_START_PRINT_HEAT_CHAMBER { rawparams } CHAMBER_TEMP={chamber_temp} 
	{% endif %}

	# Run the customizable "BEFORE_HEATING_BED" macro.
	_START_PRINT_BEFORE_HEATING_BED T={initial_tool} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode}

	RATOS_ECHO MSG="Heating bed..."
	# Wait for bed to heat up
	M190 S{bed_temp}

	# Wait for bed thermal expansion
	{% if bed_heat_soak_time > 0 %}
		RATOS_ECHO MSG="Heat soaking bed for {(bed_heat_soak_time * 1000)} seconds..."
		G4 P{(bed_heat_soak_time * 1000)}
	{% endif %}

	# Run the user created "AFTER_HEATING_BED" macro
	_USER_START_PRINT_AFTER_HEATING_BED { rawparams }

	# Run the customizable "AFTER_HEATING_BED" macro.
	_START_PRINT_AFTER_HEATING_BED T={initial_tool} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode}

	# Run the user created "START_PRINT_BED_MESH" macro
	_USER_START_PRINT_BED_MESH { rawparams } X0={X0} X1={X1} Y0={Y0} Y1={Y1}

	# Run the customizable "BED_MESH" macro
	_START_PRINT_BED_MESH X0={X0} X1={X1} Y0={Y0} Y1={Y1} T={initial_tool} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode}

	# handle stowable probe
	{% if z_probe_stowable == true %}
		STOWABLE_PROBE_END_BATCH
	{% endif %}

	# Start heating extruder
	{% if idex_mode == '' %}
		SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={extruder_first_layer_temp[0]|float}
	{% else %}
		{% if initial_tool == 0 or both_toolheads or (default_toolhead == 0 and printer.configfile.settings.beacon is defined and beacon_contact_z_calibration) %}
			SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={extruder_first_layer_temp[0]|float}
		{% endif %}
		{% if initial_tool == 1 or both_toolheads or (default_toolhead == 1 and printer.configfile.settings.beacon is defined and beacon_contact_z_calibration) %}
			SET_HEATER_TEMPERATURE HEATER="extruder1" TARGET={extruder_first_layer_temp[1]|float}
		{% endif %}
	{% endif %}

	# Run the users "PARK" macro
	_USER_START_PRINT_PARK { rawparams }

	# Run the customizable "PARK" macro
	_START_PRINT_PARK

	# Wait for extruder to heat up
	RATOS_ECHO MSG="Heating Extruder..."
	{% if idex_mode == '' %}
		TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={extruder_first_layer_temp[0]|float}  MAXIMUM={extruder_first_layer_temp[0]|float + 5}
	{% else %}
		{% if initial_tool == 0 or both_toolheads or (default_toolhead == 0 and printer.configfile.settings.beacon is defined and beacon_contact_z_calibration) %}
			TEMPERATURE_WAIT SENSOR="extruder" MINIMUM={extruder_first_layer_temp[0]|float}  MAXIMUM={extruder_first_layer_temp[0]|float + 5}
		{% endif %}
		{% if initial_tool == 1 or both_toolheads or (default_toolhead == 1 and printer.configfile.settings.beacon is defined and beacon_contact_z_calibration) %}
			TEMPERATURE_WAIT SENSOR="extruder1" MINIMUM={extruder_first_layer_temp[1]|float}  MAXIMUM={extruder_first_layer_temp[1]|float + 5}
		{% endif %}
	{% endif %}

	# Wait for extruder thermal expansion
	{% if hotend_heat_soak_time > 0 %}
		RATOS_ECHO MSG="Heat soaking hotend for {(hotend_heat_soak_time * 1000)} seconds..."
		G4 P{(hotend_heat_soak_time * 1000)}
	{% endif %}

	# visual feedback
	{% if idex_mode == '' %}
		_LED_PRINTING
	{% else %}
		{% if idex_mode == "copy" or idex_mode == "mirror" %}
			_LED_PRINTING
		{% else %}
			{% if both_toolheads %}
				_LED_PRINTING TOOLHEAD={initial_tool}
				{% if toolchange_standby_temp > -1 %}
					_LED_TOOLHEAD_STANDBY TOOLHEAD={0 if initial_tool == 1 else 1}
				{% else %}
					_LED_PRINTING TOOLHEAD={0 if initial_tool == 1 else 1}
				{% endif %}
			{% else %}
				_LED_PRINTING TOOLHEAD={initial_tool}
				_LED_DEACTIVATE_TOOLHEAD TOOLHEAD={0 if initial_tool == 1 else 1}
			{% endif %}
		{% endif %}
	{% endif %}

	# Run the user created "AFTER_HEATING_EXTRUDER" macro.
	_USER_START_PRINT_AFTER_HEATING_EXTRUDER { rawparams } X0={X0} X1={X1} Y0={Y0} Y1={Y1}

	# Run the customizable "AFTER_HEATING_EXTRUDER" macro.
	_START_PRINT_AFTER_HEATING_EXTRUDER X0={X0} X1={X1} Y0={Y0} Y1={Y1} INITIAL_TOOLHEAD={initial_tool} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode}

	# cool down the preheated probing toolhead if not needed for printing
	{% if idex_mode != '' %}
		{% if not both_toolheads %}
			{% if initial_tool != default_toolhead %}
				SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET=0
			{% endif %}
		{% endif %}
	{% endif %}

	# put toolhead into standby mode if configured
	{% if idex_mode != '' %}
		{% if idex_mode != "copy" and idex_mode != "mirror" %}
			{% if toolchange_standby_temp > -1 %}
				SET_HEATER_TEMPERATURE HEATER={'extruder' if initial_tool == 1 else 'extruder1'} TARGET={toolchange_standby_temp}
			{% endif %}
		{% endif %}
	{% endif %}

	# cache x offset
	{% if idex_mode != '' %}
		{% set x_offset = printer.toolhead.position.x|float - printer.gcode_move.gcode_position.x|float %}
	{% endif %}

	# restore gcode state
	RESTORE_GCODE_STATE NAME=start_print_state      
	{% if idex_mode != '' %}
		# restore x offset
		{% set act_idex_mode = printer["dual_carriage"].carriage_1|default('')|lower %}
		{% if act_idex_mode == "copy" or act_idex_mode == "mirror" %}
			SET_GCODE_OFFSET X={x_offset} MOVE=0
		{% endif %}
	{% endif %}

	# restore IDEX mode
	{% if idex_mode != '' %}
		{% if idex_mode == "copy" or idex_mode == "mirror" %}
			{% if idex_mode == "copy" and idex_mode != act_idex_mode %}
				_IDEX_COPY DANCE=0
			{% elif idex_mode == "mirror" and idex_mode != act_idex_mode %}
				_IDEX_MIRROR DANCE=0
			{% endif %}
			# adjust object x-offset
			{% if printer["gcode_macro RatOS"].auto_center_subject|default(false)|lower == 'true' %}
				RATOS_ECHO MSG="Adjusting object x-offset by {(object_xoffset)} mm"
				SET_GCODE_OFFSET X_ADJUST={object_xoffset} MOVE=0
			{% endif %}
		{% else %}
			_SELECT_TOOL T={initial_tool} TOOLSHIFT=false
			{% if initial_tool != default_toolhead %}
				#################################################################
				# hacking stupid restore gcode bs
				# test if this is only needed bc of the new beacon homing routine
				{% set svv = printer.save_variables.variables %}
				SAVE_VARIABLE VARIABLE=idex_applied_offset VALUE={default_toolhead}
				#################################################################
				_SET_TOOLHEAD_OFFSET T={initial_tool} MOVE=0
			{% endif %}
		{% endif %}
	{% endif %}

	# set nozzle thermal expansion offset
	{% if printer.configfile.settings.beacon is defined %}
		# the previously called restore gcode state removed the temp offset
		# we need first to reset the applied offset value in the variables file
		_BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
		_BEACON_SET_NOZZLE_TEMP_OFFSET TOOLHEAD={initial_tool}
	{% endif %}

	# Set extrusion mode based on user configuration
	_SET_EXTRUSION_MODE

	# set is_printing_gcode state
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=True

	# set initial toolchange timestamp
	{% if printer["gcode_macro _SELECT_TOOL"] is defined %}
		SET_GCODE_VARIABLE MACRO=_SELECT_TOOL VARIABLE=last_timestamp VALUE={printer["print_stats"].print_duration}
	{% endif %}

	# user END_START_PRINT hook
	_USER_END_START_PRINT { rawparams } 

	G92 E0    # reset extrusion distance

	# chamber filter control
	_CHAMBER_FILTER_ON AT="after_print_start"

	RATOS_ECHO MSG="Printing..."


#####
# START PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####
[gcode_macro _START_PRINT_BEFORE_HEATING_BED]
gcode:
	# parameter
	{% set target_idex_mode = params.IDEX_MODE|default("")|lower %}
	{% set initial_toolhead = params.T|default(default_toolhead)|int %}
	{% set both_toolheads = true if params.BOTH_TOOLHEADS|default(true)|lower=='true' else false %}

	# config
	{% set min_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
	{% set max_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float + 5 %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set idex_mode = '' %}
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% endif %}
	{% set act_t = 1 if idex_mode == 'primary' else 0 %}

	# automated toolhead z-offset calibration config
	{% set auto_z_offset_calibration = False %}
	{% if printer["dual_carriage"] is defined and printer["gcode_macro _VAOC"] is defined %}
		{% set is_fixed = true if printer["gcode_macro _VAOC"].is_fixed|default(true)|lower == 'true' else false %}
		{% if printer["gcode_macro _VAOC"].auto_z_offset_calibration|default("false")|lower == 'true' and is_fixed %}
			{% if target_idex_mode != "copy" and target_idex_mode != "mirror" %}
				{% if both_toolheads or initial_toolhead != default_toolhead %}
					{% set auto_z_offset_calibration = True %}
				{% endif %}
			{% endif %}
		{% endif %}
	{% endif %}

	# beacon contact config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}

	# preheat extruder
	{% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
		RATOS_ECHO MSG="Pre-heating extruder..."
		# Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp. 
		# Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
		{% if printer["dual_carriage"] is defined %}
			{% if auto_z_offset_calibration %}
				SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={min_temp}
				SET_HEATER_TEMPERATURE HEATER="extruder1" TARGET={min_temp}
			{% else %}
				SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET={min_temp}
			{% endif %}
		{% else %}
			SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={min_temp}
		{% endif %}
	{% endif %}

	# park beacon for heat soaking
	{% if printer.configfile.settings.beacon is defined and beacon_contact_z_calibration %}
		{% if printer["dual_carriage"] is defined and act_t != default_toolhead %}
			_SELECT_TOOL T={default_toolhead} X={safe_home_x} Y={safe_home_y} TOOLSHIFT=True
		{% endif %}
		RATOS_ECHO MSG="Heat soaking beacon..."
		{% if auto_z_offset_calibration %}
			{% set safe_distance = printer.configfile.settings.dual_carriage.safe_distance|float %}
			{% if default_toolhead == 0 %}
				_SELECT_TOOL T=0 TOOLSHIFT=false
				G1 X{safe_home_x - safe_distance / 2} F{speed}
				SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
				G1 X{safe_home_x + safe_distance / 2} F{speed}
				SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
			{% elif default_toolhead == 1 %}
				_SELECT_TOOL T=1 TOOLSHIFT=false
				G1 X{safe_home_x + safe_distance / 2} F{speed}
				SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
				G1 X{safe_home_x - safe_distance / 2} F{speed}
				SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
			{% endif %}
		{% else %}
			G0 X{safe_home_x} Y{safe_home_y} F{speed}
		{% endif %}
		G0 Z2 F{z_speed}
	{% endif %}


[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
	# parameter
	{% set target_idex_mode = params.IDEX_MODE|default("")|lower %}
	{% set initial_toolhead = params.T|default(default_toolhead)|int %}
	{% set both_toolheads = true if params.BOTH_TOOLHEADS|default(true)|lower=='true' else false %}

	# config
	{% set min_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
	{% set max_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float + 5 %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}

	# automated toolhead z-offset calibration config
	{% set auto_z_offset_calibration = False %}
	{% if printer["dual_carriage"] is defined and printer["gcode_macro _VAOC"] is defined %}
		{% set is_fixed = true if printer["gcode_macro _VAOC"].is_fixed|default(true)|lower == 'true' else false %}
		{% if printer["gcode_macro _VAOC"].auto_z_offset_calibration|default("false")|lower == 'true' and is_fixed %}
			{% if target_idex_mode != "copy" and target_idex_mode != "mirror" %}
				{% if both_toolheads or initial_toolhead != default_toolhead %}
					{% set auto_z_offset_calibration = True %}
				{% endif %}
			{% endif %}
		{% endif %}
	{% endif %}

	# beacon contact config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}
	{% set beacon_contact_z_homing = true if printer["gcode_macro RatOS"].beacon_contact_z_homing|default(false)|lower == 'true' else false %}
	{% set beacon_contact_wipe_before_calibrate = true if printer["gcode_macro RatOS"].beacon_contact_wipe_before_calibrate|default(false)|lower == 'true' else false %}

	# wait for extruder to be preheated
	{% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
		RATOS_ECHO MSG="Waiting for extruder to be preheated..."
		# Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp. 
		# Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
		{% if printer["dual_carriage"] is defined %}
			{% if auto_z_offset_calibration %}
				TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
				TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={min_temp} MAXIMUM={max_temp}
			{% else %}
				{% if default_toolhead == 0 %}
					TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
				{% else %}
					TEMPERATURE_WAIT SENSOR=extruder1 MINIMUM={min_temp} MAXIMUM={max_temp}
				{% endif %}
			{% endif %}
		{% else %}
			TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
		{% endif %}
	{% endif %}
	
	# raise z after heat soaking the beacon
	{% if printer.configfile.settings.beacon is defined %}
		G0 Z{z_hop} F{z_hop_speed}
	{% endif %}

	# automated toolhead z-offset calibration
	{% if auto_z_offset_calibration %}
		{% set parking_position_t0 = printer["gcode_macro T0"].parking_position|float %}
		{% set parking_position_t1 = printer["gcode_macro T1"].parking_position|float %}
		_SELECT_TOOL T={default_toolhead} X={safe_home_x} Y={safe_home_y} TOOLSHIFT=True
		PARK_TOOLHEAD
		_CLEANING_MOVE TOOLHEAD={default_toolhead}
		_SELECT_TOOL T={0 if default_toolhead == 1 else 1} X={parking_position_t0 if default_toolhead == 1 else parking_position_t0} Y=0 TOOLSHIFT=false
		_CLEANING_MOVE TOOLHEAD={0 if default_toolhead == 1 else 1}
		_VAOC_CALIBRATE_Z_OFFSET AUTO_Z_OFFSET=True
		_SELECT_TOOL T={default_toolhead} X={safe_home_x} Y={safe_home_y} TOOLSHIFT=false
	{% endif %}

	# automatic bed leveling
	{% set needs_rehoming = False %}
	{% if printer.z_tilt is defined and not printer.z_tilt.applied %}
		RATOS_ECHO MSG="Adjusting Z tilt..."
		Z_TILT_ADJUST
		RATOS_ECHO MSG="Rehoming Z after Z tilt adjustment..."
		{% set needs_rehoming = True %}
	{% endif %}
	{% if printer.quad_gantry_level is defined and not printer.quad_gantry_level.applied %}
	 	RATOS_ECHO MSG="Running quad gantry leveling..."
		QUAD_GANTRY_LEVEL 
		RATOS_ECHO MSG="Rehoming Z after quad gantry leveling..."
		{% set needs_rehoming = True %}
	{% endif %}

	# Home again as Z will have changed after automatic bed leveling and bed heating.
	{% if needs_rehoming %}
		G0 Z{z_hop} F{z_hop_speed}
		G0 X{safe_home_x} Y{safe_home_y} F{speed}
		{% if printer.configfile.settings.beacon is defined and beacon_contact_z_homing %}
			BEACON_AUTO_CALIBRATE  
			G0 Z{z_hop} F{z_hop_speed}
			G0 X{safe_home_x} Y{safe_home_y} F{speed}
		{% else %}
			G28 Z
		{% endif %}
	{% endif %}

	# beacon contact z-calibration with model creating
	{% if printer.configfile.settings.beacon is defined and beacon_contact_z_calibration %}
		{% if beacon_contact_wipe_before_calibrate %}
			_START_PRINT_AFTER_HEATING_BED_PROBE_FOR_WIPE
		{% endif %}
		_START_PRINT_AFTER_HEATING_BED_CALIBRATE_Z
	{% endif %}


[gcode_macro _START_PRINT_AFTER_HEATING_BED_PROBE_FOR_WIPE]
gcode:
	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# move to wipe position
	G0 Z5 F{z_speed}
	G0 X50 Y10 F{speed}

	# probe at wipe position
	PROBE PROBE_METHOD=contact SAMPLES=1
	BEACON_QUERY


[gcode_macro _START_PRINT_AFTER_HEATING_BED_CALIBRATE_Z]
gcode:
	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}

	# beacon contact config
	{% set beacon_contact_calibration_temp = printer["gcode_macro RatOS"].beacon_contact_calibration_temp|default(150)|int %}
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}
	{% set beacon_contact_z_homing = true if printer["gcode_macro RatOS"].beacon_contact_z_homing|default(false)|lower == 'true' else false %}
	{% set beacon_contact_calibration_location = printer["gcode_macro RatOS"].beacon_contact_calibration_location|default("front")|lower %}
	{% set beacon_contact_calibrate_margin_x = printer["gcode_macro RatOS"].beacon_contact_calibrate_margin_x|default(30)|int %}
	{% set beacon_contact_wipe_before_calibrate = true if printer["gcode_macro RatOS"].beacon_contact_wipe_before_calibrate|default(false)|lower == 'true' else false %}
	{% if printer.configfile.settings.beacon is defined %}
		# get calibration x position
		{% set safe_z_calibration_margin_y = 5 %}
		{% if beacon_contact_calibration_location == "center" %}
			{% set safe_z_calibration_x = safe_home_x %}
			{% set safe_z_calibration_y = safe_home_y %}
		{% elif beacon_contact_calibration_location == "front" %}
			{% set safe_z_calibration_x = safe_home_x %}
			{% set safe_z_calibration_y = safe_z_calibration_margin_y + printer.configfile.config.beacon.y_offset|float %}
		{% elif beacon_contact_calibration_location == "corner" %}
			{% set safe_z_calibration_x = beacon_contact_calibrate_margin_x %}
			{% if printer["dual_carriage"] is defined and default_toolhead == 1 %}
				{% set safe_z_calibration_x = printable_x_max - beacon_contact_calibrate_margin_x %}
			{% endif %}
			{% set safe_z_calibration_y = safe_z_calibration_margin_y + printer.configfile.config.beacon.y_offset|float %}
		{% endif %}
	{% endif %}

	# wipe before z-calibration
	{% if beacon_contact_wipe_before_calibrate %}
		{% if printer.beacon.last_probe_result|lower == "ok" %}
			{% set last_z_offset = printer.beacon.last_z_result %}
			RATOS_ECHO MSG="Auto calibration nozzle wipe with probe result {last_z_offset}..."
			G0 Z{(0.2 + last_z_offset)} F{z_speed}
			G0 X70 F300
		{% else %}
			RATOS_ECHO MSG="Skipping auto calibration nozzle wipe because probing failed!"
		{% endif %}
	{% endif %}

	# moving to safe z-calibration position
	G0 Z5 F{z_speed}
	G0 X{safe_z_calibration_x} Y{safe_z_calibration_y} F{speed}
	# set probing toolhead to probing temperature
	RATOS_ECHO MSG="Heating extruder to probing temperature..."
	SET_HEATER_TEMPERATURE HEATER={"extruder" if default_toolhead == 0 else "extruder1"} TARGET={beacon_contact_calibration_temp}
	TEMPERATURE_WAIT SENSOR={"extruder" if default_toolhead == 0 else "extruder1"} MINIMUM={beacon_contact_calibration_temp} MAXIMUM={beacon_contact_calibration_temp + 5}
	# auto calibration
	RATOS_ECHO MSG="Beacon contact auto calibration..."
	BEACON_AUTO_CALIBRATE
	# raise z
	G0 Z5 F{z_speed}


[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set first_x = printer["gcode_macro START_PRINT"].first_x|default(-1)|float %}
	{% set first_y = printer["gcode_macro START_PRINT"].first_y|default(-1)|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set center_x = printable_x_max / 2.0 %}
	{% set center_y = printable_y_max / 2.0 %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% if printer["dual_carriage"] is defined %}
		{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed|float * 60 %}
	{% endif %}

	# parameter
	{% set X0 = params.X0|default(-1)|int %}
	{% set X1 = params.X1|default(-1)|int %}
	{% set Y0 = params.Y0|default(-1)|int %}
	{% set Y1 = params.Y1|default(-1)|int %}
	{% set idex_mode = params.IDEX_MODE|default('')|lower %}
	{% set both_toolheads = true if params.BOTH_TOOLHEADS|default(true)|lower=='true' else false %}
	{% set initial_toolhead = params.INITIAL_TOOLHEAD|default(default_toolhead)|int %}

	{% if idex_mode == '' %}
		# DEFAULT
		_PRIME
	{% else %}
		# IDEX
		{% if idex_mode == "copy" or idex_mode == "mirror" %}
			RATOS_ECHO PREFIX="IDEX" MSG="using combined prime offset for IDEX {idex_mode} mode"
			_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
		{% else %}
			{% if both_toolheads %}
				{% if initial_toolhead == 0 %}
					RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T1"
					_SELECT_TOOL T=1 TOOLSHIFT=false
					_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
					RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T0"
					_SELECT_TOOL T=0 TOOLSHIFT=false
					_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
				{% else %}
					RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T0"
					_SELECT_TOOL T=0 TOOLSHIFT=false
					_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
					RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T1"
					_SELECT_TOOL T=1 TOOLSHIFT=false
					_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
				{% endif %}
			{% else %}
				RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T{initial_toolhead}"
				_SELECT_TOOL T={initial_toolhead} TOOLSHIFT=false
				_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
			{% endif %}
		{% endif %}
	{% endif %}

	# Handle toolhead settings
	CACHE_TOOLHEAD_SETTINGS KEY="start_print_after_heating_extruder"
	SET_MACRO_TRAVEL_SETTINGS

	{% if X0 > -1 and Y1 > -1 %}

		# set toolchange acceleration
		{% if printer["dual_carriage"] is defined %}
			{% set acceleration = printer["gcode_macro RatOS"].toolchange_travel_accel %}
			{% set max_accel = printer.toolhead.max_accel|float %}
			{% set square_corner_velocity = printer.toolhead.square_corner_velocity|float %}
			SET_VELOCITY_LIMIT ACCEL={acceleration} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY=20
		{% endif %}

		# z-hop after priming
		{% if idex_mode != "copy" and idex_mode != "mirror" %}
			G0 Z3 F{z_speed}
		{% endif %}

		# get safe first z
		{% if printer["dual_carriage"] is defined and printer["gcode_macro RatOS"].nozzle_priming|lower == 'false' %}
			{% set first_z = 1 %}
		{% else %}
			{% set first_z = 3 %}
		{% endif %}

		# move to print area
		{% if idex_mode == "mirror" %}
			{% if first_y >= 0 %}
				G0 Y{first_y} F{speed}
			{% else %}
				G0 Y{Y1} F{speed}
			{% endif %}
		{% endif %}
		{% if idex_mode != "copy" and idex_mode != "mirror" %}
			{% if printer["dual_carriage"] is defined and printer["gcode_macro RatOS"].nozzle_priming|lower == 'false' %}
				_MOVE_TO_LOADING_POSITION TOOLHEAD={initial_toolhead}
				_PURGE_FILAMENT TOOLHEAD={initial_toolhead} E={printer["gcode_macro RatOS"].toolchange_first_purge|default(50)|float}
				_CLEANING_MOVE TOOLHEAD={initial_toolhead}
			{% endif %}
			{% if first_x >= 0 and first_y >= 0 %}
				G0 X{first_x} Y{first_y} Z{first_z} F{speed}
			{% else %}
				{% set first_x = X0 %}
				{% set first_y = Y0 %}
				{% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' or printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
					{% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
						{% set first_x = X0 %}
					{% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
						{% set first_x = X1 %}
					{% else %}
						{% if printer["gcode_macro RatOS"].nozzle_prime_start_x|float <= center_x %}
							{% set first_x = X0 %}
						{% else %}
							{% set first_x = X1 %}
						{% endif %}
					{% endif %}
					{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
						{% set first_y = Y0 %}
					{% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
						{% set first_y = Y1 %}
					{% else %}
						{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float <= center_y %}
							{% set first_y = Y0 %}
						{% else %}
							{% set first_y = Y1 %}
						{% endif %}
					{% endif %}
				{% endif %}
				G0 X{first_x} Y{first_y} Z{first_z} F{speed}
			{% endif %}
		{% endif %}

	{% endif %}

	# Handle toolhead settings
	RESTORE_TOOLHEAD_SETTINGS KEY="start_print_after_heating_extruder"

	{% if printer["gcode_macro RatOS"].skew_profile is defined %}
		SKEW_PROFILE LOAD={printer["gcode_macro RatOS"].skew_profile}
	{% endif %}


[gcode_macro _PRIME]
gcode:
	# prime blob
	{% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' or printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
		PRIME_BLOB INITIAL_TOOLHEAD={params.INITIAL_TOOLHEAD} BOTH_TOOLHEADS={params.BOTH_TOOLHEADS} IDEX_MODE={params.IDEX_MODE} Y1={params.Y1}
	{% endif %}


#####
# END PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####
# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
	# reset is_printing_gcode state
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=False

	# Save gcode state
	SAVE_GCODE_STATE NAME=end_print_state
	{% if printer["dual_carriage"] is defined %}
		# reset swapped toolheads mode
		SET_GCODE_VARIABLE MACRO=_IDEX_REMAP_TOOLHEADS VARIABLE=enabled VALUE=False
		# reset spool join mode
		SET_GCODE_VARIABLE MACRO=_IDEX_JOIN_SPOOLS VARIABLE=enabled VALUE=False
		# reset object xoffset
		{% if printer["gcode_macro RatOS"].auto_center_subject|default(false)|lower == 'true' %}
			{% set object_xoffset = printer["gcode_macro START_PRINT"].object_xoffset|default(0)|float %}
			RATOS_ECHO MSG="Adjusting object x-offset by {(0-object_xoffset)} mm"
			SET_GCODE_OFFSET X_ADJUST={(0-object_xoffset)}
		{% endif %}
	{% endif %}

	# run end print macros
	_USER_END_PRINT_BEFORE_HEATERS_OFF { rawparams }
	_END_PRINT_BEFORE_HEATERS_OFF
	TURN_OFF_HEATERS
	_USER_END_PRINT_AFTER_HEATERS_OFF { rawparams }
	_END_PRINT_AFTER_HEATERS_OFF
	_USER_END_PRINT_PARK { rawparams }
	_END_PRINT_PARK

	# Clear skew profile if any was loaded.
	{% if printer["gcode_macro RatOS"].skew_profile is defined %}
		SET_SKEW CLEAR=1
	{% endif %}

	# turn motors off for non idex printers
	{% if printer["dual_carriage"] is not defined and printer["gcode_macro RatOS"].end_print_motors_off|lower != 'false' %}
		# DEFAULT
		M84
	{% endif %}

	# Part cooling fan off
	M107

	# Clear bed mesh so that G28 doesn't fail.
	BED_MESH_CLEAR
	RATOS_ECHO MSG="Done :)"

	# restore gcode state
	RESTORE_GCODE_STATE NAME=end_print_state

	# turn motors off for idex printers
	{% if printer["dual_carriage"] is defined %}
		# IDEX
		# for the IDEX we must do this after RESTORE_GCODE_STATE
		M84
	{% endif %}

	# reset nozzle thermal expansion offset
	{% if printer.configfile.settings.beacon is defined %}
		{% if printer["dual_carriage"] is not defined %}
			# beacon config
			{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}
			{% set beacon_contact_expansion_compensation = true if printer["gcode_macro RatOS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}
			{% if beacon_contact_z_calibration and beacon_contact_expansion_compensation %}
				SET_GCODE_OFFSET Z=0 MOVE=0
			{% endif %}
		{% endif %}
		_BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True
	{% endif %}

	# restore toolhead settings
	RESTORE_TOOLHEAD_SETTINGS KEY="start_print"

	# chamber filter control
	_CHAMBER_FILTER_ON AT="print_end"
	_CHAMBER_FILTER_OFF

	# chamber heater control
	_CHAMBER_HEATER_OFF


#####
# END PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####
[gcode_macro _END_PRINT_BEFORE_HEATERS_OFF]
gcode:
	RATOS_ECHO MSG="Cleaning up..."


[gcode_macro _END_PRINT_AFTER_HEATERS_OFF]
gcode:
	# Calculate safe Z position
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set current_z = printer.toolhead.position.z|float %}
	{% set z_hop = printer["gcode_macro RatOS"].end_print_park_z_hop|float %}
	{% set r = printer["gcode_macro RatOS"].end_print_retract_filament|default(4)|float %}
	{% if current_z < (max_z - z_hop) %}
		{% set z_safe = z_hop %}
	{% else %}
		{% set z_safe = max_z - current_z %}
	{% endif %}

	# Relative positioning
	G91
	# Retract the filament a bit before lifting the nozzle.
	G1 E-2 F3600
	# Move to safe Z position
	G0 Z{z_safe} F3600
	# Retract filament even more
	G1 E-{(r-2)} F3600
	# Back to absolute positioning
	G90


#####
# REUSEABLES
####
[gcode_macro _SET_EXTRUSION_MODE]
gcode:
	# Set extrusion mode based on user configuration
	{% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
		M83
	{% else %}
		M82
	{% endif %}