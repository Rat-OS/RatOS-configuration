# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

#####
# INCLUDE MACRO FILES
#####
[include macros/*.cfg]

#####
# GENERAL MACROS
#####

[gcode_macro PAUSE]
description: Pauses the printer
rename_existing: PAUSE_BASE
variable_extrude: 1.5
gcode:
	SAVE_GCODE_STATE NAME=PAUSE_state
	# Define park positions 
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	CACHE_TOOLHEAD_SETTINGS
	SET_MACRO_TRAVEL_SETTINGS
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	# Calculate safe Z position
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set current_z = printer.toolhead.position.z|float %}
	{% if current_z < (max_z - 20.0) %}
			{% set z_safe = 20.0 %}
	{% else %}
			{% set z_safe = max_z - current_z %}
	{% endif %}
	PAUSE_BASE
	G91
	# Retract
	{% if printer.extruder.can_extrude|lower == 'true' %}
		G1 E-{E} F2100
	{% else %}
		{action_respond_info("Extruder not hot enough")}
	{% endif %}
	# Move to park position
	{% if "xyz" in printer.toolhead.homed_axes %}
		G1 Z{z_safe} F{z_speed}
		_PARK LOCATION={printer["gcode_macro RatOS"].pause_print_park_in} X={printer["gcode_macro RatOS"].pause_print_park_x}
	{% else %}
		{action_respond_info("Printer not homed")}
	{% endif %} 
	RESTORE_TOOLHEAD_SETTINGS

[gcode_macro RESUME]
description: Resumes the print if the printer is paused.
rename_existing: RESUME_BASE
gcode:
	{% set can_extrude = printer['extruder'].can_extrude|lower %}
	{% if printer["dual_carriage"] is defined %}
		# IDEX
		{% if printer.toolhead.extruder == 'extruder1' %}
			{% set can_extrude = printer['extruder1'].can_extrude|lower %}
		{% endif %}
	{% endif %}
	{% set E = printer["gcode_macro PAUSE"].extrude|float %}
	# Prime
	{% if can_extrude == 'true' %}
		G91
		G1 E{E} F2100
		G90
	{% else %}
		{action_respond_info("Extruder not hot enough")}
	{% endif %}
	RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED={printer["gcode_macro RatOS"].macro_travel_speed|float}
	RESUME_BASE

[gcode_macro CANCEL_PRINT]
description: Cancels the printer
rename_existing: CANCEL_PRINT_BASE
gcode:
	END_PRINT
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	#SDCARD_RESET_FILE
	CANCEL_PRINT_BASE
	
#####
# START PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####

[gcode_macro START_PRINT]
description: Start print procedure, use this in your Slicer.
variable_is_printing_gcode: False		# used for toolchange macros to know if we are printing gcode and not just in the priming phase
variable_both_toolheads: True  			# used for toolchange macros
gcode:
	# get ratos settings
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set z_probe_stowable = printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
	{% set start_print_heat_chamber_bed_temp = printer["gcode_macro RatOS"].start_print_heat_chamber_bed_temp|default(0.0)|float %}
	{% set max_x = printer.configfile.settings.stepper_x.position_max|float %}
	{% set center_x = max_x / 2 %}

	# get macro parameters
	{% set X0 = params.X0|default(-1)|float %}
	{% set X1 = params.X1|default(-1)|float %}
	{% set Y0 = params.Y0|default(-1)|float %}
	{% set Y1 = params.Y1|default(-1)|float %}
	{% set initial_tool = params.INITIAL_TOOL|default(default_toolhead)|int %}
	{% set chamber_temp = params.CHAMBER_TEMP|default(0.0)|float %}
	{% set bed_temp = params.BED_TEMP|default(printer.heater_bed.target, true)|float %}
	{% set extruder_temp = params.EXTRUDER_TEMP|default(printer.extruder.target, true) %}
	{% set extruder_temp_1 = params.EXTRUDER_TEMP_1|default(0, true)|float %}
	{% set extruder_other_layer_temp = params.EXTRUDER_OTHER_LAYER_TEMP|default(0, true)|float %}
	{% set extruder_other_layer_temp_1 = params.EXTRUDER_OTHER_LAYER_TEMP_1|default(0, true)|float %}

	# reset 0 state
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=False

	# update mainsail UI
	SET_GCODE_VARIABLE MACRO=T0 VARIABLE=active VALUE=True
	SET_GCODE_VARIABLE MACRO=T1 VARIABLE=active VALUE=True
	{% if params.COLOR is defined and params.COLOR_1 is defined %}
		SET_GCODE_VARIABLE MACRO=T0 VARIABLE=color VALUE='"{params.COLOR|string}"'
		SET_GCODE_VARIABLE MACRO=T1 VARIABLE=color VALUE='"{params.COLOR_1|string}"'
	{% endif %}
 
	# this parameter is created by the post processing script, if the script isnt used we assume both heads will be needed
	{% set both_toolheads = true if params.BOTH_TOOLHEADS|default(true)|lower=='true' else false %}
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=both_toolheads VALUE={both_toolheads}

	# cache some values for the layer change macro
	{% if printer["dual_carriage"] is defined %}
		SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=layer_number VALUE=1
		SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=t VALUE={initial_tool}
		SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=extruder_other_layer_temp VALUE={extruder_other_layer_temp}
		SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=extruder_other_layer_temp_1 VALUE={extruder_other_layer_temp_1}
	{% endif %}

	# IDEX mode
	{% set idex_mode = '' %}
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
		IDEX_SINGLE X={printer["gcode_macro RatOS"].parking_position[default_toolhead]}
	{% endif %}
	{% if both_toolheads and (idex_mode == "copy" or idex_mode == "mirror") %}
		{ action_raise_error("Gcode tool changes found. Copy and mirror mode do not support toolchanges.")}
	{% endif %}
	{% if idex_mode == "copy" or idex_mode == "mirror" %}
		{% set both_toolheads = true %}
	{% endif %}

	# IDEX copy and mirror mode sanity check
	{% if idex_mode == "copy" or idex_mode == "mirror" %}
		{% set min_x = X0 %}
		{% set max_x = X1 %}
		{% if params.MIN_X is defined and params.MAX_X is defined %}
			{% set min_x = params.MIN_X|default(-1)|float %}	# params.MIN_X | bounding box value | post processor
			{% set max_x = params.MAX_X|default(-1)|float %}	# params.MAX_X | bounding box value | post processor
		{% endif %}
		{% set safe_distance = printer.configfile.settings.dual_carriage.safe_distance|float %}
		{% if min_x >= 0 and max_x >= 0 %}
			{% if idex_mode == "copy" %}
				{% if max_x - min_x > center_x %}
					{ action_raise_error("Object is too big for copy mode! Max supported width is %s mm" % (center_x)) }
				{% endif %}
			{% elif idex_mode == "mirror" %}
				{% if max_x - min_x > center_x - safe_distance / 2 %}
					{ action_raise_error("Object is too big for mirror mode! Max supported width is %s mm" % (center_x - safe_distance / 2)) }
				{% endif %}
			{% endif %}
		{% else %}
			{ action_raise_error("No print area coordinates found! Please add the X0, X1, Y0 and Y1 parameter to your start print gcode.") }
		{% endif %}
	{% endif %}

	# reset toolhead offset
	{% if idex_mode == '' %}
		_SET_TOOLHEAD_OFFSET T={default_toolhead} MOVE={1 if "xyz" in printer.toolhead.homed_axes else 0}
	{% endif %}

	# start 
	CLEAR_PAUSE                                     # clear pause state
	{% if printer["gcode_macro RatOS"].force_absolute_position|lower == 'true' %}
		G90
	{% endif %}
	SAVE_GCODE_STATE NAME=start_print_state         # save gcode state
	# Metric values
	G21
	# Absolute positioning
	G90 
	# Set extruder to absolute mode
	M82
	_USER_START_PRINT_BEFORE_HOMING
	# handle stowable probe
	{% if z_probe_stowable == true %}
		STOWABLE_PROBE_BEGIN_BATCH
	{% endif %}
	# Home if needed
	MAYBE_HOME
	# move toolhead to the oozeguard
	{% if idex_mode != '' %}
		PARK_TOOLHEAD
	{% endif %}
	{% if chamber_temp > 0 %}
		_START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={chamber_temp} BED_TEMP={start_print_heat_chamber_bed_temp}
		_USER_START_PRINT_HEAT_CHAMBER CHAMBER_TEMP={chamber_temp} BED_TEMP={start_print_heat_chamber_bed_temp}
	{% endif %}
	M117 Heating bed...
	RESPOND MSG="Heating bed..."
	# Wait for bed to heat up
	M190 S{bed_temp}
	# Run the user created "AFTER_HEATING_BED" macro
	_USER_START_PRINT_AFTER_HEATING_BED
	# Run the customizable "AFTER_HEATING_BED" macro.
	_START_PRINT_AFTER_HEATING_BED T={initial_tool} BOTH_TOOLHEADS={both_toolheads}
	# Run the user created "START_PRINT_BED_MESH" macro
	_USER_START_PRINT_BED_MESH X0={X0} X1={X1} Y0={Y0} Y1={Y1}
	# Run the customizable "BED_MESH" macro
	_START_PRINT_BED_MESH X0={X0} X1={X1} Y0={Y0} Y1={Y1} T={initial_tool} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode}
	# handle stowable probe
	{% if z_probe_stowable == true %}
		STOWABLE_PROBE_END_BATCH
	{% endif %}
	# cool down the preheated probing toolhead if not needed for printing
	{% if idex_mode != '' %}
		{% if not both_toolheads %}
			{% if initial_tool != default_toolhead %}
				M104 S{0} T{default_toolhead}
			{% endif %}
		{% endif %}
	{% endif %}
	# Start heating extruder
	{% if idex_mode == '' %}
		M104 S{extruder_temp}
	{% else %}
		{% if t == 0 or both_toolheads %}
			M104 S{extruder_temp} T0
		{% endif %}
		{% if t == 1 or both_toolheads %}
			M104 S{extruder_temp_1|default(printer.extruder1.target, true)} T1
		{% endif %}
	{% endif %}
	# Run the users "PARK" macro
	_USER_START_PRINT_PARK
	# Run the customizable "PARK" macro
	_START_PRINT_PARK
	# Wait for extruder to heat up
	RATOS_ECHO MSG="Heating Extruder..."
	{% if idex_mode == '' %}
		M109 S{extruder_temp}
	{% else %}
		{% if initial_tool == 0 or both_toolheads %}
			M109 S{extruder_temp} T0
		{% endif %}
		{% if initial_tool == 1 or both_toolheads %}
			M109 S{extruder_temp_1|default(printer.extruder1.target, true) } T1
		{% endif %}
	{% endif %}
	# Run the user created "AFTER_HEATING_EXTRUDER" macro.
	_USER_START_PRINT_AFTER_HEATING_EXTRUDER X0={X0} X1={X1} Y0={Y0} Y1={Y1}
	# Run the customizable "AFTER_HEATING_EXTRUDER" macro.
	_START_PRINT_AFTER_HEATING_EXTRUDER X0={X0} X1={X1} Y0={Y0} Y1={Y1} INITIAL_TOOLHEAD={initial_tool} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode}
	M117 Printing...
	RESPOND MSG="Printing..."
	{% if idex_mode != '' %}
		# cache x offset
		{% set x_offset = printer.toolhead.position.x|float - printer.gcode_move.gcode_position.x|float %}
	{% endif %}
	# restore gcode state
	RESTORE_GCODE_STATE NAME=start_print_state      
	{% if idex_mode != '' %}
		# restore x offset
		{% set act_idex_mode = printer["dual_carriage"].carriage_1|default('')|lower %}
		{% if act_idex_mode == "copy" or act_idex_mode == "mirror" %}
				SET_GCODE_OFFSET X={x_offset} MOVE=0
		{% endif %}
	{% endif %}
	# restore IDEX mode
	{% if idex_mode != '' %}
		{% if idex_mode == "copy" or idex_mode == "mirror" %}
			{% if idex_mode == "copy" and idex_mode != act_idex_mode %}
				IDEX_COPY DANCE=0
			{% elif idex_mode == "mirror" and idex_mode != act_idex_mode %}
				IDEX_MIRROR DANCE=0
			{% endif %}
		{% else %}
			_SELECT_TOOL T={initial_tool} SWIPE=0
			{% if initial_tool != default_toolhead %}
				_SET_TOOLHEAD_OFFSET T={initial_tool} MOVE=1
			{% endif %}
		{% endif %}
	{% endif %}
	# Set extrusion mode based on user configuration
	{% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
			M83
	{% else %}
			M82
	{% endif %}
	# set is_printing_gcode state
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=True
	# reset extrusion distance
	G92 E0                                          

#####
# START PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
	{% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
		{% set min_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float %}
		{% set max_temp = printer["gcode_macro RatOS"].preheat_extruder_temp|float + 5 %}
		RATOS_ECHO MSG="Pre-heating extruder..."
		# Wait for extruder to reach a predefined preheat temp so an inductive probe (if present) is at a predictable temp. 
		# Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
		M104 S{min_temp}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={min_temp} MAXIMUM={max_temp}
	{% endif %}

[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# parameter
	{% set X0 = params.X0|default(-1)|int %}
	{% set Y1 = params.Y1|default(-1)|int %}
	{% set idex_mode = params.IDEX_MODE|default('')|lower %}
	{% set both_toolheads = true if params.BOTH_TOOLHEADS|default(true)|lower=='true' else false %}
	{% set initial_toolhead = params.INITIAL_TOOLHEAD|default(default_toolhead)|int %}

	{% if idex_mode == '' %}
		# COREXY - HYBRID
		_PRIME
	{% else %}
		# IDEX
		{% if idex_mode == "copy" or idex_mode == "mirror" %}
			RATOS_ECHO PREFIX="IDEX" MSG="using combined prime offset for IDEX {idex_mode} mode"
			_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
		{% else %}
			{% if both_toolheads %}
				{% if initial_toolhead == 0 %}
					RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T1"
    			_SELECT_TOOL T=1 SWIPE=0
					_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
					RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T0"
					_SELECT_TOOL T=0 SWIPE=0
					_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
				{% else %}
					RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T0"
    			_SELECT_TOOL T=0 SWIPE=0
					_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
					RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T1"
					_SELECT_TOOL T=1 SWIPE=0
					_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
				{% endif %}
			{% else %}
				RATOS_ECHO PREFIX="IDEX" MSG="using prime offset for T{initial_toolhead}"
				_SELECT_TOOL T={initial_toolhead} SWIPE=0
				_PRIME INITIAL_TOOLHEAD={initial_toolhead} BOTH_TOOLHEADS={both_toolheads} IDEX_MODE={idex_mode} Y1={Y1}
			{% endif %}
		{% endif %}
	{% endif %}

	CACHE_TOOLHEAD_SETTINGS
	SET_MACRO_TRAVEL_SETTINGS

	# z-hop after priming
	{% if idex_mode != "copy" and idex_mode != "mirror" %}
		G0 Z3 F{z_speed}
	{% endif %}

	# move to print area
	{% if idex_mode == "mirror" %}
		G0 Y{Y1} F{speed}
	{% endif %}
	{% if idex_mode != "copy" and idex_mode != "mirror" %}
		G0 X{X0} Y{Y1} F{speed}
	{% endif %}

	RESTORE_TOOLHEAD_SETTINGS

	{% if printer["gcode_macro RatOS"].skew_profile is defined %}
		SKEW_PROFILE LOAD={printer["gcode_macro RatOS"].skew_profile}
	{% endif %}

[gcode_macro _PRIME]
gcode:
	{% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
		PRIME_LINE INITIAL_TOOLHEAD={params.INITIAL_TOOLHEAD} BOTH_TOOLHEADS={params.BOTH_TOOLHEADS} IDEX_MODE={params.IDEX_MODE} Y1={params.Y1}
	{% endif %}
	{% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' %}
		PRIME_BLOB INITIAL_TOOLHEAD={params.INITIAL_TOOLHEAD} BOTH_TOOLHEADS={params.BOTH_TOOLHEADS} IDEX_MODE={params.IDEX_MODE} Y1={params.Y1}
	{% endif %}

[gcode_macro _START_PRINT_HEAT_CHAMBER]
description: Uses the extruder sensor to wait for chamber temp. Override the _START_PRINT_HEAT_CHAMBER macro to implement heated chamber handling.
gcode:
	{% if params.CHAMBER_TEMP is defined and params.BED_TEMP is defined and params.CHAMBER_TEMP|int > 0 %}
		{% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
		{% set zSpeed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
		G0 Z{z} F{zSpeed}
		M84
		RATOS_ECHO MSG="Heating chamber..."
		M140 S{params.BED_TEMP}
		TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.CHAMBER_TEMP}
		MAYBE_HOME
	{% endif %}
 
#####
# END PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####

# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
description: End print procedure, use this in your Slicer.
gcode:
	SAVE_GCODE_STATE NAME=end_print_state
	{% if printer["dual_carriage"] is defined %}
		# IDEX - reset is_printing_gcode state
		SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=is_printing_gcode VALUE=False
	{% endif %}
	_USER_END_PRINT_BEFORE_HEATERS_OFF
	_END_PRINT_BEFORE_HEATERS_OFF
	TURN_OFF_HEATERS
	_USER_END_PRINT_AFTER_HEATERS_OFF
	_END_PRINT_AFTER_HEATERS_OFF
	_USER_END_PRINT_PARK
	_END_PRINT_PARK
	# Clear skew profile if any was loaded.
	{% if printer["gcode_macro RatOS"].skew_profile is defined %}
		SET_SKEW CLEAR=1
	{% endif %}
	{% if printer["dual_carriage"] is not defined %}
		# COREXY - HYBRID
		M84
	{% endif %}
	# Part cooling fan off
	M107
	# Clear bed mesh so that G28 doesn't fail.
	BED_MESH_CLEAR
	M117 Done :)
	RATOS_ECHO MSG="Done :)"
	RESTORE_GCODE_STATE NAME=end_print_state
	{% if printer["dual_carriage"] is defined %}
		# IDEX
		# for the IDEX we must do this after RESTORE_GCODE_STATE
		M84
	{% endif %}

#####
# END PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _END_PRINT_BEFORE_HEATERS_OFF]
gcode:
	RATOS_ECHO MSG="Cleaning up..."

[gcode_macro _END_PRINT_AFTER_HEATERS_OFF]
gcode:
	# Calculate safe Z position
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set current_z = printer.toolhead.position.z|float %}
	{% set z_hop = printer["gcode_macro RatOS"].end_print_park_z_hop|float %}
	{% if current_z < (max_z - z_hop) %}
		{% set z_safe = z_hop %}
	{% else %}
		{% set z_safe = max_z - current_z %}
	{% endif %}
	# Relative positioning
	G91
	# Retract the filament a bit before lifting the nozzle.
	G1 E-2 F3600
	# Move to safe Z position
	G0 Z{z_safe} F3600
	# Retract filament even more
	G1 E-2 F3600
	# Back to absolute positioning
	G90
