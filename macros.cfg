# WARNING: DO NOT EDIT OR INCLUDE THIS FILE. THIS IS A TEMPLATE.
# To change your macros, check the root macros.cfg file.

#####
# CONFIGURATION VARIABLES
#####

[gcode_macro ECHO_RATOS_VARS]
gcode:
  {% for var, value in printer["gcode_macro RatOS"].items() %}
    {action_respond_info(var ~ ": " ~ value)}
  {% endfor %}
  
[gcode_macro RatOS]
# Configuration Defaults
# This is only here to make the config backwards compatible.
# Configuration should exclusively happen in printer.cfg.
variable_relative_extrusion: False
variable_preheat_extruder: True
variable_calibrate_bed_mesh: True
variable_nozzle_priming: "primeline"
variable_start_print_park_in: "back"
variable_start_print_park_z_height: 50
variable_end_print_park_in: "back"
variable_pause_print_park_in: "back"
variable_nozzle_cleaning: True
variable_mqtt_alerts: True
variable_macro_travel_speed: 150
gcode:
  ECHO_RATOS_VARS

#####
# GENERAL MACROS
#####

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_extrude: 1.5
gcode:
  {% if printer["gcode_macro RatOS"].mqtt_alerts|lower == 'true' %}
    PUBLISH_ALERT PAYLOAD=PAUSE
  {% endif %}
  SAVE_GCODE_STATE NAME=PAUSE_state
  # Define park positions 
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  PAUSE_BASE
  G91
  # Retract
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G1 E-{E} F2100
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  # Move to park position
  {% if "xyz" in printer.toolhead.homed_axes %}
    G1 Z{z_safe} F900
    _PARK LOCATION={printer["gcode_macro RatOS"].pause_print_park_in} X={printer["gcode_macro RatOS"].pause_print_park_x}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %} 

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
  {% if printer["gcode_macro RatOS"].mqtt_alerts|lower == 'true' %}
    PUBLISH_ALERT PAYLOAD=RESUME
  {% endif %}
  {% set E = printer["gcode_macro PAUSE"].extrude|float %}
  # Prime
  {% if printer.extruder.can_extrude|lower == 'true' %}
    G91
    G1 E{E} F2100
    G90
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
  {% if printer["gcode_macro RatOS"].mqtt_alerts|lower == 'true' %}
    PUBLISH_ALERT PAYLOAD=CANCEL
  {% endif %}
  END_PRINT
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  #SDCARD_RESET_FILE
  CANCEL_PRINT_BASE

[gcode_macro PRIME_LINE]
gcode:
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  # Absolute positioning
  G90 
  # Absolute extrusion
  M82
  M117 Priming nozzle...
  # Lift 5 mm
  G1 Z5 F3000
  # Move to prime area
  G1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} F{speed}
  # Get ready to prime
  G1 Z0.3 F3000
  # Reset extrusion distance
  G92 E0
  # Prime nozzle 
  G1 Y{printer.toolhead.axis_minimum.y + 80} E16 F1200
  # Wipe
  G1 Y{printer.toolhead.axis_minimum.y + 100} F{speed}
  # Reset extrusion
  G92 E0

[gcode_macro PRIME_BLOB]
gcode:
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  # Absolute positioning
  G90 
  # Absolute extrusion
  M82
  M117 Prime blob...
  # Lift 5 mm
  G1 Z5 F3000
  # Reset extrusion distance
  G92 E0
  # move to blob position
  G1 X{printer.toolhead.axis_minimum.x + 5} Y{printer.toolhead.axis_minimum.y + 10} Z0.5 F{speed}
  # Extrude a blob
  G1 F60 E20
  # 40% fan
  M106 S102 
  # Move the extruder up by 5mm while extruding, breaks away from blob
  G1 Z5 F100 E25
  # Move to wipe position, but keep extruding so the wipe is attached to blob
  G1 F200 Y{printer.toolhead.axis_minimum.y + 25} E26 
  # Go down diagonally while extruding
  G1 F200 Y{printer.toolhead.axis_minimum.y + 40} Z0.2 E28 
  # 0% fan
  M106 S0
  # small wipe line
  G1 F200 Y{printer.toolhead.axis_minimum.y +50} Z0.2 E28.6 
  # Break away wipe
  G1 F{speed} Y{printer.toolhead.axis_minimum.y + 100}
  # Reset extrusion distance
  G92 E0

  
[gcode_macro _PARK]
gcode:
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
  # Get X position
  {% if params.X != '' %}
    {% if params.X|float >= printer.toolhead.axis_minimum.x + 5 and params.X|float <= printer.toolhead.axis_maximum.x - 5 %}
      {% set safe_x = params.X|float %}
    {% else %}
      {action_respond_info('The requested X co-ordinate is outside the defined axis bounds - using defaults')}
      {% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
    {% endif %}
  {% else %}
    {% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
  {% endif %}
  # Get Y position
  {% if params.LOCATION|default('back')|lower == 'back' %}
    {% set y = printer.toolhead.axis_maximum.y - 5 %}
  {% elif params.LOCATION|lower == 'front' %}
    {% set y = printer.toolhead.axis_minimum.y + 5 %}
  {% elif params.LOCATION|lower == 'center' %}
    {% set y = printer.toolhead.axis_maximum.y / 2 %}
  {% endif %}
  # Absolute positioning
  G90 
  # Park
  G0 X{safe_x} Y{y} F{speed} 

#####
# COLOR CHANGE
#####
[gcode_macro M600]
gcode:
  PAUSE
  UNLOAD_FILAMENT
  M117 Please load new filament and resume

#####
# FILAMENT MANAGEMENT
#####

[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% if printer["gcode_macro RatOS"].mqtt_alerts|lower == 'true' %}
    PUBLISH_ALERT PAYLOAD=FILAMENT_UNLOAD
  {% endif %}
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  # Extract filament to cold end area 
  G0 E-5 F3600
  # Wait for three seconds
  G4 P3000
  # Push back the filament to smash any stringing 
  G0 E5 F3600
  # Extract back fast in to the cold zone 
  G0 E-15 F3600
  # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
  G0 E-130 F300
  M117 Filament unloaded!
  RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G0 E100 F600
  # Wait a secod
  G4 P1000
  # Purge
  G0 E40 F100
  # Wait for purge to complete
  M400e
  M117 Filament loaded!
  RESTORE_GCODE_STATE NAME=load_state

[gcode_macro SET_CENTER_KINEMATIC_POSITION]
gcode:
  SET_KINEMATIC_POSITION X={printer.toolhead.axis_maximum.x / 2} Y={printer.toolhead.axis_maximum.y / 2} Z={printer.toolhead.axis_maximum.z / 2}

#####
# START PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####

[gcode_macro START_PRINT]
gcode:
  {% if printer["gcode_macro RatOS"].mqtt_alerts|lower == 'true' %}
    PUBLISH_ALERT PAYLOAD=PRINT_STARTED
  {% endif %}
  CLEAR_PAUSE
  SAVE_GCODE_STATE NAME=start_print_state
  # Metric values
  G21
  # Absolute positioning
  G90 
  # Set extruder to absolute mode
  M82
  # Home if it wasn't homed before
  {% if printer.toolhead.homed_axes != 'xyz' %}
    M118 Homing the printer
    G28
  {% else %}
    M118 Already homed
  {% endif %}
  M117 Heating bed...
  M118 Heating bed...
  # Wait for bed to heat up
  M190 S{params.BED_TEMP|default(printer.heater_bed.target, true) }
  # Run the customizable "AFTER_HEATING_BED" macro.
  _START_PRINT_AFTER_HEATING_BED
  # Run the customizable "BED_MESH" macro
  _START_PRINT_BED_MESH
  # Start heating extruder
  M104 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  # Run the customizable "PARK" macro
  _START_PRINT_PARK
  # Wait for extruder to heat up
  M109 S{params.EXTRUDER_TEMP|default(printer.extruder.target, true) }
  {% if printer["gcode_macro RatOS"].nozzle_cleaning|lower == 'true' %}
    M118 Clean your nozzle now, 10 seconds to start
    G4 P5000
    M118 Clean your nozzle now, 5 seconds to start
    G4 P2000
    M118 Clean your nozzle now, 3 seconds to start
    G4 P1000
    M118 Clean your nozzle now, 2 seconds to start
    G4 P1000
    M118 Clean your nozzle now, 1 seconds to start
    G4 P1000
    M118 Priming the nozzle
  {% endif %}
  # Run the customizable "AFTER_HEATING_EXTRUDER" macro.
  _START_PRINT_AFTER_HEATING_EXTRUDER
  M117 Printing...
  M118 Printing...
  RESTORE_GCODE_STATE NAME=start_print_state
  # Set extrusion mode based on user configuration
  {% if printer["gcode_macro RatOS"].relative_extrusion|lower == 'true' %}
    M83
  {% else %}
    M82
  {% endif %}
  G92 E0

#####
# START PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _START_PRINT_AFTER_HEATING_BED]
gcode:
  {% if printer["gcode_macro RatOS"].preheat_extruder|lower == 'true' %}
    M117 Pre-heating extruder...
    M118 Pre-heating extruder...
    # Wait for extruder to reach 150 so an inductive probe (if present) is at a predictable temp. 
    # Also allows the bed heat to spread a little, and softens any plastic that might be stuck to the nozzle.
    M104 S150
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM=150
  {% endif %}

[gcode_macro _START_PRINT_BED_MESH]
gcode:
  {% if printer["gcode_macro RatOS"].calibrate_bed_mesh|lower == 'true' %}
    BED_MESH_CALIBRATE PROFILE=ratos
  {% endif %}
  BED_MESH_PROFILE LOAD=ratos

[gcode_macro _START_PRINT_PARK]
gcode:
  {% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
  _PARK LOCATION={printer["gcode_macro RatOS"].start_print_park_in} X={printer["gcode_macro RatOS"].start_print_park_x}
  G0 Z{z} F6000

[gcode_macro _START_PRINT_AFTER_HEATING_EXTRUDER]
gcode:
  {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeline' %}
    PRIME_LINE
  {% endif %}
  {% if printer["gcode_macro RatOS"].nozzle_priming|lower == 'primeblob' %}
    PRIME_BLOB
  {% endif %}
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SKEW_PROFILE LOAD={printer["gcode_macro RatOS"].skew_profile}
  {% endif %}

#####
# END PRINT MACROS
# Call this from your slicer (custom g-code). 
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####

# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
gcode:
  {% if printer["gcode_macro RatOS"].mqtt_alerts|lower == 'true' %}
    PUBLISH_ALERT PAYLOAD=PRINT_FINISHED
  {% endif %}
  SAVE_GCODE_STATE NAME=end_print_state
  # Extruder heater off
  M104 S0
  # Bed heater off
  M140 S0
  _END_PRINT_AFTER_HEATERS_OFF
  _END_PRINT_PARK
  # Clear skew profile if any was loaded.
  {% if printer["gcode_macro RatOS"].skew_profile is defined %}
    SET_SKEW CLEAR=1
  {% endif %}
  # Steppers off
  {% if printer["gcode_macro RatOS"].motors_off|lower == 'true' %}
    M84
  {% endif %}
  # Part cooling fan off
  M107
  M117 Done.
  M118 Done.
  RESTORE_GCODE_STATE NAME=end_print_state

#####
# END PRINT MACRO HOOKS
# You can copy these to printer.cfg and modify them to your liking, or just use them as is.
####

[gcode_macro _END_PRINT_AFTER_HEATERS_OFF]
gcode:
  # Calculate safe Z position
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 2.0) %}
      {% set z_safe = 2.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  # Relative positioning
  G91
  # Retract the filament a bit before lifting the nozzle.
  G1 E-2 F3600
  # Move to safe Z position
  G0 Z{z_safe} F3600
  # Retract filament even more
  G1 E-2 F3600

[gcode_macro _END_PRINT_PARK]
gcode:
  _PARK LOCATION={printer["gcode_macro RatOS"].end_print_park_in} X={printer["gcode_macro RatOS"].end_print_park_x}

[gcode_macro PUBLISH_ALERT]
gcode:
  {% set data = params.PAYLOAD|default(None) %}
  {action_call_remote_method("publish_mqtt_topic",
                             topic="klipper/gcode",
                             payload=data,
                             qos=0,
                             retain=False,
                             use_prefix=True)}