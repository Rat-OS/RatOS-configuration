#####
# deprecated, moved to Tx macros
#####
[gcode_macro RatOS]
variable_filament_unload_length: 130
variable_filament_unload_speed: 5
variable_filament_load_length: 100
variable_filament_load_speed: 10
variable_parking_position: [-65, 355]


#####
# TOOLHEAD CONFIGURATION
#####
[gcode_macro T0]
variable_active: True
variable_color: "7bff33"              											# Used in frontends
variable_hotend_type: "UHF"																	# SF, HF or UHF
variable_has_cht_nozzle: True																# has CHT Nozzle, True or False
variable_enable_extruder_test: True													# tests if the filament passes the extruder gears
variable_cooling_position_to_nozzle_distance: 40						# distance between the cooling position and the nozzle
variable_tooolhead_sensor_to_extruder_gear_distance: 15			# distance in mm between the filament sensor trigger and where the filament hits the extruder gears
variable_extruder_gear_to_cooling_position_distance: 30			# distance in mm between the extruder gears and the center of the heatsink cooling tube
variable_filament_loading_nozzle_offset: -10							  # offset tuning value. positive or negative number. different nozzles can lead to too much or not enough extrusion while loading the filament
variable_filament_grabbing_length: 5                        # filament grabbing length in mm
variable_filament_grabbing_speed: 1                         # filament grabbing speed in mm/s
variable_purge_after_load: 0                                # amount of extrusion in mm after the filament has loaded to the nozzle tip
variable_extrude_before_load: 0                             # amount of extrusion in mm before the filament unloads
variable_extruder_load_speed: 60                            # extruder/cooling zone loading speed
variable_filament_load_speed: 10
variable_loading_position: -35															# toolhead x loading position, used for filament loading and unloading
variable_parking_position: -55															# toolhead x parking position
gcode:
	{% set x = params.X|default(-1.0)|float %}
	{% set y = params.Y|default(-1.0)|float %}
	{% set z = params.Z|default(0.0)|float %}
	{% set s = params.S|default(1)|int %}
	_SELECT_TOOL T=0 X={x} Y={y} Z={z} TOOLSHIFT={s}


[gcode_macro T1]
variable_active: False
variable_color: "0ea5e9"              											# Used in frontends
variable_hotend_type: "UHF"																	# SF, HF or UHF
variable_has_cht_nozzle: True																# has CHT Nozzle, True or False
variable_enable_extruder_test: True													# tests if the filament passes the extruder gears
variable_cooling_position_to_nozzle_distance: 40						# distance between the cooling position and the nozzle
variable_tooolhead_sensor_to_extruder_gear_distance: 15			# distance in mm between the filament sensor trigger and where the filament hits the extruder gears
variable_extruder_gear_to_cooling_position_distance: 30			# distance in mm between the extruder gears and the center of the heatsink cooling tube
variable_filament_loading_nozzle_offset: -10							  # offset tuning value. positive or negative number. different nozzles can lead to too much or not enough extrusion while loading the filament
variable_filament_grabbing_length: 5                        # filament grabbing length in mm
variable_filament_grabbing_speed: 1                         # filament grabbing speed in mm/s
variable_purge_after_load: 0                                # amount of extrusion in mm after the filament has loaded to the nozzle tip
variable_extrude_before_load: 0                             # amount of extrusion in mm before the filament unloads
variable_extruder_load_speed: 60                            # extruder/cooling zone loading speed
variable_filament_load_speed: 10
variable_loading_position: 338															# toolhead x loading position, used for filament loading and unloading
variable_parking_position: 358															# toolhead x parking position
gcode:
	{% set x = params.X|default(-1.0)|float %}
	{% set y = params.Y|default(-1.0)|float %}
	{% set z = params.Z|default(0.0)|float %}
	{% set s = params.S|default(1)|int %}
	_SELECT_TOOL T=1 X={x} Y={y} Z={z} TOOLSHIFT={s}


#####
# LOAD FILAMENT ENTRY POINTS
#####
[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
	{% set temp = params.TEMP|default(220)|int %}
	{% if printer["dual_carriage"] is not defined %}
		_DEFAULT_LOAD_FILAMENT TEMP={temp}
	{% else %}
		{% if not printer.pause_resume.is_paused %}
			{% set toolhead = params.TOOLHEAD|default(-1)|int %}
		{% else %}
			{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
			{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
				{action_raise_error("Loading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
			{% else %}
				{% set paused_idex_mode = printer["gcode_macro PAUSE"].idex_mode|lower %}
				{% if paused_idex_mode == 'copy' or paused_idex_mode == 'mirror' %}
					{% set toolhead = params.TOOLHEAD|default(-1)|int %}
				{% else %}
					{% set toolhead = printer["gcode_macro PAUSE"].idex_toolhead|int %}
				{% endif %}
			{% endif %}
		{% endif %}
		{% if toolhead==0 or toolhead==1 %}
			_IDEX_LOAD_FILAMENT TEMP={temp} TOOLHEAD={toolhead}
		{% else %}
			RATOS_ECHO MSG="Please select toolhead! 0 = left, 1 = right toolhead"
		{% endif %}
	{% endif %}


[gcode_macro _DEFAULT_LOAD_FILAMENT]
description: Load filament macro for non IDEX printers.
gcode:
	# parameter
	{% set temp = params.TEMP|int %}

	# save gcode state
	SAVE_GCODE_STATE NAME=load_state

	# heating extruder
	RATOS_ECHO MSG="Heating extruder... Please wait!"
	M104 S{temp}				# set hotend temperature
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp}

	# load filament
	_LOAD_FILAMENT TOOLHEAD=0

	# restore gcode state
	RESTORE_GCODE_STATE NAME=load_state


[gcode_macro _IDEX_LOAD_FILAMENT]
description: Load filament macro for IDEX printer.
gcode:
	# parameter
	{% set temp = params.TEMP|int %}
	{% set toolhead = params.TOOLHEAD|int %}

	# cache current extruder
	{% set old_extruder = printer.toolhead.extruder %}

	DEBUG_ECHO PREFIX="_IDEX_LOAD_FILAMENT" MSG="TEMP: {temp}, TOOLHEAD: {toolhead}, OLD_EXTRUDER: {old_extruder}, "

	# activate selected extruder
	ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if toolhead==0 else toolhead}

	# heating extruder
	{% if not printer.pause_resume.is_paused %}
		RATOS_ECHO MSG="Heating Extruder T{toolhead}... Please wait!"
		M104 S{temp} T{toolhead}
		TEMPERATURE_WAIT SENSOR=extruder{'' if toolhead==0 else toolhead} MINIMUM={temp}
	{% endif %}

	# load filament
	_LOAD_FILAMENT TOOLHEAD={toolhead} TEMP={temp}

	# reactivate original extruder
	ACTIVATE_EXTRUDER EXTRUDER={old_extruder}


#####
# LOAD FILAMENT MACROS
#####
[gcode_macro _LOAD_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# load filament
	_BEFORE_LOAD_FILAMENT TOOLHEAD={toolhead}
	_LOAD_FILAMENT_FROM_FEEDER_TO_EXTRUDER TOOLHEAD={toolhead}
	_LOAD_FILAMENT_FROM_EXTRUDER_TO_COOLING_ZONE TOOLHEAD={toolhead}
	_LOAD_FILAMENT_FROM_COOLING_ZONE_TO_NOZZLE TOOLHEAD={toolhead}
	_AFTER_LOAD_FILAMENT TOOLHEAD={toolhead}

	# reset extrusion distance
	G92 E0


[gcode_macro _LOAD_FILAMENT_FROM_FEEDER_TO_EXTRUDER]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set tooolhead_sensor_to_extruder_gear_distance = printer["gcode_macro T%s" % toolhead].tooolhead_sensor_to_extruder_gear_distance|float %}
	{% set filament_grabbing_speed = printer["gcode_macro T%s" % toolhead].filament_grabbing_speed|float * 60 %}
	{% set has_toolhead_filament_sensor = printer["filament_switch_sensor toolhead_filament_sensor_t%s" % toolhead] is defined %}
	{% set has_filament_feeder = false %}

	# load filament from feeder to the extruder gears
	{% if has_filament_feeder and has_toolhead_filament_sensor %}
		RATOS_ECHO MSG="Loading filament from feeder to extruder.."
		_BEFORE_LOAD_FILAMENT_FROM_FEEDER_TO_EXTRUDER TOOLHEAD={toolhead}

		# feeder stepper homing move with the toolhead filament sensor as a endstop

		# move the filament from the toolhead sensor to the extruder gears
		FORCE_MOVE STEPPER={'extruder%s' % ('' if toolhead == 0 else toolhead)} DISTANCE={tooolhead_sensor_to_extruder_gear_distance} VELOCITY={filament_grabbing_speed}	

		_AFTER_LOAD_FILAMENT_FROM_FEEDER_TO_EXTRUDER TOOLHEAD={toolhead}
		RATOS_ECHO MSG="Filament loaded from feeder to extruder."
	{% endif %}


[gcode_macro _LOAD_FILAMENT_FROM_EXTRUDER_TO_COOLING_ZONE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set has_filament_feeder = false %}
	{% set extruder_load_speed = printer["gcode_macro T%s" % toolhead].extruder_load_speed|float * 60 %}
	{% set enable_extruder_test = true if printer["gcode_macro T%s" % toolhead].enable_extruder_test|default(false)|lower == 'true' else false %}
	{% set has_toolhead_filament_sensor = true if printer["filament_switch_sensor toolhead_filament_sensor_t%s" % toolhead] is defined else false %}
	{% set filament_grabbing_length = printer["gcode_macro T%s" % toolhead].filament_grabbing_length|float %}
	{% set extruder_gear_to_cooling_position_distance = printer["gcode_macro T%s" % toolhead].extruder_gear_to_cooling_position_distance|float %}
	{% set tooolhead_sensor_to_extruder_gear_distance = printer["gcode_macro T%s" % toolhead].tooolhead_sensor_to_extruder_gear_distance|float %}
	{% if not has_filament_feeder %}
		{% set tooolhead_sensor_to_extruder_gear_distance = 0 %}
	{% endif %}

	# load filament into hotend
	RATOS_ECHO MSG="Loading filament into hotend.."
	{% if not has_toolhead_filament_sensor or not enable_extruder_test or not has_filament_feeder %}

		# move filament to cooling position. The center of the heatsink cooling tube
		G92 E0
		G0 E{extruder_gear_to_cooling_position_distance - filament_grabbing_length} F{extruder_load_speed}
		M400

	{% else %}
		{% set push_and_pull_offset = 10 %}

		# move filament to cooling position. The center of the heatsink cooling tube
		G92 E0
		G0 E{tooolhead_sensor_to_extruder_gear_distance + extruder_gear_to_cooling_position_distance - filament_grabbing_length} F{extruder_load_speed}
		M400

		# extruder push and pull test
		G92 E0
		G0 E-{(tooolhead_sensor_to_extruder_gear_distance + extruder_gear_to_cooling_position_distance - push_and_pull_offset - filament_grabbing_length)} F{extruder_load_speed}
		M400

		# move filament back to cooling position
		{% if printer["filament_switch_sensor toolhead_filament_sensor_t%s" % toolhead].filament_detected %}
			G92 E0
			G0 E{(tooolhead_sensor_to_extruder_gear_distance + extruder_gear_to_cooling_position_distance - push_and_pull_offset - filament_grabbing_length)} F{extruder_load_speed}
			M400
		{% else %}
			G92 E0
			_ON_EXTRUDER_LOADING_ERROR TOOLHEAD={toolhead}
		{% endif %}

	{% endif %}
	RATOS_ECHO MSG="Filament loaded into hotend."


[gcode_macro _LOAD_FILAMENT_FROM_COOLING_ZONE_TO_NOZZLE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set load_speed = printer["gcode_macro T%s" % toolhead].filament_load_speed|float * 60 %}
	{% set filament_loading_nozzle_offset = printer["gcode_macro T%s" % toolhead].filament_loading_nozzle_offset|float %}
	{% set cooling_position_to_nozzle_distance = printer["gcode_macro T%s" % toolhead].cooling_position_to_nozzle_distance|float %}

	# load filament into the hotend
	RATOS_ECHO MSG="Loading filament into nozzle... Please wait!"
	G92 E0					# Reset extrusion distance
	# Load the filament into the hotend area
	G0 E{cooling_position_to_nozzle_distance + filament_loading_nozzle_offset} F{load_speed}
	G4 P1000				# Wait a second
	_PURGE_FILAMENT	TOOLHEAD={toolhead}
	RATOS_ECHO MSG="Filament loaded into nozzle!"


[gcode_macro _PURGE_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set purge_after_load = printer["gcode_macro T%s" % toolhead].purge_after_load|float %}

	# purge filament
	_BEFORE_PURGE TOOLHEAD={toolhead}
	G92 E0																								# Reset extrusion distance
	G0 E{purge_after_load} F100														# Purge
	_AFTER_PURGE TOOLHEAD={toolhead}
	M400																									# Wait for purge to complete


#####
# LOAD FILAMENT HOOKS
#####
[gcode_macro _BEFORE_LOAD_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	{% if printer['neopixel noozle_led_t%s' % toolhead] is defined %}
		SET_LED LED={'noozle_led_t%s' % toolhead} RED=0.0 GREEN=0.0 BLUE=1.0
	{% endif %}


[gcode_macro _AFTER_LOAD_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	{% if printer['neopixel noozle_led_t%s' % toolhead] is defined %}
		SET_LED LED={'noozle_led_t%s' % toolhead} RED=1.0 GREEN=1.0 BLUE=1.0
	{% endif %}


[gcode_macro _BEFORE_PURGE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	{% if printer["dual_carriage"] is defined %}
		{% if "xyz" in printer.toolhead.homed_axes %}

			# config
			{% set loading_position = printer["gcode_macro T%s" % toolhead].loading_position|float %}
			{% set macro_travel_speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

			# move to loading position outside the oozegaurd
			G1 X{loading_position} F{macro_travel_speed}

			# wait for moves to finish
			M400

		{% endif %}
	{% endif %}


[gcode_macro _AFTER_PURGE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	{% if printer["dual_carriage"] is defined %}
		{% if "xyz" in printer.toolhead.homed_axes %}

			# config
			{% set loading_position = printer["gcode_macro T%s" % toolhead].loading_position|float %}
			{% set parking_position = printer["gcode_macro T%s" % toolhead].parking_position|float %}
			{% set macro_travel_speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

			# nozzle cleaning 
			G1 X{parking_position} F{macro_travel_speed}
			G1 X{loading_position} F{macro_travel_speed}
			G1 X{parking_position} F{macro_travel_speed}
			G1 X{loading_position} F{macro_travel_speed}

			# move to parking position on the oozeguard
			G1 X{parking_position} F{macro_travel_speed}

			# wait for moves to finish
			M400

		{% endif %}
	{% endif %}


[gcode_macro _BEFORE_LOAD_FILAMENT_FROM_FEEDER_TO_EXTRUDER]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# engage feeder

	# visual feedback
	{% if printer['neopixel noozle_led_t%s' % toolhead] is defined %}
		SET_LED LED={'noozle_led_t%s' % toolhead} RED=1.0 GREEN=0.0 BLUE=0.0
	{% endif %}


[gcode_macro _AFTER_LOAD_FILAMENT_FROM_FEEDER_TO_EXTRUDER]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# release feeder

	# visual feedback
	{% if printer['neopixel noozle_led_t%s' % toolhead] is defined %}
		SET_LED LED={'noozle_led_t%s' % toolhead} RED=1.0 GREEN=0.0 BLUE=0.0
	{% endif %}


#####
# LOAD FILAMENT EVENTS
#####
[gcode_macro _ON_TOOLHEAD_FILAMENT_SENSOR_INSERT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set filament_grabbing_length = printer["gcode_macro T%s" % toolhead].filament_grabbing_length|float %}
	{% set filament_grabbing_speed = printer["gcode_macro T%s" % toolhead].filament_grabbing_speed|float %}

	{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
	DEBUG_ECHO PREFIX="LOAD_FILAMENT" MSG="CURRENT_IDEX_MODE: {current_idex_mode}"
	{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
		{action_raise_error("Loading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
	{% else %}
		# grab the filament with the extruder gears
		FORCE_MOVE STEPPER={'extruder%s' % ('' if toolhead == 0 else toolhead)} DISTANCE={filament_grabbing_length} VELOCITY={filament_grabbing_speed}	
		M400					# wait for move to finish

		# load filament if printer is not printing or paused
		{% if printer.virtual_sdcard.is_active %}
			{% if printer.pause_resume.is_paused %}
				LOAD_FILAMENT TOOLHEAD={toolhead}
				RESUME
			{% endif %}
		{% else %}
			LOAD_FILAMENT TOOLHEAD={toolhead}
		{% endif %}
	{% endif %}


[gcode_macro _ON_FEEDER_FILAMENT_SENSOR_INSERT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}


[gcode_macro _ON_EXTRUDER_LOADING_ERROR]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# visual feedback
	{% if printer['neopixel noozle_led_t%s' % toolhead] is defined %}
		SET_LED LED={'noozle_led_t%s' % toolhead} RED=1.0 GREEN=0.0 BLUE=0.0
	{% endif %}

	# raise error
	{action_raise_error("Could not load filament into the Extruder!")}
