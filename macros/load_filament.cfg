# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

#####
# LOAD FILAMENT ENTRY POINTS
#####
[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
	{% set temp = params.TEMP|default(220)|int %}
	{% if printer["dual_carriage"] is not defined %}
		_DEFAULT_LOAD_FILAMENT TEMP={temp}
	{% else %}
		{% if not printer.pause_resume.is_paused %}
			{% set toolhead = params.TOOLHEAD|default(-1)|int %}
		{% else %}
			{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
			{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
				{action_raise_error("Loading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
			{% else %}
				{% set paused_idex_mode = printer["gcode_macro PAUSE"].idex_mode|lower %}
				{% if paused_idex_mode == 'copy' or paused_idex_mode == 'mirror' %}
					{% set toolhead = params.TOOLHEAD|default(-1)|int %}
				{% else %}
					{% set toolhead = printer["gcode_macro PAUSE"].idex_toolhead|int %}
				{% endif %}
			{% endif %}
		{% endif %}
		{% if toolhead==0 or toolhead==1 %}
			_IDEX_LOAD_FILAMENT TEMP={temp} TOOLHEAD={toolhead}
		{% else %}
			RATOS_ECHO MSG="Please select toolhead! 0 = left, 1 = right toolhead"
		{% endif %}
	{% endif %}


[gcode_macro _DEFAULT_LOAD_FILAMENT]
description: Load filament macro for non IDEX printers.
gcode:
	# parameter
	{% set temp = params.TEMP|int %}

	DEBUG_ECHO PREFIX="_DEFAULT_LOAD_FILAMENT" MSG="toolhead={toolhead}"

	# visual feedback
	_LED_LOADING_FILAMENT TOOLHEAD=0

	# save gcode state
	SAVE_GCODE_STATE NAME=load_state

	# heating extruder
	{% if printer.extruder.temperature|int < temp or printer.extruder.can_extrude|lower == 'false' %}
		# heating extruder
		RATOS_ECHO MSG="Heating extruder to {temp}C... Please wait."
		M104 S{temp}				
	{% endif %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp}

	# load filament
	_LOAD_FILAMENT TOOLHEAD=0

	# restore gcode state
	RESTORE_GCODE_STATE NAME=load_state

	# visual feedback
	_LED_FILAMENT_LOADED TOOLHEAD=0


[gcode_macro _IDEX_LOAD_FILAMENT]
description: Load filament macro for IDEX printer.
gcode:
	# parameter
	{% set temp = params.TEMP|int %}
	{% set toolhead = params.TOOLHEAD|int %}

	# cache current extruder
	{% set old_extruder = printer.toolhead.extruder %}

	DEBUG_ECHO PREFIX="_IDEX_LOAD_FILAMENT" MSG="temp: {temp}, toolhead: {toolhead}, old_extruder: {old_extruder}"

	# visual feedback
	_LED_LOADING_FILAMENT TOOLHEAD={toolhead}

	# get target extruder
	{% set target_extruder = 'extruder%s' % ('' if toolhead == 0 else toolhead) %}

	# activate selected extruder
	ACTIVATE_EXTRUDER EXTRUDER={target_extruder}

	# heating extruder
	{% if not printer.pause_resume.is_paused %}
		{% if printer[target_extruder].temperature|int < temp or printer[target_extruder].can_extrude|lower == 'false' %}
			# heating extruder
			RATOS_ECHO MSG="Heating T{toolhead} to {temp}C... Please wait."
			M104 S{temp} T{toolhead}
		{% endif %}
		TEMPERATURE_WAIT SENSOR={target_extruder} MINIMUM={temp}
	{% endif %}

	# load filament
	_LOAD_FILAMENT TOOLHEAD={toolhead} TEMP={temp}

	# reactivate original extruder
	{% if printer.pause_resume.is_paused %}
		ACTIVATE_EXTRUDER EXTRUDER={old_extruder}
	{% endif %}

	# visual feedback
	_LED_FILAMENT_LOADED TOOLHEAD={toolhead}


#####
# LOAD FILAMENT MACROS
#####
[gcode_macro _LOAD_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	DEBUG_ECHO PREFIX="_LOAD_FILAMENT" MSG="toolhead={toolhead}"

	# load filament
	_MOVE_TO_LOADING_POSITION TOOLHEAD={toolhead}
	_LOAD_FILAMENT_FROM_EXTRUDER_TO_COOLING_ZONE TOOLHEAD={toolhead}
	_LOAD_FILAMENT_FROM_COOLING_ZONE_TO_NOZZLE TOOLHEAD={toolhead}
	_CLEANING_MOVE TOOLHEAD={toolhead}


[gcode_macro _LOAD_FILAMENT_FROM_EXTRUDER_TO_COOLING_ZONE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set extruder_load_speed = printer["gcode_macro T%s" % toolhead].extruder_load_speed|float * 60 %}
	{% set extruder_gear_to_cooling_position_distance = printer["gcode_macro T%s" % toolhead].extruder_gear_to_cooling_position_distance|float %}

	DEBUG_ECHO PREFIX="_LOAD_FILAMENT_FROM_EXTRUDER_TO_COOLING_ZONE" MSG="toolhead={toolhead}, extruder_load_speed={extruder_load_speed}, extruder_gear_to_cooling_position_distance={extruder_gear_to_cooling_position_distance}"

	# move filament to cooling position. The center of the heatsink cooling tube
	RATOS_ECHO MSG="Loading filament into hotend.."
	G92 E0      # Reset extrusion distance
	G0 E{extruder_gear_to_cooling_position_distance} F{extruder_load_speed}
	G92 E0      # Reset extrusion distance
	M400        # wait for moves to finsih
	RATOS_ECHO MSG="Filament loaded into hotend."


[gcode_macro _LOAD_FILAMENT_FROM_COOLING_ZONE_TO_NOZZLE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set load_speed = printer["gcode_macro T%s" % toolhead].filament_load_speed|float * 60 %}
	{% set filament_loading_nozzle_offset = printer["gcode_macro T%s" % toolhead].filament_loading_nozzle_offset|float %}
	{% set cooling_position_to_nozzle_distance = printer["gcode_macro T%s" % toolhead].cooling_position_to_nozzle_distance|float %}
	{% set purge_after_load = printer["gcode_macro T%s" % toolhead].purge_after_load|float %}

	DEBUG_ECHO PREFIX="_LOAD_FILAMENT_FROM_COOLING_ZONE_TO_NOZZLE" MSG="toolhead={toolhead}, load_speed={load_speed}, filament_loading_nozzle_offset={filament_loading_nozzle_offset}, cooling_position_to_nozzle_distance={cooling_position_to_nozzle_distance}"

	# load filament into the hotend
	RATOS_ECHO MSG="Loading filament into nozzle... Please wait!"
	G92 E0                  # Reset extrusion distance
	# Load the filament into the hotend area
	G0 E{cooling_position_to_nozzle_distance + filament_loading_nozzle_offset} F{load_speed}
	G92 E0                  # Reset extrusion distance
	G4 P1000                # Wait a second
	_PURGE_FILAMENT	TOOLHEAD={toolhead} E={purge_after_load}
	RATOS_ECHO MSG="Filament loaded into nozzle!"


#####
# LOAD FILAMENT EVENTS
#####
[gcode_macro _ON_TOOLHEAD_FILAMENT_SENSOR_INSERT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set filament_grabbing_length = printer["gcode_macro T%s" % toolhead].filament_grabbing_length|float %}
	{% set filament_grabbing_speed = printer["gcode_macro T%s" % toolhead].filament_grabbing_speed|float %}
	{% set resume_after_insert = true if printer["gcode_macro T%s" % toolhead].resume_after_insert|default(true)|lower == 'true' else false %}

	# IDEX mode
	{% set current_idex_mode = '' %}
	{% if printer["dual_carriage"] is defined %}
		{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% endif %}

	DEBUG_ECHO PREFIX="_ON_TOOLHEAD_FILAMENT_SENSOR_INSERT" MSG="toolhead={toolhead}, filament_grabbing_length={filament_grabbing_length}, filament_grabbing_speed={filament_grabbing_speed}, current_idex_mode={current_idex_mode}"

	{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
		{action_raise_error("Loading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
	{% else %}
		# grab the filament with the extruder gears
		FORCE_MOVE STEPPER={'extruder%s' % ('' if toolhead == 0 else toolhead)} DISTANCE={filament_grabbing_length} VELOCITY={filament_grabbing_speed}	
		M400       # wait for move to finish

		# load filament if printer is not printing or paused
		{% if printer.pause_resume.is_paused %}
			LOAD_FILAMENT TOOLHEAD={toolhead}
			{% if resume_after_insert %}
				RESUME
			{% endif %}
		{% else %}
			{% if not printer.virtual_sdcard.is_active %}
				LOAD_FILAMENT TOOLHEAD={toolhead}
			{% endif %}
		{% endif %}
	{% endif %}


[gcode_macro _ON_FEEDER_FILAMENT_SENSOR_INSERT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	DEBUG_ECHO PREFIX="_ON_FEEDER_FILAMENT_SENSOR_INSERT" MSG="toolhead={toolhead}"


#####
# REUSABLES
#####
[gcode_macro _PURGE_BEFORE_UNLOAD]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set purge_before_unload = printer["gcode_macro T%s" % toolhead].purge_before_unload|float %}

	DEBUG_ECHO PREFIX="_PURGE_BEFORE_UNLOAD" MSG="toolhead={toolhead} purge_before_unload={purge_before_unload}"

	# purge filament
	{% if purge_before_unload > 0 %}
		G92 E0                            # Reset extrusion distance
		G0 E{purge_before_unload} F300    # Extrude filament
		G92 E0                            # Reset extrusion distance
		M400                              # Wait for extrusion to complete
	{% endif %}


[gcode_macro _PURGE_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set e = params.E|int %}

	DEBUG_ECHO PREFIX="_PURGE_FILAMENT" MSG="toolhead={toolhead}, e={e}"

	# purge filament
	{% if e > 0 %}
		G92 E0                                 # Reset extrusion distance
		G0 E{(e / 2)} F150                     # Purge
		{% if printer["dual_carriage"] is defined %}
			SET_FAN_SPEED FAN=part_fan_t0 SPEED={0.4 if toolhead == 0 else 0}
			SET_FAN_SPEED FAN=part_fan_t1 SPEED={0.4 if toolhead == 1 else 0}
		{% else %}
			M106 S{(255 * 0.4)}
		{% endif %}
		G92 E0                                 # Reset extrusion distance
		G0 E{(e / 2)} F150                     # Purge
		{% if printer["dual_carriage"] is defined %}
			SET_FAN_SPEED FAN=part_fan_t0 SPEED=0
			SET_FAN_SPEED FAN=part_fan_t1 SPEED=0
		{% else %}
			M106 S0
		{% endif %}
		G92 E0                                 # Reset extrusion distance
		M400                                   # Wait for purge to complete
	{% endif %}

[gcode_macro _MOVE_TO_PARKING_POSITION]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	DEBUG_ECHO PREFIX="_MOVE_TO_PARKING_POSITION" MSG="TOOLHEAD={toolhead}"

	{% if printer["dual_carriage"] is defined %}
		{% if "xyz" in printer.toolhead.homed_axes %}

			# config
			{% set parking_position = printer["gcode_macro T%s" % toolhead].parking_position|float %}
			{% set macro_travel_speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

			# move to parking position
			G1 X{parking_position} F{macro_travel_speed}

			# wait for moves to finish
			M400

		{% endif %}
	{% endif %}


[gcode_macro _MOVE_TO_LOADING_POSITION]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	DEBUG_ECHO PREFIX="_MOVE_TO_LOADING_POSITION" MSG="TOOLHEAD={toolhead}"

	{% if printer["dual_carriage"] is defined %}
		{% if "xyz" in printer.toolhead.homed_axes %}

			# config
			{% set loading_position = printer["gcode_macro T%s" % toolhead].loading_position|float %}
			{% set macro_travel_speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

			# move to loading position outside the oozegaurd
			G1 X{loading_position} F{macro_travel_speed}

			# wait for moves to finish
			M400

		{% endif %}
	{% endif %}


[gcode_macro _CLEANING_MOVE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	{% if printer["dual_carriage"] is defined %}
		{% if "xyz" in printer.toolhead.homed_axes %}

			# config
			{% set loading_position = printer["gcode_macro T%s" % toolhead].loading_position|float %}
			{% set parking_position = printer["gcode_macro T%s" % toolhead].parking_position|float %}
			{% set macro_travel_speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

			# nozzle cleaning 
			G1 X{parking_position} F{macro_travel_speed}
			G1 X{loading_position} F{macro_travel_speed}
			G1 X{parking_position} F{macro_travel_speed}
			G1 X{loading_position} F{macro_travel_speed}
			G1 X{parking_position} F{macro_travel_speed}

			# wait for moves to finish
			M400

		{% endif %}
	{% endif %}


