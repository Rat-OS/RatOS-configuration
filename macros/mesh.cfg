[gcode_macro _START_PRINT_BED_MESH]
gcode:
	CACHE_TOOLHEAD_SETTINGS
	SET_MACRO_TRAVEL_SETTINGS
	{% set default_profile = printer["gcode_macro RatOS"].bed_mesh_profile|default('ratos') %}
	{% if printer["gcode_macro RatOS"].calibrate_bed_mesh|lower == 'true' %}
		BED_MESH_CLEAR
		{% if printer["gcode_macro RatOS"].adaptive_mesh|lower == 'true' %}
			CALIBRATE_ADAPTIVE_MESH PROFILE={default_profile} X0={params.X0} X1={params.X1} Y0={params.Y0} Y1={params.Y1}
		{% else %}
			BED_MESH_CALIBRATE PROFILE={default_profile}
		{% endif %}
		BED_MESH_PROFILE LOAD={default_profile}
	{% elif printer["gcode_macro RatOS"].bed_mesh_profile is defined %}
		BED_MESH_CLEAR
		BED_MESH_PROFILE LOAD={printer["gcode_macro RatOS"].bed_mesh_profile}
	{% endif %}
	RESTORE_TOOLHEAD_SETTINGS

[gcode_macro CALIBRATE_ADAPTIVE_MESH]
gcode:
	# get default mesh profile
	{% set default_profile = params.PROFILE %}

	# coordinates from the slicer start gcode
	{% set x0 = params.X0|default(-1)|float %}
	{% set y0 = params.Y0|default(-1)|float %}
	{% set x1 = params.X1|default(-1)|float %}
	{% set y1 = params.Y1|default(-1)|float %}
	RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Recieved coordinates X0={x0} Y0={y0} X1={x1} Y1={y1}"

	{% if x0 >= x1 or y0 >= y1 %}
		# coordinates are invalid, fall back to full bed mesh
		RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Invalid coordinates received. Please check your slicer settings. Falling back to full bed mesh."
		BED_MESH_CALIBRATE PROFILE={default_profile} 
	{% else %}
		# get bed mesh config object
		{% set mesh_config = printer.configfile.config.bed_mesh %}

		# get configured bed mesh area
		{% set min_x = mesh_config.mesh_min.split(",")[0]|float %}
		{% set min_y = mesh_config.mesh_min.split(",")[1]|float %}
		{% set max_x = mesh_config.mesh_max.split(",")[0]|float %}
		{% set max_y = mesh_config.mesh_max.split(",")[1]|float %}

		# make sure mesh coordinates lie within the configured mesh area
		{% set mesh_x0 = [[x0, max_x]|min, min_x]|max %}
		{% set mesh_y0 = [[y0, max_y]|min, min_y]|max %}
		{% set mesh_x1 = [[x1, max_x]|min, min_x]|max %}
		{% set mesh_y1 = [[y1, max_y]|min, min_y]|max %}

		{% if mesh_x0 == min_x and mesh_y0 == min_y and mesh_x1 == max_x and mesh_y1 == max_y %}
			# coordinates are invalid, fall back to full bed mesh
			RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: Print is using the full bed, falling back to full bed mesh."
			BED_MESH_CALIBRATE PROFILE={default_profile}
		{% else %}
			{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
				DEPLOY_PROBE
			{% endif %}
			# get configured probe count
			{% set probe_count_x = mesh_config.probe_count.split(",")[0]|int %}
			{% if mesh_config.probe_count.split(",")|length == 2 %}
					{% set probe_count_y = mesh_config.probe_count.split(",")[1]|int %}
			{% else %}
					{% set probe_count_y = mesh_config.probe_count.split(",")[0]|int %}
			{% endif %}

			# calculate mesh point resolution
			{% set probe_x_step = (max_x - min_x) / probe_count_x %}
			{% set probe_y_step = (max_y - min_y) / probe_count_y %}

			# calculate xy probe count
			{% set mesh_count_x = ([(mesh_x1 - mesh_x0) / probe_x_step, 3]|max)|int %}
			{% set mesh_count_y = ([(mesh_y1 - mesh_y0) / probe_y_step, 3]|max)|int %}
			{% set min_mesh_count = [mesh_count_x, mesh_count_y]|min %}
			{% set max_mesh_count = [mesh_count_x, mesh_count_y]|max %}

			# check algorithms
			{% set algorithm = mesh_config.algorithm %}
			{% if algorithm|lower == 'lagrange' and max_mesh_count > 6 %}
				RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: cannot exceed a probe_count of 6 when using lagrange interpolation. Falling back to bicubic interpolation."
				{% set algorithm = 'bicubic' %}
			{% endif %}
			{% if algorithm|lower == 'bicubic' and min_mesh_count < 4 %}
				{% if max_mesh_count > 6 %}
					RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: invalid probe_count option when using bicubic interpolation. Combination of 3 points on one axis with more than 6 on another is not permitted. Forcing minimum mesh count to be 4."
					{% set min_mesh_count = 4 %}
				{% else %}
					RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: bicubic interpolation with a probe_count of less than 4 points detected. Forcing lagrange interpolation."
					{% set algorithm = 'lagrange' %}
				{% endif %}
			{% endif %}

			{% set mesh_count_x = ([min_mesh_count, mesh_count_x]|max)|int %}
			{% set mesh_count_x = ([max_mesh_count, mesh_count_x]|min)|int %}
			{% set mesh_count_y = ([min_mesh_count, mesh_count_y]|max)|int %}
			{% set mesh_count_y = ([max_mesh_count, mesh_count_y]|min)|int %}

			{% set should_prime = printer["gcode_macro RatOS"].nozzle_priming == 'primeline' or printer["gcode_macro RatOS"].nozzle_priming == 'primeblob' %}
			{% set probe_first = printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == "min" or printer["gcode_macro RatOS"].nozzle_prime_start_y|float(printer["gcode_macro RatOS"].printable_y_max) < printer["gcode_macro RatOS"].printable_y_max / 2 %}

			{% if printer.configfile.settings.beacon is defined and printer.configfile.settings.beacon.mesh_runs % 2 != 0 and probe_first %}
				{% set probe_first = false %}
			{% elif printer.configfile.settings.beacon is defined and printer.configfile.settings.beacon.mesh_runs % 2 == 0 and not probe_first %}
				{% set probe_first = true %}
			{% endif %}
			{% if should_prime and probe_first %}
				PROBE_FOR_PRIMING
			{% endif %}
			# mesh
			RESPOND MSG="CALIBRATE_ADAPTIVE_MESH: mesh coordinates X0={mesh_x0} Y0={mesh_y0} X1={mesh_x1} Y1={mesh_y1}"
			BED_MESH_CALIBRATE PROFILE={default_profile} algorithm={algorithm} mesh_min={mesh_x0},{mesh_y0} mesh_max={mesh_x1},{mesh_y1} probe_count={mesh_count_x},{mesh_count_y} relative_reference_index=-1
			
			{% if should_prime and not probe_first %}
				PROBE_FOR_PRIMING
			{% endif %}
			{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
				STOW_PROBE
			{% endif %}
			
		{% endif %}
	{% endif %}
