[gcode_macro M84]
rename_existing: M84.1
gcode:
	{% if printer["dual_carriage"] is defined %}
		# IDEX 
		# reset applied toolhead offset index
		_SET_OFFSET T={printer["gcode_macro RatOS"].default_toolhead|int} MOVE=0
		# reset offsets
		# this is a temporarily safety measurement and very anoying
		# to ensure we start the next print with known offsets 
		# the anoying part is that when you do live first layer z-offset baby steps, 
		# the value is gone after a M84 and you cant save it 
		# and probably some other side effects as well 
		SET_GCODE_OFFSET X=0 Y=0 Z=0 MOVE=0
	{% endif %}
	M84.1

[gcode_macro SET_PRESSURE_ADVANCE]
rename_existing: SET_PRESSURE_ADVANCE_BASE
gcode:
	{% set extruder = params.EXTRUDER|default('extruder')|lower %}  
	{% set advance = params.ADVANCE|default(printer[extruder].pressure_advance|float)|float %}  
	{% set smooth_time = params.SMOOTH_TIME|default(printer[extruder].smooth_time|float)|float %}  
	{% if printer[extruder] is defined %}
		{% if printer["dual_carriage"] is not defined %}
			# COREXY - HYBRID
			SET_PRESSURE_ADVANCE_BASE EXTRUDER={extruder} ADVANCE={advance} SMOOTH_TIME={smooth_time}
		{% else %}
			# IDEX
			{% set idex_mode = printer["dual_carriage"].carriage_1|default('')|lower %}
			{% if idex_mode == 'copy' or idex_mode == 'mirror' %}
				RESPOND MSG="SET_PRESSURE_ADVANCE T0"
				SET_PRESSURE_ADVANCE_BASE EXTRUDER='extruder' ADVANCE={advance} SMOOTH_TIME={smooth_time}
				RESPOND MSG="SET_PRESSURE_ADVANCE T1"
				SET_PRESSURE_ADVANCE_BASE EXTRUDER='extruder1' ADVANCE={advance} SMOOTH_TIME={smooth_time}
			{% else %}
				SET_PRESSURE_ADVANCE_BASE EXTRUDER={extruder} ADVANCE={advance} SMOOTH_TIME={smooth_time}
			{% endif %}
		{% endif %}
	{% else %}
	RESPOND MSG="SET_PRESSURE_ADVANCE: Extruder {extruder} not found!"
	{% endif %}

[gcode_macro M106]
# Only rename_existing if you have a sacrificial [fan] section
rename_existing: M106.1
# The variable that controls fan speed swopping if not specifying P parameter
# -1 means the control is disabled, a value of 0-1 is the requested fan speed.
# Access via {printer["gcode_macro M106"].swap_speed}
variable_swap_speed: -1
gcode:
	# parameters
	{% set s = [[params.S|default(255)|int, 255]|min, 0]|max %}
	{% set p = params.P|default(-1)|int %}
	{% set speed = s / 255 %}

	# get IDEX mode
	{% set idex_mode = printer["dual_carriage"].carriage_1|default('')|lower %}
	{% set t = 1 if idex_mode=='primary' else 0 %}
	{% set sync_fans = printer["gcode_macro RatOS"].toolchange_sync_fans|default(0)|int %}
	{% if idex_mode == "copy" or idex_mode == "mirror" %}
		{% set sync_fans = 1 %}
	{% endif %}

	# Set speed to -1 by default
	SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE=-1

	# Set speed
	{% if p == -1 %}
		# Set current active extruder fan
		{% if speed == 0 %}
			# Always turn off all fans if S0 is specified without a specific fan
			SET_FAN_SPEED FAN=part_fan_t0 SPEED={speed}
			SET_FAN_SPEED FAN=part_fan_t1 SPEED={speed}
		{% else %}
			# Opt into fan speed swop control
			SET_GCODE_VARIABLE MACRO=M106 VARIABLE=swap_speed VALUE={speed}
			SET_FAN_SPEED FAN=part_fan_t0 SPEED={(speed if (t == 0 or sync_fans == 1) else 0)}
			SET_FAN_SPEED FAN=part_fan_t1 SPEED={(speed if (t == 1 or sync_fans == 1) else 0)}
		{% endif %}
	{% else %}
		# Set specified active extruder fan
		SET_FAN_SPEED FAN=part_fan_t0 SPEED={speed if t == p else 0}
		SET_FAN_SPEED FAN=part_fan_t1 SPEED={speed if t == p else 0}
	{% endif %}

	# Update core Klipper's fan speed
	# Only do this if you have a sacrificial [fan] section
	M106.1 S{s}

[gcode_macro M107]
rename_existing: M107.1
gcode:
	{% set p = params.P|default(-1)|int %}
	M106 S0 P{p}
