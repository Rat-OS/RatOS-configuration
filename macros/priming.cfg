# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

#####
# CONFIGURATION VARIABLES
#####

[gcode_macro RatOS]
variable_nozzle_priming: "primeblob"             # primeblob|false = To prime, or not to prime, that is the question.
variable_nozzle_prime_start_x: "max"             # min|max|float = non IDEX priming x-location
variable_nozzle_prime_start_y: "min"             # min|max|float = non IDEX priming y-location
variable_nozzle_prime_direction: "auto"          # auto|forwards|backwards = non IDEX priming y-direction
variable_nozzle_prime_bridge_fan: 102            # int = priming fan speed 0-255
variable_probe_for_priming_result: None          # internal use only. Do not touch!
variable_probe_for_priming_end_result: None      # internal use only. Do not touch!
variable_probe_for_priming_result_t1: None       # internal use only. Do not touch!
variable_probe_for_priming_end_result_t1: None   # internal use only. Do not touch!
variable_adaptive_prime_offset_threshold: -1.0   # float = threshold value used for probing sanity checks
variable_last_z_offset: None                     # internal use only. Do not touch!


[gcode_macro SAVE_PROBE_RESULT]
gcode:
	# beacon contact config
	{% set beacon_contact_prime_probing = true if printer["gcode_macro RatOS"].beacon_contact_prime_probing|default(false)|lower == 'true' else false %}

	{% set last_z_offset = 9999.9 %}
	{% if printer.configfile.settings.beacon is defined %}
		{% set current_z = printer.toolhead.position.z|float %}
		{% if beacon_contact_prime_probing %}
			{% set last_z_offset = printer.beacon.last_z_result %}
		{% else %}
			{% set last_z_offset = printer.beacon.last_sample.dist - current_z %}
		{% endif %}
	{% elif printer.configfile.settings.bltouch is defined  %}
		{% set config_offset = printer.configfile.settings.bltouch.z_offset|float %}
		{% set last_z_offset = printer.probe.last_z_result - config_offset %}
	{% elif printer.configfile.settings.probe is defined  %}
		{% set config_offset = printer.configfile.settings.probe.z_offset|float %}
		{% set last_z_offset = printer.probe.last_z_result - config_offset %}
	{% endif %}
	RATOS_ECHO PREFIX="Adaptive Mesh" MSG="Saving offset adjustment of {last_z_offset} in {params.VARIABLE|default('last_z_offset')}"
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE={params.VARIABLE|default('last_z_offset')} VALUE={last_z_offset}

[gcode_macro PROBE_FOR_PRIMING]
gcode:
	# beacon contact config
	{% set beacon_contact_prime_probing = true if printer["gcode_macro RatOS"].beacon_contact_prime_probing|default(false)|lower == 'true' else false %}

	{% if printer["gcode_macro RatOS"].nozzle_priming|lower != 'false' %}
		SAVE_GCODE_STATE NAME=probe_for_priming_state
		RATOS_ECHO PREFIX="Adaptive Mesh" MSG="Probing the prime location.."

		# Handle toolhead settings
		CACHE_TOOLHEAD_SETTINGS KEY="probe_for_priming"
		SET_MACRO_TRAVEL_SETTINGS

		# parameter
		{% set t = params.TOOLHEAD|default(-1)|int %}
		{% set idex_mode = params.IDEX_MODE|default('')|lower %}

		# config
		{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
		{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
		{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
		{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}

		# calculation
		{% if idex_mode == '' %}
			# DEFAULT
			{% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
				{% set x_start = 5 %}
			{% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
				{% set x_start = printable_x_max - 5 %}
			{% else %}
				{% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
			{% endif %}
			{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
				{% set y_start = 5 %}
			{% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
				{% set y_start = printable_y_max - 5 %}
			{% else %}
				{% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
			{% endif %}
		{% else %}
			# IDEX
			{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
			{% set center_x = printable_x_max / 2 %}
			{% if t == 0 %}
				{% set x_start = 5 %}
			{% else %}
				{% set x_start = printable_x_max - 5 %}
			{% endif %}
			{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
				{% set y_start = 5 %}
			{% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
				{% set y_start = printable_y_max - 5 %}
			{% endif %}
		{% endif %}
		{% set z = printer.configfile.settings.bed_mesh.horizontal_move_z|float %}

		# get bed mesh config object
		{% set mesh_config = printer.configfile.config.bed_mesh %}

		# Get probe offsets
		{% if printer.configfile.settings.bltouch is defined %}
			{% set x_offset = printer.configfile.settings.bltouch.x_offset|float %}
			{% set y_offset = printer.configfile.settings.bltouch.y_offset|float %}
			{% set z_offset = printer.configfile.settings.bltouch.z_offset|float %}

		{% elif printer.configfile.settings.probe is defined %}
			{% set x_offset = printer.configfile.settings.probe.x_offset|float %}
			{% set y_offset = printer.configfile.settings.probe.y_offset|float %}
			{% set z_offset = printer.configfile.settings.probe.z_offset|float %}
		{% elif printer.configfile.settings.beacon is defined %}
			{% if beacon_contact_prime_probing %}
				{% set x_offset = 0 %}
				{% set y_offset = 0 %}
			{% else %}
				{% set x_offset = printer.configfile.settings.beacon.x_offset|float %}
				{% set y_offset = printer.configfile.settings.beacon.y_offset|float %}
			{% endif %}
			{% set z_offset = printer.configfile.settings.beacon.trigger_distance|float %}
		{% else %}
			{ action_raise_error("No probe, beacon or bltouch section found. Adaptive priming only works with a [probe], [beacon] or [bltouch] section defined.") }
		{% endif %}

		{% if z < z_offset %}
			{ action_raise_error("Horizontal move Z ({z}) is below your probe's Z offset ({z_offset}). Please adjust your horizontal_move_z setting in [bed_mesh] to be above {z}.") }
		{% endif %}
		
		{% if not (printer.configfile.settings.beacon is defined and beacon_contact_prime_probing) %}
			# get configured bed mesh area
			{% set min_x = mesh_config.mesh_min.split(",")[0]|float - x_offset %}
			{% set min_y = mesh_config.mesh_min.split(",")[1]|float - y_offset %}
			{% set max_x = mesh_config.mesh_max.split(",")[0]|float - x_offset %}
			{% set max_y = mesh_config.mesh_max.split(",")[1]|float - y_offset %}

			# make sure probe coordinates lie within the configured mesh area
			{% set x_start = [[x_start, max_x]|min, min_x]|max %}
			{% set y_start = [[y_start, max_y]|min, min_y]|max %}
		{% endif %}

		RATOS_ECHO PREFIX="Adaptive Mesh" MSG="Probing the start of the prime location at {x_start}, {y_start}"
		# Absolute positioning
		G90 
		# Relative extrusion
		M83
		# Lift to horizontal_move_z
		G0 Z{z} F{z_speed}
		# move close to blob position
		G1 X{x_start} Y{y_start} F{speed}
		PROBE_CURRENT_POSITION
		{% if t == 1 %}
			SAVE_PROBE_RESULT VARIABLE=probe_for_priming_result_t1
		{% else %}
			SAVE_PROBE_RESULT VARIABLE=probe_for_priming_result
		{% endif %}

		{% if idex_mode == '' %}
			# DEFAULT
			{% set x_end = x_start %}
			{% set y_end = y_start + 45 %}
		{% else %}
			# IDEX
			{% if t==1 %}
				{% set x_end = x_start - 45 %}
			{% else %}
				{% set x_end = x_start + 45 %}
			{% endif %}
			{% set y_end = y_start %}
		{% endif %}
		
		RATOS_ECHO PREFIX="Adaptive Mesh" MSG="Probing the end of the prime location at {x_end}, {y_end}"
		G1 X{x_end} Y{y_end} F{speed}
		PROBE_CURRENT_POSITION
		{% if t == 1 %}
			SAVE_PROBE_RESULT VARIABLE=probe_for_priming_end_result_t1
		{% else %}
			SAVE_PROBE_RESULT VARIABLE=probe_for_priming_end_result
		{% endif %}
		
		RESTORE_GCODE_STATE NAME=probe_for_priming_state

		# Handle toolhead settings
		RESTORE_TOOLHEAD_SETTINGS KEY="probe_for_priming"
	{% endif %}

[gcode_macro RESET_PRIME_PROBE_STATE]
gcode:
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=probe_for_priming_result VALUE=None
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=probe_for_priming_end_result VALUE=None
	{% if printer["dual_carriage"] is defined %}
		# IDEX
		SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=probe_for_priming_result_t1 VALUE=None
		SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=probe_for_priming_end_result_t1 VALUE=None
	{% endif %}

[gcode_macro PROBE_CURRENT_POSITION]
gcode:
	# beacon contact config
	{% set beacon_contact_prime_probing = true if printer["gcode_macro RatOS"].beacon_contact_prime_probing|default(false)|lower == 'true' else false %}

	SAVE_GCODE_STATE NAME=probe_current_position_state
	{% if printer["gcode_macro RatOS"].z_probe|lower == 'stowable' %}
		ASSERT_PROBE_DEPLOYED
	{% endif %}
	{% if printer.configfile.settings.beacon is defined and beacon_contact_prime_probing %}
		PROBE PROBE_METHOD=contact SAMPLES=1
	{% else %}
		PROBE
	{% endif %}
	{% if printer.configfile.settings.beacon is defined %}
		BEACON_QUERY
	{% else %}
		# Only restore state if we're not using a beacon, so we state at scanning height
		RESTORE_GCODE_STATE NAME=probe_current_position_state MOVE=1 MOVE_SPEED={printer["gcode_macro RatOS"].macro_z_speed|float}
	{% endif %}

[gcode_macro PRIME_BLOB]
description: Prints a primeblob, used internally, if configured, as part of the START_PRINT macro. 
variable_x_offset: 5   # the prime blob x-margin 
gcode:
	# Handle toolhead settings
	CACHE_TOOLHEAD_SETTINGS KEY="prime_blob"
	SET_MACRO_TRAVEL_SETTINGS

	RATOS_ECHO PREFIX="Priming" MSG="Priming nozzle with prime blob.."

	# set current toolhead default
	{% set current_toolhead = 0 %}

	# idex mode
	{% set target_idex_mode = '' %}
	{% set extruder = 'extruder' %}
	{% if printer["dual_carriage"] is defined %}
		{% if params.IDEX_MODE is defined %}
			{% set target_idex_mode = params.IDEX_MODE|default('')|lower %}
		{% else %}
			{ action_raise_error("IDEX_MODE parameter not found for PRIME_BLOB macro. This is likely a bug.") }
		{% endif %}
		RATOS_ECHO PREFIX="Priming" MSG="Priming in IDEX {target_idex_mode} mode.."
		{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
		{% set current_toolhead = 1 if current_idex_mode=='primary' else 0 %}
		{% set extruder = 'extruder1' if current_toolhead == 1 else 'extruder' %}
	{% endif %}

	# save gcode state
	# this is a macro where copy and mirror mode is possibly in use 
	# SAVE_GCODE_STATE isnt IDEX aware, we have no other chance than to skip it
	# klippers built in dual carriage save state is buggy and creates to many side effects
	{% if target_idex_mode != "copy" or target_idex_mode != "mirror" %}
		SAVE_GCODE_STATE NAME=prime_blob_state
	{% endif %}

	# config
	{% set first_y = printer["gcode_macro START_PRINT"].first_y|default(-1)|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set fan_speed = printer["gcode_macro RatOS"].nozzle_prime_bridge_fan|float %}
	{% set nozzle_diameter = printer.configfile.settings[extruder].nozzle_diameter|float %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set has_start_offset_t0 = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) != 9999.9 %}
	{% if printer["dual_carriage"] is defined %}
		{% set has_start_offset_t1 = printer["gcode_macro RatOS"].probe_for_priming_result_t1|float(9999.9) != 9999.9 %}
	{% endif %}

	# parameter
	{% set initial_toolhead = params.INITIAL_TOOLHEAD|default(default_toolhead)|int %}
	{% set both_toolheads = true if params.BOTH_TOOLHEADS|default(true)|lower=='true' else false %}

	# calculation
	{% if target_idex_mode == '' %}
		# DEFAULT
		{% set x_factor = 0 %}
		{% if printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'min' %}
			{% set x_start = 5 %}
		{% elif printer["gcode_macro RatOS"].nozzle_prime_start_x|lower == 'max' %}
			{% set x_start = printable_x_max - 5 %}
		{% else %}
			{% set x_start = printer["gcode_macro RatOS"].nozzle_prime_start_x|float %}
		{% endif %}
		{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
			{% set y_start = 5 %}
			{% set y_factor = 1 %}
		{% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
			{% set y_start = printable_y_max - 5 %}
			{% set y_factor = -1 %}
		{% else %}
			{% set y_start = printer["gcode_macro RatOS"].nozzle_prime_start_y|float %}
			{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|float < printable_y_max / 2 %}
				{% set y_factor = 1 %}
			{% else %}
				{% set y_factor = -1 %}
			{% endif %}
		{% endif %}
		{% if printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'forwards' %}
			{% set y_factor = 1 %}
		{% elif printer["gcode_macro RatOS"].nozzle_prime_direction|lower == 'backwards' %}
			{% set y_factor = -1 %}
		{% endif %}
		{% set z = printer["gcode_macro RatOS"].start_print_park_z_height|float %}
	{% else %}
		# IDEX
		{% set center_x = printable_x_max / 2 %}
		{% set y_factor = 0 %}
		{% if target_idex_mode == 'copy' or target_idex_mode == 'mirror' %}
			{% set x_start = center_x / 2 + 5 %}
			{% set x_factor = 1 %}
		{% else %}
			# Make sure the initial toolhead is primed last towards the center / print.
			# Prime the other toolhead towards the ooze guard to minimize oozing / travel distance.
			{% if both_toolheads and initial_toolhead != current_toolhead %}
				{% if current_toolhead == 0 %}
					{% set x_start = 55 %}
					{% set x_factor = -1 %}
				{% elif current_toolhead == 1 %}
					{% set x_start = printable_x_max - 55 %}
					{% set x_factor = 1 %}
				{% endif %}
			{% else %}
				{% if current_toolhead == 0 %}
					{% set x_start = 5 %}
					{% set x_factor = 1 %}
				{% elif current_toolhead == 1 %}
					{% set x_start = printable_x_max - 5 %}
					{% set x_factor = -1 %}
				{% endif %}
			{% endif %}
		{% endif %}
		{% if printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'min' %}
			{% set y_start = 5 %}
		{% elif printer["gcode_macro RatOS"].nozzle_prime_start_y|lower == 'max' %}
			{% set y_start = printable_x_max - 5 %}
		{% endif %}
		{% set z = 10 %}
	{% endif %}

	{% set start_z_offset = 0 %}
	{% set end_z_offset = 0 %}
	{% if has_start_offset_t0 %}
		{% set start_z_probe_result_t0 = printer["gcode_macro RatOS"].probe_for_priming_result|float(9999.9) %}
		{% set end_z_probe_result_t0 = printer["gcode_macro RatOS"].probe_for_priming_end_result|float(9999.9) %}
		{% if printer.configfile.settings.bltouch is not defined and printer.configfile.settings.probe is not defined and printer.configfile.settings.beacon is not defined %}
			{ action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
		{% endif %}
		{% if start_z_probe_result_t0 == 9999.9 %}
			{ action_raise_error("No start probe result found for prime area. This is likely a bug.") }
		{% endif %}
		{% if end_z_probe_result_t0 == 9999.9 %}
			{ action_raise_error("No end probe result found for prime area. This is likely a bug.") }
		{% endif %}
		{% set adjustment_threshold = printer["gcode_macro RatOS"].adaptive_prime_offset_threshold|float %}
		{% if start_z_probe_result_t0 < adjustment_threshold %}
			{ action_raise_error("Abnormal probe offset detected. Needed offset of {start_adjustment} is below the offset threshold of -1mm. Please verify the probe is over the bed when probing for priming. If it isn't, you should adjust you min/max bed_mesh settings so the probe is always over the print area.") }
		{% endif %}
		{% if end_z_probe_result_t0 < adjustment_threshold %}
			{ action_raise_error("Abnormal probe offset detected. Needed offset of {end_adjustment} is below the offset threshold of -1mm. Please verify the probe is over the bed when probing for priming. If it isn't, you should adjust you min/max bed_mesh settings so the probe is always over the print area.") }
		{% endif %}
		{% set start_z_offset = start_z_probe_result_t0 %}
		{% set end_z_offset = end_z_probe_result_t0 %}
	{% endif %}

	{% if printer["dual_carriage"] is defined %}
		{% if current_toolhead == 1 or both_toolheads or target_idex_mode == "copy" or target_idex_mode == "mirror" %}
			{% if has_start_offset_t1 %}
				{% set start_z_probe_result_t1 = printer["gcode_macro RatOS"].probe_for_priming_result_t1|float(9999.9) %}
				{% set end_z_probe_result_t1 = printer["gcode_macro RatOS"].probe_for_priming_end_result_t1|float(9999.9) %}
				{% if printer.configfile.settings.bltouch is not defined and printer.configfile.settings.probe is not defined and printer.configfile.settings.beacon is not defined %}
					{ action_raise_error("No probe or bltouch section found. Adaptive priming only works with [probe] or [bltouch].") }
				{% endif %}
				{% if start_z_probe_result_t1 == 9999.9 %}
					{ action_raise_error("No start probe result found for prime area. This is likely a bug.") }
				{% endif %}
				{% if end_z_probe_result_t1 == 9999.9 %}
					{ action_raise_error("No end probe result found for prime area. This is likely a bug.") }
				{% endif %}
				{% set adjustment_threshold = printer["gcode_macro RatOS"].adaptive_prime_offset_threshold|float %}
				{% if start_z_probe_result_t1 < adjustment_threshold %}
					{ action_raise_error("Abnormal probe offset detected. Needed offset of {start_adjustment} is below the offset threshold of -1mm. Please verify the probe is over the bed when probing for priming. If it isn't, you should adjust you min/max bed_mesh settings so the probe is always over the print area.") }
				{% endif %}
				{% if end_z_probe_result_t1 < adjustment_threshold %}
					{ action_raise_error("Abnormal probe offset detected. Needed offset of {end_adjustment} is below the offset threshold of -1mm. Please verify the probe is over the bed when probing for priming. If it isn't, you should adjust you min/max bed_mesh settings so the probe is always over the print area.") }
				{% endif %}
				{% set start_z_offset = [start_z_offset, start_z_probe_result_t1]|max %}
				{% set end_z_offset = [end_z_offset, start_z_probe_result_t1]|max %}
			{% endif %}
		{% endif %}
		{% if target_idex_mode != 'copy' and target_idex_mode != 'mirror' %}
			{% if both_toolheads and initial_toolhead != current_toolhead %}
				{% set original_start_z_offset = start_z_offset %}
				{% set original_end_z_offset = end_z_offset %}
				{% set start_z_offset = original_end_z_offset %}
				{% set end_z_offset = original_start_z_offset %}
			{% endif %}
		{% endif %}
	{% endif %}
	
	# set nozzle thermal expansion offset
	{% if printer.configfile.settings.beacon is defined %}
		_BEACON_SET_NOZZLE_TEMP_OFFSET TOOLHEAD={current_toolhead}
	{% endif %}

	DEBUG_ECHO PREFIX="PRIME_BLOB" MSG="x_start: {x_start}, y_start: {y_start}, x_factor: {x_factor}, y_factor: {y_factor}, z: {z}, start_z_offset: {start_z_offset}, end_z_offset: {end_z_offset}"

	# Absolute positioning
	G90
	# Relative extrusion
	M83
	RATOS_ECHO PREFIX="Priming" MSG="Lifting Z to {z}.."
	# Lift to start print Z height
	G0 Z{z} F{z_speed}

	# move close to blob position along the edge of the bed
	{% if printer["dual_carriage"] is not defined %}
		# DEFAULT
		RATOS_ECHO PREFIX="Priming" MSG="Moving to {x_start}, {y_start} along the edge of the print area.."
		G1 X{x_start} Z1 F{speed}
		G1 Y{y_start + (15 * y_factor)} F{speed}
	{% else %}
		# IDEX
		G1 Y{y_start + (15 * y_factor)} F{speed}
		{% if target_idex_mode=="copy" or target_idex_mode=="mirror" %}
			RATOS_ECHO PREFIX="Priming" MSG="Mirroring move to {x_start}, {y_start} along the edge of the print area.."
			# we use the same priming procedure for both modes 
			_IDEX_MIRROR PRIMING=1
		{% else %}
			RATOS_ECHO PREFIX="Priming" MSG="Moving to {x_start}, {y_start} along the edge of the print area.."
		{% endif %}
		G1 X{x_start} Z1 F{speed}
	{% endif %}

	RATOS_ECHO PREFIX="Priming" MSG="Starting prime blob.."
	# Lower to blob extrusion height
	G1 Z{0.5 + start_z_offset} F{z_speed}
	# Move to final position horizontally
	G1 Y{y_start} F{speed}
	# Extrude a blob (split in two moves to avoid thresholds)
	G1 F300 E{14 / ((0.4 / nozzle_diameter) ** 2)}
	G1 F300 E{14 / ((0.4 / nozzle_diameter) ** 2)}
	# 40% fan
	M106 S{fan_speed} 
	# Move the extruder up by 5mm while extruding, breaks away from blob
	G1 Z5 F100 E5  
	G92 E0
	RATOS_ECHO PREFIX="Priming" MSG="Bridging with {((fan_speed/255) * 100)|int}% fan speed.."
	# Move to wipe position, but keep extruding so the wipe is attached to blob
	G1 F3000 X{x_start + (15 * x_factor)} Y{y_start + (15 * y_factor)} E{1 / ((0.4 / nozzle_diameter) ** 2)} 
	# Go down diagonally while extruding
	# Broken down in z moves under 2mm as a workaround for a tuning tower test.
	# The tuning tower command thinks a new print has been started when z moves over 2mm and aborts.
	G1 F3000 X{x_start + (20 * x_factor)} Y{y_start + (20 * y_factor)} Z{3.8 + end_z_offset} E{0.2 / ((0.4 / nozzle_diameter) ** 2)}
	G1 F3000 X{x_start + (34 * x_factor)} Y{y_start + (34 * y_factor)} Z{2.6 + end_z_offset} E{0.2 / ((0.4 / nozzle_diameter) ** 2)}
	G1 F3000 X{x_start + (38 * x_factor)} Y{y_start + (38 * y_factor)} Z{1.4 + end_z_offset} E{0.2 / ((0.4 / nozzle_diameter) ** 2)}
	G1 F3000 X{x_start + (42 * x_factor)} Y{y_start + (42 * y_factor)} Z{0.2 + end_z_offset} E{0.2 / ((0.4 / nozzle_diameter) ** 2)}
	# 0% fan
	M106 S0
	# small wipe line
	G1 F3000 X{x_start + (46 * x_factor)} Y{y_start + (46 * y_factor)} Z{0.2 + end_z_offset} E0.6 
	# Break away wipe
	G1 F{speed} X{x_start + (50 * x_factor)} Y{y_start + (50 * y_factor)}

	# z-hop after priming
	{% if target_idex_mode == "copy" or target_idex_mode == "mirror" %}
		G0 Z3 F{z_speed}
	{% endif %}

	# reactivate idex copy mode if needed
	{% if target_idex_mode == "copy" %}
		{% if first_y >= 0 %}
			_IDEX_COPY DANCE=0 Y={first_y}
		{% else %}
			_IDEX_COPY DANCE=0 Y={params.Y1}
		{% endif %}
	{% endif %}

	# restore gcode state
	# this is a macro where copy and mirror mode is possibly in use 
	# SAVE_GCODE_STATE isnt IDEX aware, we have no other chance than to skip it
	# klippers built in dual carriage save state is buggy and creates to many side effects
	{% if target_idex_mode != "copy" or target_idex_mode != "mirror" %}
		RESTORE_GCODE_STATE NAME=prime_blob_state
	{% endif %}

	# Handle toolhead settings
	RESTORE_TOOLHEAD_SETTINGS KEY="prime_blob"

	# Reset extrusion distance
	G92 E0
