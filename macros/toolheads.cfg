# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

#####
# CONFIGURATION VARIABLES
#####

[gcode_macro RatOS]
variable_toolchange_zhop: 0.4                 # toolchange z-hop
variable_toolchange_zspeed: 50                # toolchange z-hop and drop z-speed
variable_toolchange_sync_fans: False          # force part fan synchronization in single toolhead mode
variable_toolchange_combined_zhop: False      # combines Z and E moves for z-hops and drops
variable_toolchange_travel_speed: 300         # parking travel speed 
variable_toolchange_travel_accel: 5000        # parking travel accel 
variable_toolchange_extrusion: 0.8            # toolchange extrusion
variable_toolchange_retraction: 0.8           # toolchange retraction 
variable_toolchange_feedrate: 7200            # toolchange extrusion and retraction feed rate
variable_toolchange_dynamic_switch_time: 0    # dynamic mode, switches between fast toolshifts and standy mode if last toolshift is more than X seconds old
variable_toolchange_toolhead_standby: False   # use toolhead standby for toolshifts
variable_toolchange_standby_temp: 0           # standby temperature for toolshifts
variable_toolchange_wake_up_purge: 0          # amount of filament to purge after the toolhead wakes up from standby mode
variable_toolchange_first_purge: 50           # amount of filament to purge for the first usage of a toolhead


#####
# TOOLHEAD SELECTION
####
[gcode_macro _SELECT_TOOL]
variable_last_timestamp: 0
gcode:
	{% if params.T is defined %}
		{% set idex_mode = '' %}
		{% if printer["dual_carriage"] is defined %}
			{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
			{% if "xyz" not in printer.toolhead.homed_axes and (idex_mode == "copy" or idex_mode == "mirror") %}
				_IDEX_SINGLE
				{% set idex_mode = 'reset' %}
			{% endif %}
		{% endif %}
		{% if idex_mode != "copy" and idex_mode != "mirror" %}
			{% set act_t = 1 if idex_mode == 'primary' else 0 %}
			{% set new_t = params.T|int %}

			# swap toolheads if needed
			{% set is_printing_gcode = true if printer["gcode_macro START_PRINT"].is_printing_gcode|default(true)|lower == 'true' else false %}
			{% set swap_toolheads = true if printer["gcode_macro _IDEX_REMAP_TOOLHEADS"].enabled|default(false)|lower == 'true' else false %}
			{% if swap_toolheads and is_printing_gcode %}
				{% set new_t = 0 if new_t == 1 else 1 %}
			{% endif %}

			# toolchange config
			{% set toolchange_dynamic_switch_time = printer["gcode_macro RatOS"].toolchange_dynamic_switch_time|default(0)|int %}
			{% set toolchange_toolhead_standby = true if printer["gcode_macro RatOS"].toolchange_toolhead_standby|default(true)|lower == 'true' else false %}

			DEBUG_ECHO PREFIX="_SELECT_TOOL" MSG="act_t={act_t}, new_t={new_t}, is_printing_gcode={is_printing_gcode}, swap_toolheads={swap_toolheads}, toolchange_toolhead_standby={toolchange_toolhead_standby}"

			{% set act_extruder = 'extruder%s' % ('' if new_t == 0 else new_t) %}  
			{% if new_t != act_t or printer.toolhead.extruder != act_extruder or idex_mode == 'reset' %} 

				RATOS_ECHO PREFIX="IDEX" MSG="Selecting T{new_t}.."

				# reset any speed override from the purge tower
				M220 S100

				# parameters
				{% set new_x = params.X|default(-1)|float %}
				{% set new_y = params.Y|default(-1)|float %}
				{% set new_z = params.Z|default(-1)|float %}
				{% set toolshift = true if params.TOOLSHIFT|default(1)|int == 1 else false %}

				# parking position override, used for VAOC
				{% set park_t0 = params.PARK_T0|default(-1)|float %}
				{% set park_t1 = params.PARK_T1|default(-1)|float %}

				# deactivate toolshifting if printer is not homed
				{% if "xyz" not in printer.toolhead.homed_axes %}
					{% set toolshift = false %}
				{% endif %}

				# cache current fan speed
				{% set fan_speed = printer["fan_generic part_fan_t%s" % act_t].speed %}

				# deactivate toolhead if needed
				{% set deactivate_toolhead = false %}
				{% if is_printing_gcode %}
					{% set total_toolshifts = printer["gcode_macro START_PRINT"].total_toolshifts|int %}
					{% set toolshift_count = printer["gcode_macro _TOOLCHANGE"].toolshift_count|int + 1 %}
					SET_GCODE_VARIABLE MACRO=_TOOLCHANGE VARIABLE=toolshift_count VALUE={toolshift_count}
					{% if toolshift_count == total_toolshifts %}
						{% set deactivate_toolhead = true %}
					{% endif %}
				{% endif %}

				# dynamic toolshifts
				{% if is_printing_gcode and toolchange_dynamic_switch_time > 0 %}
					{% set new_timestamp = printer["print_stats"].print_duration %}
					{% set elapsed_time = new_timestamp - last_timestamp %}
					SET_GCODE_VARIABLE MACRO=_SELECT_TOOL VARIABLE=last_timestamp VALUE={new_timestamp}
					{% if elapsed_time > toolchange_dynamic_switch_time %}
						{% set toolchange_toolhead_standby = true %}
					{% else %}
						{% set toolchange_toolhead_standby = false %}
					{% endif %}
				{% endif %}

				# change toolhead
				{% if is_printing_gcode and toolchange_toolhead_standby %}
					_TOOLHEAD_STANDBY TOOLHEAD={act_t}
					{% if deactivate_toolhead %}
						_DEACTIVATE_TOOLHEAD TOOLHEAD={act_t}
					{% endif %}
					_TOOLHEAD_WAKEUP TOOLHEAD={new_t} X={new_x} Y={new_y} Z={new_z} FAN_SPEED={fan_speed} TOOLSHIFT_COUNT={toolshift_count}
				{% else %}
					{% set sync_fans = true if printer["gcode_macro RatOS"].toolchange_sync_fans|default(false)|lower == 'true' else false %}
					{% if fan_speed > 0 %}
						SET_FAN_SPEED FAN=part_fan_t0 SPEED={fan_speed if (new_t == 0 or sync_fans) else 0}
						SET_FAN_SPEED FAN=part_fan_t1 SPEED={fan_speed if (new_t == 1 or sync_fans) else 0}
						# Update core Klipper's fan speed to the fan speed of the active toolhead
						# Only do this if you have a sacrificial [fan] section
						M106.1 S{fan_speed}
					{% endif %}
					_TOOLCHANGE T={new_t} X={new_x} Y={new_y} Z={new_z} PARK_T0={park_t0} PARK_T1={park_t1} TOOLSHIFT={toolshift}
					{% if deactivate_toolhead %}
						_DEACTIVATE_TOOLHEAD TOOLHEAD={act_t}
					{% endif %}
				{% endif %}

				# set input shaper
				{% set shaper_x_freq = printer["gcode_macro RatOS"].shaper_x_freq %}
				{% set shaper_y_freq = printer["gcode_macro RatOS"].shaper_y_freq %}
				{% set shaper_x_type = printer["gcode_macro RatOS"].shaper_x_type %}
				{% set shaper_y_type = printer["gcode_macro RatOS"].shaper_y_type %}
				SET_INPUT_SHAPER SHAPER_FREQ_X={(shaper_x_freq[new_t]|float)} SHAPER_FREQ_Y={(shaper_y_freq[new_t]|float)} SHAPER_TYPE_X={(shaper_x_type[new_t]|lower)} SHAPER_TYPE_Y={(shaper_y_type[new_t]|lower)}

				# update Frontend
				SET_GCODE_VARIABLE MACRO=T0 VARIABLE=active VALUE={True if new_t == 0 else False}
				SET_GCODE_VARIABLE MACRO=T1 VARIABLE=active VALUE={True if new_t == 1 else False}

				# this is a very basic sanity check for the klipper idex_mode.py bug 
				# a randomly apearing bug in idex_mode.py leads to switched modes for the dual carriage state
				{% if 'x' in printer.toolhead.homed_axes %}
					{% set sanity_check_idex_mode = printer["dual_carriage"].carriage_1|lower %}
					{% if new_t == 0 %}
						{% if printer.toolhead.extruder == 'extruder' %}
							{% if sanity_check_idex_mode == 'primary' %}
								{ action_emergency_stop("Switched states detected in idex_mode.py. Please restart the host controller.") }
							{% endif %}
						{% endif %}
					{% elif new_t == 1 %}
						{% if printer.toolhead.extruder == 'extruder1' %}
							{% if sanity_check_idex_mode == 'inactive' %}
								{ action_emergency_stop("Switched states detected in idex_mode.py. Please restart the host controller.") }
							{% endif %}
						{% endif %}
					{% endif %}
				{% endif %}

				G90        # absolute positioning
				G92 E0     # reset extrusion distance

			{% endif %}
		{% endif %}
	{% endif %}


[gcode_macro _TOOLHEAD_STANDBY]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set config_z_hop = printer["gcode_macro RatOS"].toolchange_zhop|default(1.0)|float %}
	{% set toolchange_standby_temp = printer["gcode_macro RatOS"].toolchange_standby_temp|float %}

	RATOS_ECHO PREFIX="IDEX" MSG="Putting toolhead T{toolhead} into standby mode."
	DEBUG_ECHO PREFIX="_TOOLHEAD_STANDBY" MSG="toolhead={toolhead}, config_z_hop={config_z_hop}, toolchange_standby_temp={toolchange_standby_temp}"

	# turn part cooling fans off
	SET_FAN_SPEED FAN=part_fan_t0 SPEED=0
	SET_FAN_SPEED FAN=part_fan_t1 SPEED=0
	# Update core Klipper's fan speed to the fan speed of the active toolhead
	# Only do this if you have a sacrificial [fan] section
	M106.1 S0

	# park toolhead
	_ZHOP_BEFORE_TOOLCHANGE Z_HOP={config_z_hop} T={toolhead} SYNC=0
	PARK_TOOLHEAD

	# clean nozzle
	_CLEANING_MOVE TOOLHEAD={toolhead}

	# set toolhead standby temperature
	M104 S{toolchange_standby_temp} T{toolhead}

	# visual feedback
	_LED_TOOLHEAD_STANDBY TOOLHEAD={toolhead}


[gcode_macro _TOOLHEAD_WAKEUP]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set fan_speed = params.FAN_SPEED|float %}
	{% set new_x = params.X|default(-1)|float %}
	{% set new_y = params.Y|default(-1)|float %}
	{% set new_z = params.Z|default(-1)|float %}
	{% set toolshift_count = params.TOOLSHIFT_COUNT|default(0)|int %}

	# config
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set acceleration = printer["gcode_macro RatOS"].toolchange_travel_accel %}
	{% set config_z_hop = printer["gcode_macro RatOS"].toolchange_zhop|default(1.0)|float %}
	{% set wake_up_purge = printer["gcode_macro RatOS"].toolchange_wake_up_purge|default(0)|float %}
	{% set e = printer["gcode_macro RatOS"].toolchange_retraction %}
	{% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
	{% if toolshift_count == 1 %}
		{% set wake_up_purge = printer["gcode_macro RatOS"].toolchange_first_purge %}
	{% endif %}

	RATOS_ECHO PREFIX="IDEX" MSG="Waking up toolhead T{toolhead}. Please wait for extruder to heat up..."
	DEBUG_ECHO PREFIX="_TOOLHEAD_WAKEUP" MSG="toolhead={toolhead}, fan_speed={fan_speed}, new_x={new_x}, new_y={new_y}, new_z={new_z}, config_z_hop={config_z_hop}"

	# visual feedback
	_LED_TOOLHEAD_WAKEUP TOOLHEAD={toolhead}

	# activate new carriage and offset
	SET_DUAL_CARRIAGE CARRIAGE={toolhead} MODE=PRIMARY

	# set offset
	_SET_TOOLHEAD_OFFSET T={toolhead} MOVE=1

	# activate new extruder
	ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if toolhead == 0 else toolhead}

	# set toolchange acceleration
	{% set max_accel = printer.toolhead.max_accel|float %}
	{% set square_corner_velocity = printer.toolhead.square_corner_velocity|float %}
	SET_VELOCITY_LIMIT ACCEL={acceleration} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY=20

	# set new toolhead temperature
	{% if printer["gcode_macro _LAYER_CHANGE"].layer_number|int < 2 %}
		{% if toolhead == 0 %}
			M109 S{printer.extruder.target} T{toolhead}
		{% else %}
			M109 S{printer.extruder1.target} T{toolhead}
		{% endif %}
	{% else %}
		{% if toolhead == 0 %}
			M109 S{printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp|float} T{toolhead}
		{% else %}
			M109 S{printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp_1|float} T{toolhead}
		{% endif %}
	{% endif %}

	# visual feedback
	_LED_PRINTING TOOLHEAD={toolhead}

	# purge if configured
	{% if wake_up_purge > 0 %}
		_MOVE_TO_LOADING_POSITION TOOLHEAD={toolhead}
		_PURGE_FILAMENT TOOLHEAD={toolhead} E={wake_up_purge}
		_CLEANING_MOVE TOOLHEAD={toolhead}
	{% endif %}

	# set part cooling fan speed
	{% if fan_speed > 0 %}
		SET_FAN_SPEED FAN=part_fan_t0 SPEED={fan_speed if toolhead == 0 else 0}
		SET_FAN_SPEED FAN=part_fan_t1 SPEED={fan_speed if toolhead == 1 else 0}
		# Update core Klipper's fan speed to the fan speed of the active toolhead
		# Only do this if you have a sacrificial [fan] section
		M106.1 S{fan_speed}
	{% endif %}

	# toolchange retract before moving back to print area
	G92 E0      # reset extrusion distance
	G1 E-{e} F{feedrate}
	G92 E0      # reset extrusion distance

	# move to print area
	{% if new_x >= 0 and new_y >= 0 %}
		G1 X{new_x} Y{new_y} F{speed}
		_ZDROP_AFTER_TOOLCHANGE Z_DROP={config_z_hop} T={toolhead} SYNC=0
	{% endif %}

	# reset acceleration
	SET_VELOCITY_LIMIT ACCEL={max_accel} MINIMUM_CRUISE_RATIO=0.5 SQUARE_CORNER_VELOCITY={square_corner_velocity}


[gcode_macro _TOOLCHANGE]
variable_toolshift_count: 0       # number of completed toolshifts
gcode:
	# parameters 
	{% set new_t = params.T|default(-1)|int %}
	{% set new_x = params.X|default(-1.0)|float %}
	{% set new_y = params.Y|default(-1.0)|float %}
	{% set new_z = params.Z|default(-1.0)|float %}         # currently unused, represents the printing z-height after the toolchange
	{% set park_t0 = params.PARK_T0|default(-1)|float %}
	{% set park_t1 = params.PARK_T1|default(-1)|float %}
	{% set toolshift = true if params.TOOLSHIFT|default(true)|lower == 'true' else false %}
	{% set is_printing_gcode = true if printer["gcode_macro START_PRINT"].is_printing_gcode|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_TOOLCHANGE" MSG="T={new_t} X={new_x} Y={new_y} Z={new_z} PARK_T0={park_t0} PARK_T1={park_t1} IS_PRINTING_GCODE={is_printing_gcode} TOOLSHIFT={toolshift}"

	# config
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set config_z_hop = printer["gcode_macro RatOS"].toolchange_zhop|default(1.0)|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set center_x = printable_x_max / 2 %}
	{% set acceleration = printer["gcode_macro RatOS"].toolchange_travel_accel %}
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
	{% set act_t = 1 if idex_mode == 'primary' else 0 %}
	{% set parking_position_t0 = printer["gcode_macro T0"].parking_position|float %}
	{% set parking_position_t1 = printer["gcode_macro T1"].parking_position|float %}
	{% set parking_position_act_t = printer["gcode_macro T%s" % act_t].parking_position|float %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|int %}

	# parking position override, used for VAOC
	{% if park_t0 >= 0 and park_t1 >= 0 %}
		{% set parking_position_t0 = park_t0 %}
		{% set parking_position_t1 = park_t1 %}
		{% set parking_position_act_t = park_t0 if act_t == 0 else park_t1 %}
	{% endif %}

	# change toolhead
	{% if not is_printing_gcode and not toolshift %}

		DEBUG_ECHO PREFIX="_TOOLCHANGE" MSG="Changing tool to T{new_t} without retracting/extruding or moving the toolheads except for parking."

		# park toolhead
		{% if "xyz" in printer.toolhead.homed_axes %}
			G1 X{parking_position_act_t} F{speed}
		{% endif %}

		# activate new carriage and offset
		SET_DUAL_CARRIAGE CARRIAGE={new_t} MODE=PRIMARY

		# set offset
		_SET_TOOLHEAD_OFFSET T={new_t} MOVE={1 if "xyz" in printer.toolhead.homed_axes else 0}

		# activate new extruder
		ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t == 0 else new_t}

	{% else %}
		# absolute positioning
		G90

		# set toolchange acceleration
		{% set max_accel = printer.toolhead.max_accel|float %}
		{% set square_corner_velocity = printer.toolhead.square_corner_velocity|float %}
		SET_VELOCITY_LIMIT ACCEL={acceleration} MINIMUM_CRUISE_RATIO=0 SQUARE_CORNER_VELOCITY=20

		# manual tool switching, bring new tool to the printable center
		{% if not is_printing_gcode and toolshift and new_x < 0 and new_y < 0 %}
			{% set new_x = center_x %}
			{% set new_y = printer.gcode_move.gcode_position.y|float %}
		{% endif %}

		{% if new_x < 0 or new_y < 0 %}     
			# park the active toolhead and activate new toolhead without moving it

			# z-hop before parking
			DEBUG_ECHO PREFIX="_TOOLCHANGE" MSG="No new X or Y position given, parking the active toolhead and activating the new toolhead without moving it."
			_ZHOP_BEFORE_TOOLCHANGE Z_HOP={config_z_hop} T={new_t} 

			# park toolhead
			{% if "x" in printer.toolhead.homed_axes %}
				G1 X{parking_position_act_t} F{speed}
			{% endif %}

			# extrude after parking
			{% if is_printing_gcode %}
				_EXTRUDE T={new_t}
			{% endif %}

			# activate new carriage and offset
			SET_DUAL_CARRIAGE CARRIAGE={new_t}
			_SET_TOOLHEAD_OFFSET T={new_t} MOVE={1 if "xyz" in printer.toolhead.homed_axes else 0}

			# activate new extruder
			ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t == 0 else new_t}

		{% else %}
			{% if "xyz" not in printer.toolhead.homed_axes %}
				# printer is not homed

				# activate the new carriage and offset
				SET_DUAL_CARRIAGE CARRIAGE={new_t}
				_SET_TOOLHEAD_OFFSET T={new_t}

				# activate new extruder
				ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t == 0 else new_t}

			{% else %}
				# shift the toolheads

				# get needed offsets
				{% set svv = printer.save_variables.variables %}
				{% if new_t == default_toolhead %}
					{% set xoffset = svv.idex_xoffset %}
					{% set yoffset = svv.idex_yoffset %}
					{% set zoffset = svv.idex_zoffset %}
				{% else %}
					{% set xoffset = 0 - svv.idex_xoffset %}
					{% set yoffset = 0 - svv.idex_yoffset %}
					{% set zoffset = 0 - svv.idex_zoffset %}
				{% endif %}

				# get current z-position
				{% set gcode_z = printer.gcode_move.gcode_position.z|float %}
				{% set toolhead_z = printer.toolhead.position.z|float %}

				{% if new_t == 0 %}
	
					# get values
					{% set t0_act_x = parking_position_t0 %}
					{% set t1_act_x = printer.toolhead.position.x|float %}
					{% set t0_new_x = new_x %}
					{% set t1_new_x = parking_position_t1 %}
					{% set t0_distance = t0_new_x - t0_act_x %}
					{% set t1_distance = t1_new_x - t1_act_x %}

					# ToDo! Take Toolhead z-offset into account
					# calculate needed z-hop
					{% set calc_z_hop = config_z_hop %}

					# z-hop before toolchange
					DEBUG_ECHO PREFIX="_TOOLCHANGE" MSG="Shifting to T0."
					_ZHOP_BEFORE_TOOLCHANGE Z_HOP={calc_z_hop} T={new_t} SYNC=1 

					# make sure T0 is in its correct parking position
					SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
					G1 X{t0_act_x} F{speed}

					{% if t0_distance >= t1_distance %}
						# copy move
						SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
						G1 X{t0_act_x + (t1_new_x - t1_act_x)} Y{new_y + yoffset} F{speed}

						# move T0 
						SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
						G1 X{t0_new_x + xoffset} F{speed}

					{% elif t0_distance < t1_distance %}
						# copy move  
						SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
						G1 X{t0_new_x + xoffset} Y{new_y + yoffset} F{speed}

						# park T1
						SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
						G1 X{t1_new_x} F{speed}

						# move T0 
						SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
						G1 X{t0_new_x + xoffset} F{speed}

					{% endif %}

					# Offset move
					{% if svv.idex_applied_offset != new_t %}
						SET_GCODE_OFFSET X_ADJUST={xoffset} Y_ADJUST={yoffset} MOVE=0 SPEED={speed}
						G1 X{t0_new_x} Y{new_y} F{speed}
						SET_GCODE_OFFSET Z_ADJUST={zoffset} MOVE=1 SPEED={z_speed}
						SAVE_VARIABLE VARIABLE=idex_applied_offset VALUE=0
						RATOS_ECHO PREFIX="IDEX" MSG="Toolhead offset applied for T0: X={xoffset} Y={yoffset} Z={zoffset}"
					{% endif %}

					# ToDo! Take Toolhead z-offset into account
					# calculate needed z-drop
					{% set calc_z_drop = config_z_hop %}

					# z-drop after toolchange
					_ZDROP_AFTER_TOOLCHANGE Z_DROP={calc_z_drop} T={new_t} SYNC=1 

				{% elif new_t == 1 %}

					# get values
					{% set t0_act_x = printer.toolhead.position.x|float %}
					{% set t1_act_x = parking_position_t1 %}
					{% set t0_new_x = parking_position_t0 %}
					{% set t1_new_x = new_x %}
					{% set t0_distance = t0_act_x - t0_new_x %}
					{% set t1_distance = t1_act_x - t1_new_x %}

					# ToDo! Take Toolhead z-offset into account
					# calculate needed z-hop
					{% set calc_z_hop = config_z_hop %}

					# z-hop before toolchange
					DEBUG_ECHO PREFIX="_TOOLCHANGE" MSG="Shifting to T1."
					_ZHOP_BEFORE_TOOLCHANGE Z_HOP={calc_z_hop} T={new_t} SYNC=1 

					# make sure T1 is in its correct parking position
					SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
					G1 X{t1_act_x} F{speed}

					{% if t0_distance >= t1_distance %}
						# copy move
						SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
						G1 X{t0_act_x - (t1_act_x - t1_new_x) + xoffset} Y{new_y + yoffset} F{speed}

						# park T0
						SET_DUAL_CARRIAGE CARRIAGE=0 MODE=PRIMARY
						G1 X{t0_new_x + xoffset} F{speed}

						# move T1
						SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY

					{% elif t0_distance < t1_distance %}
						# copy move
						SET_DUAL_CARRIAGE CARRIAGE=1 MODE=COPY
						G1 X{t0_new_x} Y{new_y + yoffset} F{speed}

						# move T1
						SET_DUAL_CARRIAGE CARRIAGE=1 MODE=PRIMARY
						G1 X{t1_new_x + xoffset} F{speed}

					{% endif %}

					# offset correction move
					{% if svv.idex_applied_offset != new_t %}
						SET_GCODE_OFFSET X_ADJUST={xoffset} Y_ADJUST={yoffset} MOVE=0 SPEED={speed}
						G1 X{t1_new_x} Y{new_y} F{speed}
						SET_GCODE_OFFSET Z_ADJUST={zoffset} MOVE=1 SPEED={z_speed}
						SAVE_VARIABLE VARIABLE=idex_applied_offset VALUE=1
						RATOS_ECHO PREFIX="IDEX" MSG="Toolhead offset applied for T1: X={xoffset} Y={yoffset} Z={zoffset}"
					{% endif %}

					# ToDo! Take Toolhead z-offset into account
					# calculate needed z-drop
					{% set calc_z_drop = config_z_hop %}

					# z-drop after toolchange
					_ZDROP_AFTER_TOOLCHANGE Z_DROP={calc_z_drop} T={new_t} SYNC=1 

				{% endif %}

				# activate new extruder
				ACTIVATE_EXTRUDER EXTRUDER=extruder{'' if new_t == 0 else new_t}

			{% endif %}
		{% endif %}

		# reset acceleration
		SET_VELOCITY_LIMIT ACCEL={max_accel} MINIMUM_CRUISE_RATIO=0.5 SQUARE_CORNER_VELOCITY={square_corner_velocity}

	{% endif %}


[gcode_macro _ZHOP_BEFORE_TOOLCHANGE]
gcode:
	# parameters 
	{% set t = params.T|int %}
	{% set sync = params.SYNC|default(0)|int %}
	{% set z_hop = params.Z_HOP|default(0.0)|float %}
	{% set is_printing_gcode = true if printer["gcode_macro START_PRINT"].is_printing_gcode|default(true)|lower == 'true' else false %}

	# config
	{% set speed = printer["gcode_macro RatOS"].toolchange_zspeed|default(15)|float %}
	{% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
	{% set combined_zhop = true if printer["gcode_macro RatOS"].toolchange_combined_zhop|default(true)|lower == 'true' else false %}
	{% set both_toolheads = true if printer["gcode_macro START_PRINT"].both_toolheads|default(true)|lower == 'true' else false %}
	{% set e = printer["gcode_macro RatOS"].toolchange_retraction %}

	DEBUG_ECHO PREFIX="_ZHOP_BEFORE_TOOLCHANGE" MSG="T={t} BOTH_TOOLHEADS={both_toolheads} SYNC={sync} IS_PRINTING_GCODE={is_printing_gcode} Z_HOP={z_hop}"

	G91         # relative positioning
	M82         # absolute extrusion
	G92 E0      # reset extrusion distance

	# snyc extruders
	{% if sync == 1 and t == 0 and is_printing_gcode and both_toolheads %}
		{% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
			DEBUG_ECHO PREFIX="_ZHOP_BEFORE_TOOLCHANGE" MSG="SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1"
			SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1
		{% endif %}
	{% elif sync == 1 and t == 1 and is_printing_gcode and both_toolheads %}
		{% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
			DEBUG_ECHO PREFIX="_ZHOP_BEFORE_TOOLCHANGE" MSG="SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder"
			SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
		{% endif %}
	{% endif %}

	# z-hop
	{% if combined_zhop and is_printing_gcode %}
		DEBUG_ECHO PREFIX="_ZHOP_BEFORE_TOOLCHANGE" MSG="COMBINED_ZHOP G1 Z+{z_hop} E-{e} F{speed * 60}"
		G1 Z+{z_hop} E-{e} F{speed * 60}
	{% else %}
		DEBUG_ECHO PREFIX="_ZHOP_BEFORE_TOOLCHANGE" MSG="ZHOP G1 Z+{z_hop} F{speed * 60}"
		G1 Z+{z_hop} F{speed * 60}
		{% if is_printing_gcode %}
			DEBUG_ECHO PREFIX="_ZHOP_BEFORE_TOOLCHANGE" MSG="RETRACT G1 E-{e} F{feedrate}"
			G1 E-{e} F{feedrate}
		{% endif %}
	{% endif %}

	# unsync extruder
	{% if sync == 1 and t == 0 and is_printing_gcode and both_toolheads %}
		{% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
			DEBUG_ECHO PREFIX="_ZHOP_BEFORE_TOOLCHANGE" MSG="UNSYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder"
			SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
		{% endif %}
	{% elif sync == 1 and t == 1 and is_printing_gcode and both_toolheads %}
		{% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
			DEBUG_ECHO PREFIX="_ZHOP_BEFORE_TOOLCHANGE" MSG="UNSYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1"
			SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
		{% endif %}
	{% endif %}

	G90                    # absolute positioning
	G92 E0                 # reset extrusion distance
	_SET_EXTRUSION_MODE    # Set extrusion mode based on user configuration


[gcode_macro _ZDROP_AFTER_TOOLCHANGE]
gcode:
	# parameters 
	{% set t = params.T|int %}
	{% set sync = params.SYNC|default(0)|int %}
	{% set z_drop = params.Z_DROP|default(0.0)|float %}
	{% set is_printing_gcode = true if printer["gcode_macro START_PRINT"].is_printing_gcode|default(true)|lower == 'true' else false %}
	
	# config
	{% set speed = printer["gcode_macro RatOS"].toolchange_zspeed|default(15)|float %}
	{% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}
	{% set combined_zhop = true if printer["gcode_macro RatOS"].toolchange_combined_zhop|default(true)|lower == 'true' else false %}
	{% set both_toolheads = true if printer["gcode_macro START_PRINT"].both_toolheads|default(true)|lower == 'true' else false %}
	{% set e = printer["gcode_macro RatOS"].toolchange_extrusion %}

	DEBUG_ECHO PREFIX="_ZDROP_AFTER_TOOLCHANGE" MSG="T={t} BOTH_TOOLHEADS={both_toolheads} SYNC={sync} IS_PRINTING_GCODE={is_printing_gcode} Z_DROP={z_drop}"

	G91       # relative positioning
	M82       # absolute extrusion
	G92 E0    # reset extrusion distance

	# snyc extruders
	{% if sync == 1 and t == 0 and is_printing_gcode and both_toolheads %}
		{% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
			DEBUG_ECHO PREFIX="_ZDROP_AFTER_TOOLCHANGE" MSG="SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1"
			SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder1
		{% endif %}
	{% elif sync == 1 and t == 1 and is_printing_gcode and both_toolheads %}
		{% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
			DEBUG_ECHO PREFIX="_ZDROP_AFTER_TOOLCHANGE" MSG="SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder"
			SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder
		{% endif %}
	{% endif %}

	# z-drop
	{% if combined_zhop and is_printing_gcode %}
		DEBUG_ECHO PREFIX="_ZDROP_AFTER_TOOLCHANGE" MSG="COMBINED_ZDROP G1 Z-{z_drop} E{e} F{speed * 60}"
		G1 Z-{z_drop} E{e} F{speed * 60}
	{% else %}
		DEBUG_ECHO PREFIX="_ZDROP_AFTER_TOOLCHANGE" MSG="ZDROP G1 Z-{z_drop} F{speed * 60}"
		G1 Z-{z_drop} F{speed * 60}
		{% if is_printing_gcode %}
			DEBUG_ECHO PREFIX="_ZDROP_AFTER_TOOLCHANGE" MSG="EXTRUDE G1 E{e} F{feedrate}"
			G1 E{e} F{feedrate}
		{% endif %}
	{% endif %}

	# unsync extruder
	{% if sync == 1 and t == 0 and is_printing_gcode and both_toolheads %}
		{% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
			DEBUG_ECHO PREFIX="_ZDROP_AFTER_TOOLCHANGE" MSG="UNSYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder"
			SYNC_EXTRUDER_MOTION EXTRUDER=extruder MOTION_QUEUE=extruder
		{% endif %}
	{% elif sync == 1 and t == 1 and is_printing_gcode and both_toolheads %}
		{% if printer['extruder'].can_extrude|lower == 'true' and printer['extruder1'].can_extrude|lower == 'true' %}
			DEBUG_ECHO PREFIX="_ZDROP_AFTER_TOOLCHANGE" MSG="UNSYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1"
			SYNC_EXTRUDER_MOTION EXTRUDER=extruder1 MOTION_QUEUE=extruder1
		{% endif %}
	{% endif %}

	G90                    # absolute positioning
	G92 E0                 # reset extrusion distance
	_SET_EXTRUSION_MODE    # Set extrusion mode based on user configuration

[gcode_macro _EXTRUDE]
gcode:
	# parameters 
	{% set t = params.T|int %}

	# config
	{% set e = printer["gcode_macro RatOS"].toolchange_extrusion %}
	{% set feedrate = printer["gcode_macro RatOS"].toolchange_feedrate %}

	DEBUG_ECHO PREFIX="_EXTRUDE" MSG="G1 E{e} F{feedrate * 60}"

	# extrude
	G91                             # relative positioning
	M82                             # absolute extrusion
	G92 E0                          # reset extrusion distance
	G1 E{e} F{feedrate * 60}        # retract
	G90                             # absolute positioning
	G92 E0                          # reset extrusion distance
	_SET_EXTRUSION_MODE             # Set extrusion mode based on user configuration

#####
# TOOLHEAD HELPER
####
[gcode_macro _DEACTIVATE_TOOLHEAD]
gcode:
	# parameters 
	{% set toolhead = params.TOOLHEAD|int %}  

	DEBUG_ECHO PREFIX="_DEACTIVATE_TOOLHEAD" MSG="TOOLHEAD {toolhead}"

	# turn part cooling fan off
	{% if toolhead == 0 %}
		SET_FAN_SPEED FAN=part_fan_t0 SPEED=0
	{% else %}
		SET_FAN_SPEED FAN=part_fan_t1 SPEED=0
	{% endif %}
	# Update core Klipper's fan speed to the fan speed of the active toolhead
	# Only do this if you have a sacrificial [fan] section
	M106.1 S0

	# turn hotend heater off
	M104 S0 T{toolhead}

	# visual feedback
	_LED_DEACTIVATE_TOOLHEAD TOOLHEAD={toolhead}


[delayed_gcode _INIT_TOOLHEADS]
initial_duration: 0.1
gcode:
	{% if printer["dual_carriage"] is defined %}

		# config 
		{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|int %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}
		SAVE_VARIABLE VARIABLE=idex_applied_offset VALUE={default_toolhead}

		# activate IDEX default
		_IDEX_SINGLE INIT=1

		# dual carriage safe distance sanity check
		{% if printer.configfile.settings.dual_carriage.safe_distance is defined %}
			{% if printer.configfile.settings.dual_carriage.safe_distance|float < 50 %}
				{ action_emergency_stop("Dual carriage safe_distance seems to be too low!") }
			{% endif %}
		{% else %}
			{ action_emergency_stop("Dual carriage safe_distance not defined!") }
		{% endif %}

	{% endif %}

[gcode_macro _SET_TOOLHEAD_OFFSET]
gcode:
	# parameters 
	{% set t = params.T|int %}  
	{% set move = params.MOVE|default(0)|int %}  

	# echo
	DEBUG_ECHO PREFIX="_SET_TOOLHEAD_OFFSET" MSG="T={t} MOVE={move}"

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# config 
	{% set speed = printer["gcode_macro RatOS"].toolchange_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# set offset
	{% if "xyz" not in printer.toolhead.homed_axes %}
		{% set move = 0 %}  
	{% endif %}
	{% if svv.idex_applied_offset != t %}
		{% if t != printer["gcode_macro RatOS"].default_toolhead|int %}
			DEBUG_ECHO PREFIX="_SET_TOOLHEAD_OFFSET" MSG="SET_GCODE_OFFSET X_ADJUST={(-svv.idex_xoffset)} Y_ADJUST={(-svv.idex_yoffset)} MOVE={move} SPEED={speed}"
			SET_GCODE_OFFSET X_ADJUST={(-svv.idex_xoffset)} Y_ADJUST={(-svv.idex_yoffset)} MOVE={move} SPEED={speed}
			DEBUG_ECHO PREFIX="_SET_TOOLHEAD_OFFSET" MSG="SET_GCODE_OFFSET Z_ADJUST={(-svv.idex_zoffset)} MOVE={move} SPEED={z_speed}"
			SET_GCODE_OFFSET Z_ADJUST={(-svv.idex_zoffset)} MOVE={move} SPEED={z_speed}
		{% else %}
			DEBUG_ECHO PREFIX="_SET_TOOLHEAD_OFFSET" MSG="SET_GCODE_OFFSET X_ADJUST={svv.idex_xoffset} Y_ADJUST={svv.idex_yoffset} MOVE={move} SPEED={speed}"
			SET_GCODE_OFFSET X_ADJUST={svv.idex_xoffset} Y_ADJUST={svv.idex_yoffset} MOVE={move} SPEED={speed}
			DEBUG_ECHO PREFIX="_SET_TOOLHEAD_OFFSET" MSG="SET_GCODE_OFFSET Z_ADJUST={svv.idex_zoffset} MOVE={move} SPEED={z_speed}"
			SET_GCODE_OFFSET Z_ADJUST={svv.idex_zoffset} MOVE={move} SPEED={z_speed}
		{% endif %}
		RATOS_ECHO PREFIX="IDEX" MSG="Toolhead offset applied for T{t}"
		SAVE_VARIABLE VARIABLE=idex_applied_offset VALUE={t}
	{% endif %}

[gcode_macro TOOLSHIFT_CONFIG]
gcode:
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_travel_speed VALUE={params.SPEED|default(300)}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_travel_accel VALUE={params.ACCEL|default(5000)}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_retraction VALUE={params.RETRACT|default(0.8)}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_extrusion VALUE={params.EXTRUDE|default(0.8)}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_feedrate VALUE={params.FEEDRATE|default(7200)}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_zhop VALUE={params.ZHOP|default(1.0)|float}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_combined_zhop VALUE={true if params.COMBINED_ZHOP|default(0)|int == 1 else false}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_sync_fans VALUE={true if params.SYNC_FANS|default(0)|int == 1 else false}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_dynamic_switch_time VALUE={params.DYNAMIC_SWITCH_TIME|default(180)}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_toolhead_standby VALUE={true if params.TOOLHEAD_STANDBY|default(0)|int == 1 else false}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_standby_temp VALUE={params.STANDBY_TEMP|default(0)}
	SET_GCODE_VARIABLE MACRO=RatOS VARIABLE=toolchange_wake_up_purge VALUE={params.WAKE_UP_PURGE|default(0)}

# this fixes a superslicer issue
# only the currently active extruders temp got changed after the first layer.
# call this from the slicers change layer custom gcode 
[gcode_macro _LAYER_CHANGE]
variable_t: 0
variable_layer_number: 1                  
variable_extruder_other_layer_temp: 0     
variable_extruder_other_layer_temp_1: 0   
gcode:
	{% if printer["gcode_macro _LAYER_CHANGE"].layer_number is defined %}
		{% set layer_number = printer["gcode_macro _LAYER_CHANGE"].layer_number|int %}
		{% if printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp is defined %}
			{% if layer_number == 2 %}
				{% set t = printer["gcode_macro _LAYER_CHANGE"].t|int %}
				{% set both_toolheads = true if printer["gcode_macro START_PRINT"].both_toolheads|default(true)|lower == 'true' else false %}
				{% set extruder_other_layer_temp = printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp|float %}
				{% set extruder_other_layer_temp_1 = printer["gcode_macro _LAYER_CHANGE"].extruder_other_layer_temp_1|float %}
				{% if t == 0 or both_toolheads %}
					M104 S{extruder_other_layer_temp} T0
				{% endif %}
				{% if t == 1 or both_toolheads %}
					M104 S{extruder_other_layer_temp_1} T1
				{% endif %}
			{% endif %}
		{% endif %}
		SET_GCODE_VARIABLE MACRO=_LAYER_CHANGE VARIABLE=layer_number VALUE={layer_number + 1}
	{% endif %}

