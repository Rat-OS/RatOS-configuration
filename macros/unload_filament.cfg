# WARNING: DO NOT EDIT THIS FILE
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

[gcode_macro RatOS]
variable_runout_park_in: "front"     # back|front|center = gantry parking position if a runout or clog has been detected
# variable_runout_park_x: 50         # float = if configured the x position of the toolhead. if not configured it will park in the middle

#####
# UNLOAD FILAMENT ENTRY POINTS
#####
[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
variable_ignore_min_extrude_temp: True                # needed for fluidd
gcode:
	_LEARN_MORE_FILAMENT

	# parameter
	{% set temp = params.TEMP|default(220)|int %}
	{% set toolhead = params.TOOLHEAD|default(-1)|int %}
	{% set filament_name = params._NAME|default('')|string %}
	{% set filament_type = params._TYPE|default('')|string %}

	{% set temp = params.TEMP|default(220)|int %}
	{% if printer["dual_carriage"] is not defined %}
		_DEFAULT_UNLOAD_FILAMENT TEMP={temp} NAME='{filament_name}' TYPE='{filament_type}'
	{% else %}
		{% if not printer.pause_resume.is_paused %}
			{% set toolhead = params.TOOLHEAD|default(-1)|int %}
		{% else %}
			{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
			{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
				{action_raise_error("Unloading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
			{% else %}
				{% set paused_idex_mode = printer["gcode_macro PAUSE"].idex_mode|lower %}
				{% if paused_idex_mode == 'copy' or paused_idex_mode == 'mirror' %}
					{% set toolhead = params.TOOLHEAD|default(-1)|int %}
				{% else %}
					{% set toolhead = printer["gcode_macro PAUSE"].idex_toolhead|int %}
				{% endif %}
			{% endif %}
		{% endif %}
		{% if toolhead==0 or toolhead==1 %}
			_IDEX_UNLOAD_FILAMENT TEMP={temp} TOOLHEAD={toolhead} NAME='{filament_name}' TYPE='{filament_type}'
		{% else %}
			RATOS_ECHO MSG="Please select toolhead! 0 = left, 1 = right toolhead"
		{% endif %}
	{% endif %}


[gcode_macro _DEFAULT_UNLOAD_FILAMENT]
description: Unload filament macro for non IDEX printers.
gcode:
	# parameter
	{% set temp = params.TEMP|default(220)|int %}
	{% set filament_name = params.NAME|default('')|string %}
	{% set filament_type = params.TYPE|default('')|string %}

	# config
	{% set color_unknown = printer["gcode_macro RatOS"].status_color_unknown|string %}

	DEBUG_ECHO PREFIX="_DEFAULT_UNLOAD_FILAMENT" MSG="TEMP: {temp}"

	# visual feedback
	_LED_UNLOADING_FILAMENT TOOLHEAD=0

	# save gcode state
	SAVE_GCODE_STATE NAME=unload_state

	# heating extruder
	{% if printer.extruder.temperature|int < temp or printer.extruder.can_extrude|lower == 'false' %}
		# heating extruder
		RATOS_ECHO MSG="Heating extruder to {temp}C... Please wait."
		SET_HEATER_TEMPERATURE HEATER="extruder" TARGET={temp}
	{% endif %}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={temp}

	# wait a bit to be sure filament is completely molten
	G4 P3000

	# unload filament
	_UNLOAD_FILAMENT TOOLHEAD=0 NAME='{filament_name}' TYPE='{filament_type}'

	# restore gcode state
	RESTORE_GCODE_STATE NAME=unload_state

	# set filament data
	SAVE_VARIABLE VARIABLE=t0_filament VALUE="('""', '""', 0)"
	{% if printer["gcode_macro T0"].filament_name is defined and printer["gcode_macro T0"].filament_type is defined and printer["gcode_macro T0"].filament_temp is defined %}
		SET_GCODE_VARIABLE MACRO=T0 VARIABLE=filament_name VALUE='""'
		SET_GCODE_VARIABLE MACRO=T0 VARIABLE=filament_type VALUE='""'
		SET_GCODE_VARIABLE MACRO=T0 VARIABLE=filament_temp VALUE=0
	{% endif %}

	# update frontend
	SET_GCODE_VARIABLE MACRO=T0 VARIABLE=color VALUE='"{color_unknown}"'

	# visual feedback
	_LED_FILAMENT_UNLOADED TOOLHEAD=0


[gcode_macro _IDEX_UNLOAD_FILAMENT]
description: Unload filament macro for IDEX printer.
gcode:
	# parameter
	{% set temp = params.TEMP|default(220)|int %}
	{% set toolhead = params.TOOLHEAD|int %}
	{% set filament_name = params.NAME|default('')|string %}
	{% set filament_type = params.TYPE|default('')|string %}

	# config
	{% set color_unknown = printer["gcode_macro RatOS"].status_color_unknown|string %}

	DEBUG_ECHO PREFIX="_IDEX_UNLOAD_FILAMENT" MSG="TEMP: {temp}, TOOLHEAD: {toolhead}"

	# visual feedback
	_LED_UNLOADING_FILAMENT TOOLHEAD={toolhead}

	# if printer is not homed activate the desired toolhead so the user can extrude and retract manually
	{% if "xyz" not in printer.toolhead.homed_axes %}
		_SELECT_TOOL T={toolhead} X=-1 Y=-1 TOOLSHIFT=false
	{% endif %}

	# get target extruder
	{% set target_extruder = 'extruder%s' % ('' if toolhead == 0 else toolhead) %}

	# activate selected extruder
	ACTIVATE_EXTRUDER EXTRUDER={target_extruder}

	# heating extruder
	{% if not printer.pause_resume.is_paused %}
		{% if printer[target_extruder].temperature|int < temp or printer[target_extruder].can_extrude|lower == 'false' %}
			# heating extruder
			RATOS_ECHO MSG="Heating T{toolhead} to {temp}C... Please wait."
			SET_HEATER_TEMPERATURE HEATER={'extruder' if toolhead == 0 else 'extruder1'} TARGET={temp}
		{% endif %}
		TEMPERATURE_WAIT SENSOR={target_extruder} MINIMUM={temp}
	{% endif %}

	# wait a bit to be sure filament is completely molten
	G4 P3000

	# unload filament
	_UNLOAD_FILAMENT TOOLHEAD={toolhead} NAME='{filament_name}' TYPE='{filament_type}'

	# set filament data
	SAVE_VARIABLE VARIABLE=t{toolhead}_filament VALUE="('""', '""', 0)"
	{% if printer["gcode_macro T%s" % toolhead].filament_name is defined and printer["gcode_macro T%s" % toolhead].filament_type is defined and printer["gcode_macro T%s" % toolhead].filament_temp is defined %}
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_name VALUE='""'
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_type VALUE='""'
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_temp VALUE=0
	{% endif %}

	# update frontend
	SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=color VALUE='"{color_unknown}"'

	# visual feedback
	_LED_FILAMENT_UNLOADED TOOLHEAD={toolhead}


#####
# UNLOAD FILAMENT MACROS 
#####
[gcode_macro _UNLOAD_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set filament_name = params.NAME|default('')|string %}
	{% set filament_type = params.TYPE|default('')|string %}

	DEBUG_ECHO PREFIX="_UNLOAD_FILAMENT" MSG="TOOLHEAD: {toolhead}"

	# unload filament
	_MOVE_TO_LOADING_POSITION TOOLHEAD={toolhead}
	_UNLOAD_FILAMENT_FROM_NOZZLE_TO_COOLING_ZONE TOOLHEAD={toolhead} NAME='{filament_name}' TYPE='{filament_type}'
	_UNLOAD_FILAMENT_FROM_COOLING_ZONE_TO_EXTRUDER TOOLHEAD={toolhead}
	_CLEANING_MOVE TOOLHEAD={toolhead}


[gcode_macro _UNLOAD_FILAMENT_FROM_NOZZLE_TO_COOLING_ZONE]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set filament_name = params.NAME|default('')|string %}
	{% set filament_type = params.TYPE|default('')|string %}

	DEBUG_ECHO PREFIX="_UNLOAD_FILAMENT_FROM_NOZZLE_TO_COOLING_ZONE" MSG="TOOLHEAD: {toolhead}"
	RATOS_ECHO MSG="Unloading filament from nozzle to cooling zone... Please wait!"

	_PURGE_BEFORE_UNLOAD TOOLHEAD={toolhead}

	{% if printer["gcode_macro _UNLOAD_WITHOUT_TIP_FORMING"] is defined %}
		# one can define a macro thats getting called instead of the built in tip forming macros
		_UNLOAD_WITHOUT_TIP_FORMING TOOLHEAD={toolhead} NAME='{filament_name}' TYPE='{filament_type}'
	{% else %}
		_UNLOAD_WITH_TIP_FORMING TOOLHEAD={toolhead} NAME='{filament_name}' TYPE='{filament_type}'
	{% endif %}

	G4 P3000      # wait for the filament to be solidified


[gcode_macro _UNLOAD_FILAMENT_FROM_COOLING_ZONE_TO_EXTRUDER]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set extruder_load_speed = printer["gcode_macro T%s" % toolhead].extruder_load_speed|float * 60 %}
	{% set extruder_gear_to_cooling_position_distance = printer["gcode_macro T%s" % toolhead].extruder_gear_to_cooling_position_distance|float %}
	{% set tooolhead_sensor_to_extruder_gear_distance = printer["gcode_macro T%s" % toolhead].tooolhead_sensor_to_extruder_gear_distance|float %}

	DEBUG_ECHO PREFIX="_UNLOAD_FILAMENT_FROM_COOLING_ZONE_TO_EXTRUDER" MSG="TOOLHEAD: {toolhead}"

	# eject filament       
	G0 E-{extruder_gear_to_cooling_position_distance + tooolhead_sensor_to_extruder_gear_distance + 50} F{extruder_load_speed}

	RATOS_ECHO MSG="Filament unloaded! Please inspect the tip of the filament before reloading."


#####
# FILAMENT TIP FORMING
#####
[gcode_macro _UNLOAD_WITH_TIP_FORMING]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}                   # the toolhead 0,1,2,...
	{% set filament_name = params.NAME|default('')|string %}   # the slicer filament profile type like PLA, PETG, .....
	{% set filament_type = params.TYPE|default('')|string %}   # the slicer filament profile name

	# config
	{% set hotend_type = printer["gcode_macro T%s" % toolhead].hotend_type|default("HF")|lower %}
	{% set has_cht_nozzle = true if params.CHT_NOZZLE|default(false)|lower == 'true' else false %}

	# echo
	DEBUG_ECHO PREFIX="_UNLOAD_WITH_TIP_FORMING" MSG="TOOLHEAD: {toolhead}, HOTEND_TYPE: {hotend_type}, CHT_NOZZLE: {has_cht_nozzle}"
	RATOS_ECHO PREFIX="_UNLOAD_WITH_TIP_FORMING" MSG={filament_name}

	# select forming
	{% if filament_name == '"Prusament PETG @V-Minion"' %}
		_TIP_FORMING RETRACT_LENGTH=18 COOLING_MOVE_LENGTH=10
	{% elif filament_name == '"Nobufil PETG @V-Minion"' %}
		_TIP_FORMING RETRACT_LENGTH=18 COOLING_MOVE_LENGTH=10
	{% else %}
		# fallback
		RATOS_ECHO PREFIX="_UNLOAD_WITH_TIP_FORMING" MSG="Filament profile not found!"
		_UNLOAD_UNKNOWN_FILAMENT TOOLHEAD={toolhead}
	{% endif %}


[gcode_macro _UNLOAD_UNKNOWN_FILAMENT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# config
	{% set hotend_type = printer["gcode_macro T%s" % toolhead].hotend_type|default("HF")|lower %}
	{% set has_cht_nozzle = true if params.CHT_NOZZLE|default(false)|lower == 'true' else false %}

	# echo
	DEBUG_ECHO PREFIX="_UNLOAD_UNKNOWN_FILAMENT" MSG="TOOLHEAD: {toolhead}, HOTEND_TYPE: {hotend_type}, CHT_NOZZLE: {has_cht_nozzle}"

	# select forming
	{% if hotend_type == "sf" and has_cht_nozzle %}
		_TIP_FORMING RETRACT_LENGTH=18 COOLING_MOVE_LENGTH=10
	{% elif hotend_type == "sf" and not has_cht_nozzle %}
		_TIP_FORMING RETRACT_LENGTH=18 COOLING_MOVE_LENGTH=10
	{% elif hotend_type == "hf" and has_cht_nozzle %}
		_TIP_FORMING RETRACT_LENGTH=18 COOLING_MOVE_LENGTH=10
	{% elif hotend_type == "hf" and not has_cht_nozzle %}
		_TIP_FORMING RETRACT_LENGTH=18 COOLING_MOVE_LENGTH=10
	{% elif hotend_type == "uhf" and has_cht_nozzle %}
		_TIP_FORMING RETRACT_LENGTH=18 COOLING_MOVE_LENGTH=10
	{% elif hotend_type == "uhf" and not has_cht_nozzle %}
		_TIP_FORMING RETRACT_LENGTH=18 COOLING_MOVE_LENGTH=10
	{% endif %}


[gcode_macro _TIP_FORMING]
gcode:
	# cooling parameter
	{% set cooling_moves = params.COOLING_MOVES|default(4)|int %}
	{% set cooling_move_length = params.COOLING_MOVE_LENGTH|default(10)|float %}
	{% set start_cooling_speed = params.START_COOLING_SPEED|default(10)|float * 60 %}
	{% set end_cooling_speed = params.END_COOLING_SPEED|default(50)|float * 60 %}
	{% if cooling_moves == 0 %}
		{% set cooling_move_length = 0 %}
	{% endif %}

	# dipping parameter
	{% set dip = true if params.DIP|default(false)|lower == "true" else false %}
	{% set dip_length = params.DIP_LENGTH|default(22)|float %}
	{% set dip_speed = params.DIP_SPEED|default(30)|float * 60 %}
	{% set dip_retract_speed = params.DIP_RETRACT_SPEED|default(70)|float * 60 %}

	# retraction parameter
	{% set retract_length = params.RETRACT_LENGTH|default(18)|float %}
	{% set start_retract_speed = params.START_RETRACT_SPEED|default(120)|float * 60 %}
	{% set end_retract_speed = params.END_RETRACT_SPEED|default(20)|float * 60 %}

	DEBUG_ECHO PREFIX="_TIP_FORMING" MSG="cooling_moves: {cooling_moves}, cooling_move_length: {cooling_move_length}, start_cooling_speed: {start_cooling_speed}, end_cooling_speed: {end_cooling_speed}, dip: {dip}, dip_length: {dip_length}, dip_speed: {dip_speed}, dip_retract_speed: {dip_retract_speed}, retract_length: {retract_length}, start_retract_speed: {start_retract_speed}, end_retract_speed: {end_retract_speed}"

	M220 S100    # reset any speed override

	# retraction
	G92 E0       # Reset extrusion distance
	{% set retract = retract_length + cooling_move_length / 2 - 15 %}
	G1 E-15 F{start_retract_speed}
	G1 E-{0.7 * retract} F{1.0 * end_retract_speed}
	G1 E-{0.2 * retract} F{0.5 * end_retract_speed}
	G1 E-{0.1 * retract} F{0.3 * end_retract_speed}

	# cooling
	G92 E0       # Reset extrusion distance
	{% if cooling_moves > 0 %}
		{% set i = (end_cooling_speed - start_cooling_speed) / (2 * cooling_moves - 1) %}
		{% for m in range(cooling_moves) %}
			G1 E{cooling_move_length} F{(start_cooling_speed + i * m * 2)}
			G1 E-{cooling_move_length} F{(start_cooling_speed + i * (m * 2 + 1))}
		{% endfor %}
	{% endif %}

	# dipping 
	G92 E0       # Reset extrusion distance
	{% if dip %}
		G1 E{dip_length} F{dip_speed}
		G4 P100
		G1 E-{dip_length} F{dip_retract_speed}
	{% endif %}

	G92 E0      # Reset extrusion distance
	M400        # Wait for moves to finish


#####
# UNLOAD FILAMENT EVENTS 
#####
[gcode_macro _ON_FILAMENT_SENSOR_BUTTON_PRESSED]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	DEBUG_ECHO PREFIX="_ON_FILAMENT_SENSOR_BUTTON_PRESSED" MSG="TOOLHEAD: {toolhead}"

	{% if not printer.virtual_sdcard.is_active %}
		UNLOAD_FILAMENT TOOLHEAD={toolhead}
	{% endif %}


[gcode_macro _ON_TOOLHEAD_FILAMENT_SENSOR_RUNOUT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# Config
	{% set enable_runout_detection = true if printer["gcode_macro T%s" % toolhead].enable_runout_detection|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_ON_TOOLHEAD_FILAMENT_SENSOR_RUNOUT" MSG="TOOLHEAD: {toolhead}"

	{% if enable_runout_detection %}
		_ON_FILAMENT_END TOOLHEAD={toolhead} CLOGGED=false
	{% endif %}


[gcode_macro _ON_TOOLHEAD_FILAMENT_SENSOR_CLOG]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# Config
	{% set enable_clog_detection = true if printer["gcode_macro T%s" % toolhead].enable_clog_detection|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_ON_TOOLHEAD_FILAMENT_SENSOR_CLOG" MSG="TOOLHEAD: {toolhead}"

	{% if enable_clog_detection %}
		_ON_FILAMENT_END TOOLHEAD={toolhead} CLOGGED=true
	{% endif %}


[gcode_macro _ON_BOWDEN_FILAMENT_SENSOR_RUNOUT]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# Config
	{% set enable_runout_detection = true if printer["gcode_macro T%s" % toolhead].enable_runout_detection|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_ON_BOWDEN_FILAMENT_SENSOR_RUNOUT" MSG="TOOLHEAD: {toolhead}"

	{% if enable_runout_detection %}
		_ON_FILAMENT_END TOOLHEAD={toolhead} CLOGGED=false
	{% endif %}


[gcode_macro _ON_BOWDEN_FILAMENT_SENSOR_CLOG]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}

	# Config
	{% set enable_clog_detection = true if printer["gcode_macro T%s" % toolhead].enable_clog_detection|default(true)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_ON_BOWDEN_FILAMENT_SENSOR_CLOG" MSG="TOOLHEAD: {toolhead}"

	{% if enable_clog_detection %}
		_ON_FILAMENT_END TOOLHEAD={toolhead} CLOGGED=true
	{% endif %}


[gcode_macro _ON_FILAMENT_END]
gcode:
	# parameter
	{% set toolhead = params.TOOLHEAD|int %}
	{% set clogged = true if params.CLOGGED|default(false)|lower == 'true' else false %}

	# Config
	{% set unload_after_runout = printer["gcode_macro T%s" % toolhead].unload_after_runout|float %}

	# visual feedback
	{% if clogged %}
		_LED_FILAMENT_CLOG TOOLHEAD={toolhead}
	{% else %}
		_LED_FILAMENT_RUNOUT TOOLHEAD={toolhead}
	{% endif %}

	DEBUG_ECHO PREFIX="_ON_FILAMENT_END" MSG="TOOLHEAD: {toolhead}"

	{% if printer.virtual_sdcard.is_active %}
		{% if not printer.pause_resume.is_paused %}
			PAUSE RUNOUT=True
		{% endif %}
		{% if not clogged and unload_after_runout %}
			UNLOAD_FILAMENT TOOLHEAD={toolhead}
		{% endif %}
		{% if not clogged and printer["dual_carriage"] is defined %}
			{% if printer["gcode_macro _IDEX_JOIN_SPOOLS"].enabled|default(false)|lower == 'true'%}
				_JOIN_SPOOL TOOLHEAD={toolhead}
			{% endif %}
		{% endif %}
	{% endif %}


#####
# UNLOAD FILAMENT EXTRAS
#####
[gcode_macro M600]
description: Executes a color change by pausing the printer an unloading the filament.
gcode:
	PAUSE
	UNLOAD_FILAMENT
	RATOS_ECHO MSG="Please load new filament and resume"


[gcode_macro COLD_PULL]
description: Automated hotend cold pull.
gcode:
	# parameter
	{% set extrusion_temp = params.EXTRUSION_TEMP|default(220)|int %}
	{% set cold_pull_temp = params.COLD_PULL_TEMP|default(80)|int %}
	{% set toolhead = params.TOOLHEAD|default(-1)|int %}

	{% if printer["dual_carriage"] is not defined %}
		{% set toolhead = 0 %}
	{% else %}
		{% if not printer.pause_resume.is_paused %}
			{% set toolhead = params.TOOLHEAD|default(-1)|int %}
		{% else %}
			{% set current_idex_mode = printer["dual_carriage"].carriage_1|lower %}
			{% if current_idex_mode == 'copy' or current_idex_mode == 'mirror' %}
				{action_raise_error("Unloading filament in Copy or Mirror mode is not supported! Select single mode to proceed.")}
			{% else %}
				{% set paused_idex_mode = printer["gcode_macro PAUSE"].idex_mode|lower %}
				{% if paused_idex_mode == 'copy' or paused_idex_mode == 'mirror' %}
					{% set toolhead = params.TOOLHEAD|default(-1)|int %}
				{% else %}
					{% set toolhead = printer["gcode_macro PAUSE"].idex_toolhead|int %}
				{% endif %}
			{% endif %}
		{% endif %}
		{% if toolhead != 0 and toolhead != 1 %}
			{action_raise_error("Please select toolhead! 0 = left, 1 = right toolhead")}
		{% endif %}
	{% endif %}

	# config
	{% set color_unknown = printer["gcode_macro RatOS"].status_color_unknown|string %}

	# visual feedback
	_LED_UNLOADING_FILAMENT TOOLHEAD={toolhead}

	# save gcode state
	SAVE_GCODE_STATE NAME=cold_pull_state

	# if printer is not homed activate the desired toolhead so the user can extrude and retract manually
	{% if "xyz" not in printer.toolhead.homed_axes %}
		_SELECT_TOOL T={toolhead} X=-1 Y=-1 TOOLSHIFT=false
	{% endif %}

	# get target extruder
	{% set target_extruder = 'extruder%s' % ('' if toolhead == 0 else toolhead) %}

	# activate selected extruder
	ACTIVATE_EXTRUDER EXTRUDER={target_extruder}

	# heating extruder to extrusion temp
	RATOS_ECHO MSG="Heating T{toolhead} to {extrusion_temp}C... Please wait."
	SET_HEATER_TEMPERATURE HEATER={'extruder' if toolhead == 0 else 'extruder1'} TARGET={extrusion_temp}
	TEMPERATURE_WAIT SENSOR={target_extruder} MINIMUM={extrusion_temp} MAXIMUM={extrusion_temp + 2}

	# wait a bit to be sure filament is completely molten
	G4 P3000

	# extrude filament
	RATOS_ECHO MSG="extruding..."
	G92 E0       # Reset extrusion distance
	G1 E30 F300  # extrude filament
	G92 E0       # Reset extrusion distance

	# cooling extruder down to cold pull temp
	RATOS_ECHO MSG="Heating T{toolhead} to {cold_pull_temp}C... Please wait."
	SET_HEATER_TEMPERATURE HEATER={'extruder' if toolhead == 0 else 'extruder1'} TARGET={cold_pull_temp}
	TEMPERATURE_WAIT SENSOR={target_extruder} MINIMUM={cold_pull_temp} MAXIMUM={cold_pull_temp + 2}

	# wait a bit to be sure the cold pull temperature has been settled
	G4 P10000

	# cold pull
	RATOS_ECHO MSG="cold pull..."
	FORCE_MOVE STEPPER={target_extruder} DISTANCE=-40 VELOCITY=5 ACCEL=100

	# eject
	RATOS_ECHO MSG="eject filament..."
	FORCE_MOVE STEPPER={target_extruder} DISTANCE=-200 VELOCITY=20 ACCEL=500

	# cooling extruder down
	RATOS_ECHO MSG="cooling down extruder..."
	SET_HEATER_TEMPERATURE HEATER={'extruder' if toolhead == 0 else 'extruder1'} TARGET=0

	# restore gcode state
	RESTORE_GCODE_STATE NAME=cold_pull_state

	# set filament data
	SAVE_VARIABLE VARIABLE=t{toolhead}_filament VALUE="('""', '""', 0)"
	{% if printer["gcode_macro T%s" % toolhead].filament_name is defined and printer["gcode_macro T%s" % toolhead].filament_type is defined and printer["gcode_macro T%s" % toolhead].filament_temp is defined %}
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_name VALUE='""'
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_type VALUE='""'
		SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=filament_temp VALUE=0
	{% endif %}

	# update frontend
	SET_GCODE_VARIABLE MACRO=T{toolhead} VARIABLE=color VALUE='"{color_unknown}"'

	# visual feedback
	_LED_FILAMENT_UNLOADED TOOLHEAD={toolhead}

	# user advice
	CONSOLE_ECHO TITLE="Cold pull finished!" MSG="Please remove the filament from the PTFE tube and cut the end off. Do NOT try to load it again." TYPE="warning"

