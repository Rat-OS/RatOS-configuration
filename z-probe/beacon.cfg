# WARNING. DO NOT EDIT THIS FILE.
# To override settings from this file, you can copy and paste the relevant
# sections into your printer.cfg and change it there.

# Configurator Metadata
# {
#   "type": "static-probe",
#   "title": "Beacon"
# }

#####
# BEACON HARDWARE CONFIGURATION
#####
[beacon]
serial: /dev/beacon
x_offset: 0 
y_offset: 22.5 
mesh_main_direction: x
mesh_runs: 1
speed: 15.
lift_speed: 80.
contact_max_hotend_temperature: 275

# TODO: remove when automatically calculated by configurator
[bed_mesh]
mesh_min: 20,30

#####
# BEACON CONFIGURATION
#####
[gcode_macro RatOS]
variable_beacon_bed_mesh_scv: 25                        # square corner velocity for bed meshing with proximity method
variable_beacon_contact_z_homing: False                 # printer z-homing with contact method
variable_beacon_contact_z_calibration: True             # contact z-calibration before the print starts
                                                        # after changing this variable please run a recalibration before you use the printer  
												        # if you use a smooth PEI sheet turn this feature off

variable_beacon_contact_calibration_location: "center"  # center = center of the build plate
                                                        # front = front center
														# corner = front corner

variable_beacon_contact_calibrate_margin_x: 30          # x-margin if calibrate in front corners
variable_beacon_contact_bed_mesh: False                 # bed mesh with contact method
variable_beacon_contact_bed_mesh_samples: 2             # probe samples for contact bed mesh
variable_beacon_contact_z_tilt_adjust: False            # z-tilt adjust with contact method
variable_beacon_contact_z_tilt_adjust_samples: 2        # probe samples for contact z-tilt adjust
variable_beacon_contact_prime_probing: True             # probe for priming with contact method
variable_beacon_contact_calibration_temp: 150           # nozzle temperature for auto calibration
variable_beacon_contact_expansion_compensation: True    # enables the nozzle thermal expansion compensation
variable_beacon_contact_wipe_before_calibrate: True     # enables a nozzle wipe at Y0 before doing the contact calibration
variable_beacon_scan_compensation_enable: False         # Enables the beacon scan compensation
variable_beacon_scan_compensation_profile: "Contact"    # The contact profile name for the scan compensation
variable_beacon_scan_compensation_probe_count: 15,15    # The contact probe count for the scan compensation


#####
# BEACON COMMON
#####
[delayed_gcode _BEACON_INIT]
initial_duration: 1
gcode:
	# reset nozzle thermal expansion offset
	_BEACON_SET_NOZZLE_TEMP_OFFSET RESET=True

	# migrate deprecated multiplier gcode variable or set default value
	{% set svv = printer.save_variables.variables %}
	{% set nozzle_expansion_coefficient_multiplier = svv.nozzle_expansion_coefficient_multiplier|default(0)|float %}
	{% if nozzle_expansion_coefficient_multiplier == 0 %}
		{% if printer["gcode_macro RatOS"].beacon_contact_expansion_multiplier is not defined %}
			{% set nozzle_expansion_coefficient_multiplier = 1.0 %}
		{% else %}
			{% set nozzle_expansion_coefficient_multiplier = printer["gcode_macro RatOS"].beacon_contact_expansion_multiplier|default(1.0)|float %}
		{% endif %}
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient_multiplier VALUE={nozzle_expansion_coefficient_multiplier}
	{% endif %}
	{% if printer["gcode_macro RatOS"].beacon_contact_expansion_multiplier is defined %}
		CONSOLE_ECHO TITLE="Deprecated gcode variable" TYPE="warning" MSG={'"Please remove the variable beacon_contact_expansion_multiplier from your config file."'}
	{% endif %}


#####
# BEACON CALIBRATION
#####
[gcode_macro BEACON_RATOS_CALIBRATION]
gcode:
	RATOS_ECHO MSG="Did you mean BEACON_RATOS_CALIBRATE?"


#####
# BEACON CALIBRATION
#####
[gcode_macro BEACON_RATOS_CALIBRATE]
gcode:
	# parameters
	{% set bed_temp = params.BED_TEMP|default(85)|int %}
	{% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}

	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# calibration
	BEACON_INITIAL_CALIBRATION _AUTOMATED=True
	BEACON_POKE_TEST _AUTOMATED=True
	_BEACON_CHECK_POKE
	{% if printer["dual_carriage"] is not defined %}
		BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET _AUTOMATED=True
	{% endif %}

	# heat chamber if needed  
	{% if chamber_temp > 0 %}
		_CHAMBER_HEATER_ON CHAMBER_TEMP={chamber_temp}
	{% endif %}

	# final calibration 
	BEACON_FINAL_CALIBRATION _AUTOMATED=True BED_TEMP={bed_temp} CHAMBER_TEMP={chamber_temp}

	# scan calibration 
	BEACON_MEASURE_GANTRY_TWIST
	_BEACON_MAYBE_SCAN_COMPENSATION

	# turn bed and extruder heaters off 
	SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET=0
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0

	# turn off chamber heater  
	{% if chamber_temp > 0 %}
		_CHAMBER_HEATER_OFF
	{% endif %}

	# echo
	{% if printer["dual_carriage"] is not defined %}
		_BEACON_ECHO_NOZZLE_TEMP_OFFSETS
	{% endif %}
	_BEACON_ECHO_GANTRY_TWIST
	_BEACON_ECHO_POKE
	RATOS_ECHO MSG="Beacon calibration finished!"

	# visual feedback
	_LED_BEACON_CALIBRATION_END

	# save config
	RATOS_ECHO MSG="Saving config and restarting klipper..."
	SAVE_CONFIG

[gcode_macro BEACON_INITIAL_CALIBRATION]
gcode:
	# parameters
	{% set automated = true if params._AUTOMATED|default(false)|lower == 'true' else false %}

	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set center_x = printable_x_max / 2 %}
	{% set center_y = printable_y_max / 2 %}

	# home x and y axis if not homed already
	MAYBE_HOME X=True Y=True

	# visual feedback
	_LED_BEACON_CALIBRATION_START

	# move to printable center
	G1 X{center_x} Y{center_y} F{(speed)}

	# auto calibrate beacon 
	BEACON_AUTO_CALIBRATE

	# raise toolhead to safe z-height
	G0 Z{z_hop} F{z_speed}

	# echo
	RATOS_ECHO MSG="Initial beacon contact calibration finished!"
	{% if not automated %}
		_CONSOLE_SAVE_CONFIG
	{% endif %}

	# visual feedback
	{% if not automated %}
		_LED_BEACON_CALIBRATION_END
	{% endif %}


[gcode_macro BEACON_FINAL_CALIBRATION]
gcode:
	# parameters
	{% set bed_temp = params.BED_TEMP|default(85)|int %}
	{% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}
	{% set automated = true if params._AUTOMATED|default(false)|lower == 'true' else false %}

	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set bed_heat_soak_time = printer["gcode_macro RatOS"].bed_heat_soak_time|default(0)|int %}

	# home and abl the printer if needed  
	_BEACON_HOME_AND_ABL

	# heat chamber if needed  
	{% if chamber_temp > 0 and not automated %}
		_CHAMBER_HEATER_ON CHAMBER_TEMP={chamber_temp}
	{% endif %}

	# visual feedback
	_LED_BEACON_CALIBRATION_START

	# lower toolhead to heat soaking z height
	G0 Z2 F{z_speed}

	# echo
	RATOS_ECHO MSG="Waiting for calibration temperature..."

	# heat up and wait for bed and extruder calibration temperatures 
	SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET=150
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp} MAXIMUM={(bed_temp + 5)}
	TEMPERATURE_WAIT SENSOR={'extruder' if default_toolhead == 0 else 'extruder1'} MINIMUM=150 MAXIMUM=155

	# Wait for bed thermal expansion
	{% if bed_heat_soak_time > 0 %}
		RATOS_ECHO MSG="Heat soaking bed for {bed_heat_soak_time} seconds..."
		G4 P{(bed_heat_soak_time * 1000)}
	{% endif %}
	
	# auto calibrate beacon 
	BEACON_AUTO_CALIBRATE

	# turn bed and extruder heaters off 
	{% if not automated %}
		SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET=0
		SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
	{% endif %}

	# turn off chamber heater  
	{% if chamber_temp > 0 and not automated %}
		_CHAMBER_HEATER_OFF
	{% endif %}

	# raise toolhead to safe z-height
	G0 Z{z_hop} F{z_speed}

	# echo
	RATOS_ECHO MSG="Final beacon contact calibration finished!"
	{% if not automated %}
		_CONSOLE_SAVE_CONFIG
	{% endif %}

	# visual feedback
	{% if not automated %}
		_LED_BEACON_CALIBRATION_END
	{% endif %}


#####
# BEACON POKE TEST
#####
[gcode_macro BEACON_POKE_TEST]
variable_poke_result_1: -1
variable_poke_result_2: -1
variable_poke_result_3: -1
variable_poke_result_4: -1
variable_poke_result_5: -1
gcode:
	# parameters
	{% set automated = true if params._AUTOMATED|default(false)|lower == 'true' else false %}

	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}

	# reset results
	SET_GCODE_VARIABLE MACRO=BEACON_POKE_TEST VARIABLE=poke_result_1 VALUE=-1
	SET_GCODE_VARIABLE MACRO=BEACON_POKE_TEST VARIABLE=poke_result_2 VALUE=-1
	SET_GCODE_VARIABLE MACRO=BEACON_POKE_TEST VARIABLE=poke_result_3 VALUE=-1
	SET_GCODE_VARIABLE MACRO=BEACON_POKE_TEST VARIABLE=poke_result_4 VALUE=-1
	SET_GCODE_VARIABLE MACRO=BEACON_POKE_TEST VARIABLE=poke_result_5 VALUE=-1

	# home and abl the printer if needed  
	_BEACON_HOME_AND_ABL

	# visual feedback
	_LED_BEACON_CALIBRATION_START

	# lower toolhead to poking z-height
	G0 Z5 F{z_speed}

	# poke the bed
	_BEACON_PROBE_POKE
	_BEACON_STORE_POKE I=1

	_BEACON_PROBE_POKE
	_BEACON_STORE_POKE I=2

	_BEACON_PROBE_POKE
	_BEACON_STORE_POKE I=3

	_BEACON_PROBE_POKE
	_BEACON_STORE_POKE I=4

	_BEACON_PROBE_POKE
	_BEACON_STORE_POKE I=5

	# raise toolhead to safe z-height
	G0 Z{z_hop} F{z_speed}

	# echo
	RATOS_ECHO MSG="Beacon poke test finished!"
	{% if not automated %}
		_BEACON_ECHO_POKE
	{% endif %}

	# visual feedback
	{% if not automated %}
		_LED_BEACON_CALIBRATION_END
	{% endif %}


[gcode_macro _BEACON_PROBE_POKE]
gcode:
	BEACON_POKE speed=3 top=5 bottom=-0.6
	BEACON_QUERY


[gcode_macro _BEACON_STORE_POKE]
gcode:
	# parameters
	{% set i = params.I|default(1)|int %}

	# get last poke result
	{% set last_z = printer.beacon.last_poke_result|default(0)|float %}

	# store beacon result
	{% if printer.beacon.last_poke_result|lower != "none" %}
		{% if printer.beacon.last_poke_result.error == 0 %}
			SET_GCODE_VARIABLE MACRO=BEACON_POKE_TEST VARIABLE={"poke_result_%s" % i} VALUE={printer.beacon.last_poke_result.latency}
		{% endif %}
	{% endif %}


[gcode_macro _BEACON_CHECK_POKE]
gcode:
	# get results
	{% set p1 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_1|int %}
	{% set p2 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_2|int %}
	{% set p3 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_3|int %}
	{% set p4 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_4|int %}
	{% set p5 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_5|int %}

	# check for poke errors
	{% if p1 == -1 or p2 == -1 or p3 == -1 or p4 == -1 or p5 == -1 %}
		_LED_BEACON_CALIBRATION_ERROR
		{ action_raise_error("Beacon poke test error!") }
	{% endif %}

	# check average result
	{% set avg = (p1 + p2 + p3 + p4 + p5) / 5 %}
	{% if avg > 6 %}
		_LED_BEACON_CALIBRATION_ERROR
		{ action_raise_error("Beacon poke test failed!") }
	{% endif %}


[gcode_macro _BEACON_ECHO_POKE]
gcode:
	# get results
	{% set p1 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_1|int %}
	{% set p2 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_2|int %}
	{% set p3 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_3|int %}
	{% set p4 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_4|int %}
	{% set p5 = printer["gcode_macro BEACON_POKE_TEST"].poke_result_5|int %}

	# get average latency
	{% set avg = (p1 + p2 + p3 + p4 + p5) / 5 %}

	# get note
	{% if avg <= 1 %}
		{% set type = "success" %}
		{% set note = "Extremely low noise, rarely achieved" %}
	{% elif avg > 1 and avg <= 4 %}
		{% set type = "info" %}
		{% set note = "Excellent performance for a typical printer" %}
	{% elif avg > 4 and avg <= 8 %}
		{% set type = "warning" %}
		{% set note = "Acceptable performance, machine may have considerable cyclic axis noise" %}
	{% elif avg > 8 and avg <= 11 %}
		{% set type = "alert" %}
		{% set note = "Not ideal, may want to verify proper mounting or use thinner stackups" %}
	{% elif avg > 11 %}
		{% set type = "alert" %}
		{% set note = "Reason for concern, present setup may be risky to continue with" %}
	{% endif %}

	# console echo
	CONSOLE_ECHO TITLE="Beacon poke test result:" TYPE={type} MSG={'"Average latency: %.2f_N_%s"' % (avg, note)}


#####
# BEACON NOZZLE TEMPERATURE OFFSET CALIBRATION
#####
[gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET]
variable_reference_z: 0.0
gcode:
	# parameters
	{% set automated = true if params._AUTOMATED|default(false)|lower == 'true' else false %}

	# config
	{% set test_margin = 30 %}
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# beacon config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}

	{% if beacon_contact_z_calibration %}

		# home and abl the printer if needed  
		_BEACON_HOME_AND_ABL

		# visual feedback
		_LED_BEACON_CALIBRATION_START

		# echo
		RATOS_ECHO PREFIX="BEACON" MSG="Nozzle temperature offset calibration..."

		# settle the mechanics down  
		{% for i in range(10) %}
			beacon_poke speed=3 top=5 bottom=-0.6
		{% endfor %}

		# get and set start temperature offset 
		_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
		_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

		# get and set end temperature offset
		_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
		_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

		# get and set start temperature offset 
		_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=150
		_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=150

		# get and set end temperature offset
		_BEACON_PROBE_NOZZLE_TEMP_OFFSET TEMP=250
		_BEACON_STORE_NOZZLE_TEMP_OFFSET TEMP=250

		# move back to home position
		G0 Z{z_hop} F{z_speed}
		G0 X{safe_home_x} Y{safe_home_y} F{speed}

		# turn heater off
		SET_HEATER_TEMPERATURE HEATER={"extruder" if default_toolhead == 0 else "extruder1"} TARGET=0

		# echo results
		{% if not automated %}
			_BEACON_ECHO_NOZZLE_TEMP_OFFSETS
		{% endif %}

		# visual feedback
		{% if not automated %}
			_LED_BEACON_CALIBRATION_END
		{% endif %}

	{% endif %}


[gcode_macro _BEACON_PROBE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# config
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set hotend_heat_soak_time = printer["gcode_macro RatOS"].hotend_heat_soak_time|default(0)|int %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get reference point coordinates
	{% set idex_zcontrolpoint = svv.idex_zcontrolpoint|default(150)|float %}

	# wait for noozle to reach the probing temperature
	RATOS_ECHO PREFIX="BEACON" MSG="Waiting for nozzle to reach {temp}°C..."
	SET_HEATER_TEMPERATURE HEATER={"extruder" if default_toolhead == 0 else "extruder1"} TARGET={temp}
	TEMPERATURE_WAIT SENSOR={"extruder" if default_toolhead == 0 else "extruder1"} MINIMUM={temp} MAXIMUM={temp + 2}

	# Wait for extruder thermal expansion
	{% if hotend_heat_soak_time > 0 %}
		RATOS_ECHO MSG="Heat soaking hotend for {hotend_heat_soak_time} seconds..."
		G4 P{(hotend_heat_soak_time * 1000)}
	{% endif %}

	# probe
	RATOS_ECHO PREFIX="BEACON" MSG="Probing with nozzle temperature {temp}°C..."
	PROBE PROBE_METHOD=contact PROBE_SPEED=3 LIFT_SPEED=15 SAMPLES=5 SAMPLE_RETRACT_DIST=3 SAMPLES_TOLERANCE=0.005 SAMPLES_TOLERANCE_RETRIES=10 SAMPLES_RESULT=median
	BEACON_QUERY

	# raise z
	G0 Z5 F{z_speed}


[gcode_macro _BEACON_STORE_NOZZLE_TEMP_OFFSET]
gcode:
	# parameters
	{% set temp = params.TEMP|int %}

	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# get last probe result
	{% set last_z = printer.beacon.last_z_result|default(0)|float %}

	# set temperature offset
	{% if temp == 150 %}
		SET_GCODE_VARIABLE MACRO=BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET VARIABLE=reference_z VALUE={last_z}
	{% else %}
		{% set reference_z = printer["gcode_macro BEACON_CALIBRATE_NOZZLE_TEMP_OFFSET"].reference_z|default(0)|float %}
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient_t{default_toolhead} VALUE={(last_z - reference_z)}
	{% endif %}


[gcode_macro _BEACON_ECHO_NOZZLE_TEMP_OFFSETS]
gcode:
	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	# echo
	{% if default_toolhead == 0 %}
		CONSOLE_ECHO TYPE="info" MSG={'"T0 expansion coefficient %.6f"' % svv.nozzle_expansion_coefficient_t0}
	{% else %}
		CONSOLE_ECHO TYPE="info" MSG={'"T1 expansion coefficient %.6f"' % svv.nozzle_expansion_coefficient_t1}
	{% endif %}


#####
# BEACON NOZZLE TEMPERATURE OFFSET COMPENSATION
#####
[gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET]
variable_runtime_temp: 0
gcode:
	# parameters
	{% set toolhead = params.TOOLHEAD|default(0)|int %}
	{% set reset = true if params.RESET|default(false)|lower == 'true' else false %}

	# config 
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}

	# beacon config
	{% set beacon_contact_calibration_temp = printer["gcode_macro RatOS"].beacon_contact_calibration_temp|default(150)|int %}
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro RatOS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	# ratos variables file
	{% set svv = printer.save_variables.variables %}

	{% if reset %}
		# reset applied offset
		SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE=0

	{% else %}
		{% if beacon_contact_z_calibration and beacon_contact_expansion_compensation %}

			# get coefficient
			{% set nozzle_expansion_coefficient_t0 = svv.nozzle_expansion_coefficient_t0|default(0)|float %}
			{% if printer["dual_carriage"] is defined %}
				{% set nozzle_expansion_coefficient_t1 = svv.nozzle_expansion_coefficient_t1|default(0)|float %}
			{% endif %}

			# get coefficient multiplier
			{% set nozzle_expansion_coefficient_multiplier = svv.nozzle_expansion_coefficient_multiplier|default(1.0)|float %}

			# get applied offset
			{% set applied_offset = svv.nozzle_expansion_applied_offset|default(0)|float %}

			# get extruder target temperature
			{% set temp = printer['extruder' if toolhead == 0 else 'extruder1'].target|float %}

			# calculate new offset
			{% set temp_offset = temp - beacon_contact_calibration_temp %}
			{% set expansion_coefficient = nozzle_expansion_coefficient_t0 if toolhead == 0 else nozzle_expansion_coefficient_t1 %}
			{% set expansion_offset = nozzle_expansion_coefficient_multiplier * (temp_offset * (expansion_coefficient / 100)) %}

			# set new offset
			{% set new_offset = ((-applied_offset) + expansion_offset) %}
			SET_GCODE_OFFSET Z_ADJUST={new_offset} MOVE=1 SPEED={z_speed}
			SAVE_VARIABLE VARIABLE=nozzle_expansion_applied_offset VALUE={expansion_offset}
			SET_GCODE_VARIABLE MACRO=_BEACON_SET_NOZZLE_TEMP_OFFSET VARIABLE=runtime_temp VALUE={temp}

			# echo
			RATOS_ECHO PREFIX="BEACON" MSG={'"Nozzle expansion offset of %.6fmm applied to T%s"' % (expansion_offset, toolhead)}
			DEBUG_ECHO PREFIX="_BEACON_SET_NOZZLE_TEMP_OFFSET" MSG="multiplier: {nozzle_expansion_coefficient_multiplier}, coefficient: {expansion_coefficient}, temp_offset: {temp_offset}, expansion_offset: {expansion_offset}, applied_offset: {applied_offset}, new_offset: {new_offset}"

		{% endif %}
	{% endif %}


#####
# BEACON MEASURE GANTRY TWIST
#####
[gcode_macro BEACON_MEASURE_GANTRY_TWIST]
variable_needs_compensation: False
variable_reference_z: 0.0
variable_front: 0.0
variable_front_left: 0.0
variable_front_right: 0.0
variable_back: 0.0
variable_back_left: 0.0
variable_back_right: 0.0
variable_right: 0.0
variable_left: 0.0
variable_margin_x: 40
variable_margin_y: 40
gcode:
	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}

	# beacon config
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}

	{% if beacon_contact_z_calibration %}

		# reset varaible  
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE=needs_compensation VALUE=False

		# home and abl the printer if needed  
		_BEACON_HOME_AND_ABL

		# visual feedback
		_LED_BEACON_CALIBRATION_START

		# echo  
		RATOS_ECHO PREFIX="BEACON" MSG="Measure gantry twist..."

		# settle the mechanics down  
		{% for i in range(10) %}
			beacon_poke speed=3 top=5 bottom=-0.6
		{% endfor %}

		# probe reference location
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="center"
		
		# probe front left
		G0 X{margin_x} Y{margin_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="front_left"

		# probe front
		G0 X{safe_home_x} Y{margin_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="front"

		# probe front right
		G0 X{(printable_x_max - margin_x)} Y{margin_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="front_right"

		# probe right
		G0 X{(printable_x_max - margin_x)} Y{safe_home_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="right"

		# probe back right
		G0 X{(printable_x_max - margin_x)} Y{(printable_y_max - margin_y)} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="back_right"

		# probe back
		G0 X{safe_home_x} Y{(printable_y_max - margin_y)} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="back"

		# probe back left
		G0 X{margin_x} Y{(printable_y_max - margin_y)} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="back_left"

		# probe left
		G0 X{margin_x} Y{safe_home_y} F{speed}
		_BEACON_PROBE_GANTRY_TWIST
		_BEACON_STORE_GANTRY_TWIST LOCATION="left"

		# move back to home position
		G0 Z{z_hop} F{z_speed}
		G0 X{safe_home_x} Y{safe_home_y} F{speed}

		# echo results
		_BEACON_ECHO_GANTRY_TWIST

		# visual feedback
		_LED_BEACON_CALIBRATION_END

	{% endif %}


[gcode_macro _BEACON_PROBE_GANTRY_TWIST]
gcode:
	# echo
	RATOS_ECHO PREFIX="BEACON" MSG="Probing..."

	# probe
	BEACON_OFFSET_COMPARE
	BEACON_QUERY


[gcode_macro _BEACON_STORE_GANTRY_TWIST]
gcode:
	# parameters
	{% set location = params.LOCATION|lower %}

	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}

	# get last probe result
	{% set last_z = printer.beacon.last_offset_result["delta"]|default(0)|float %}

	# set gantry offset
	{% if location == "center" %}
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE=reference_z VALUE={last_z}
	{% else %}
		{% set reference_z = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].reference_z|default(0)|float %}
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE={location} VALUE={(last_z - reference_z)}
	{% endif %}


[gcode_macro _BEACON_ECHO_GANTRY_TWIST]
gcode:
	# get results
	{% set reference_z = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].reference_z|default(0)|float * 1000 %}
	{% set front_left = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].front_left|default(0)|float * 1000 %}
	{% set front = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].front|default(0)|float * 1000 %}
	{% set front_right = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].front_right|default(0)|float * 1000 %}
	{% set right = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].right|default(0)|float * 1000 %}
	{% set back_right = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].back_right|default(0)|float * 1000 %}
	{% set back = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].back|default(0)|float * 1000 %}
	{% set back_left = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].back_left|default(0)|float * 1000 %}
	{% set left = printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].left|default(0)|float * 1000 %}

	{% set line_1 = "Front left:    %.6fμm" % (front_left) %}
	{% set line_2 = "Front center:  %.6fμm" % (front) %}
	{% set line_3 = "Front right:   %.6fμm" % (front_right) %}
	{% set line_4 = "Left center:   %.6fμm" % (left) %}
	{% set line_5 = "Right center:  %.6fμm" % (right) %}
	{% set line_6 = "Back left:     %.6fμm" % (back_left) %}
	{% set line_7 = "Back center:   %.6fμm" % (back) %}
	{% set line_8 = "Back right:    %.6fμm" % (back_right) %}

	{% set max_value = [(front_left|abs), (front|abs), (front_right|abs), (left|abs), (right|abs), (back_left|abs), (back|abs), (back_right|abs)]|max %}
	{% if max_value <= 50 %}
		{% set type = "success" %}
		{% set recommendation = "Very low gantry twist: %.6fμm._N_No beacon scan compensation needed." % max_value %}
	{% elif max_value > 50 and max_value <= 100 %}
		{% set type = "info" %}
		{% set recommendation = "Low gantry twist: %.6fμm._N_You may experience first layer inconsistensies, consider beacon scan compensation." % max_value %}
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE=needs_compensation VALUE=True
	{% elif max_value > 100 and max_value <= 150 %}
		{% set type = "warning" %}
		{% set recommendation = "High gantry twist: %.6fμm._N_High chance of first layer problems, beacon scan compensation is highly encouraged." % max_value %}
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE=needs_compensation VALUE=True
	{% elif max_value > 150 and max_value <= 200 %}
		{% set type = "alert" %}
		{% set recommendation = "Very High gantry twist: %.6fμm._N_You will encounter first layer problems on large prints unless you activate beacon scan compensation." % max_value %}
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE=needs_compensation VALUE=True
	{% elif max_value > 200 %}
		{% set type = "alert" %}
		{% set recommendation = "Extremly high gantry twist: %.6fμm._N_You have significant scan/contact inconsistency which is indicative of mechanical problems, please investigate before resorting to software compensation." % max_value %}
		SET_GCODE_VARIABLE MACRO=BEACON_MEASURE_GANTRY_TWIST VARIABLE=needs_compensation VALUE=True
	{% endif %}

	# console echo
	CONSOLE_ECHO TITLE="Gantry twist relative to the center" TYPE={type} MSG={'"_N_%s_N__N_%s_N_%s_N_%s_N_%s_N_%s_N_%s_N_%s_N_%s"' % (recommendation, line_1, line_2, line_3, line_4, line_5, line_6, line_7, line_8)}


#####
# BEACON SCAN COMPENSATION
#####
[gcode_macro BEACON_CREATE_SCAN_COMPENSATION_MESH]
gcode:
	# parameters
	{% set bed_temp = params.BED_TEMP|default(85)|int %}
	{% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}
	{% set profile = params.PROFILE|default("Contact")|string %}
	{% set automated = true if params._AUTOMATED|default(false)|lower == 'true' else false %}

	# config
	{% set default_toolhead = printer["gcode_macro RatOS"].default_toolhead|default(0)|int %}
	{% set beacon_scan_compensation_enable = true if printer["gcode_macro RatOS"].beacon_scan_compensation_enable|default(false)|lower == 'true' else false %}
	{% set probe_count = printer["gcode_macro RatOS"].beacon_scan_compensation_probe_count %}
	{% set bed_heat_soak_time = printer["gcode_macro RatOS"].bed_heat_soak_time|default(0)|int %}

	{% if not beacon_scan_compensation_enable %}
		RATOS_ECHO MSG="Beacon scan compensation is disabled!"

	{% else %}

		# home and abl the printer if needed  
		_BEACON_HOME_AND_ABL

		# visual feedback
		_LED_BEACON_CALIBRATION_START

		# heat chamber if needed  
		{% if chamber_temp > 0 and not automated %}
			_CHAMBER_HEATER_ON CHAMBER_TEMP={chamber_temp}
		{% endif %}

		# heat up printer
		{% if not automated %}
			SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET=150
			SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={bed_temp}

			# wait for temperatures 
			RATOS_ECHO MSG="Please wait..."
			TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={bed_temp} MAXIMUM={(bed_temp + 5)}
			TEMPERATURE_WAIT SENSOR={'extruder' if default_toolhead == 0 else 'extruder1'} MINIMUM=150 MAXIMUM=155
		{% endif %}

		# Wait for bed thermal expansion
		{% if not automated %}
			{% if bed_heat_soak_time > 0 %}
				RATOS_ECHO MSG="Heat soaking bed for {bed_heat_soak_time} seconds..."
				G4 P{(bed_heat_soak_time * 1000)}
			{% endif %}
		{% endif %}
		
		# auto calibrate beacon 
		{% if not automated %}
			BEACON_AUTO_CALIBRATE
		{% endif %}

		# create contact mesh
		BED_MESH_CALIBRATE PROBE_METHOD=contact USE_CONTACT_AREA=1 SAMPLES=2 SAMPLES_DROP=1 SAMPLES_TOLERANCE_RETRIES=10 PROBE_COUNT={probe_count[0]},{probe_count[1]} PROFILE={profile}

		# turn bed and extruder heaters off 
		{% if not automated %}
			SET_HEATER_TEMPERATURE HEATER={'extruder' if default_toolhead == 0 else 'extruder1'} TARGET=0
			SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET=0
		{% endif %}

		# turn off chamber heater  
		{% if chamber_temp > 0 and not automated %}
			_CHAMBER_HEATER_OFF
		{% endif %}

		# home z
		G28 Z

		# visual feedback
		{% if not automated %}
			_LED_BEACON_CALIBRATION_END
		{% endif %}

		# echo
		RATOS_ECHO MSG="Beacon scan compensation mesh created!"

		# save config
		{% if not automated %}
			RATOS_ECHO MSG="Saving config and restarting klipper..."
			SAVE_CONFIG
		{% endif %}

	{% endif %}


[gcode_macro _BEACON_APPLY_SCAN_COMPENSATION]
gcode:
	# beacon config
	{% set beacon_scan_compensation_profile = printer["gcode_macro RatOS"].beacon_scan_compensation_profile %}
	{% set beacon_scan_compensation_enable = true if printer["gcode_macro RatOS"].beacon_scan_compensation_enable|default(false)|lower == 'true' else false %}

	DEBUG_ECHO PREFIX="_BEACON_APPLY_SCAN_COMPENSATION" MSG="beacon_scan_compensation_profile {beacon_scan_compensation_profile}, beacon_scan_compensation_enable {beacon_scan_compensation_enable}"

	{% if beacon_scan_compensation_enable %}
		BEACON_APPLY_SCAN_COMPENSATION PROFILE={beacon_scan_compensation_profile}
	{% endif %}


[gcode_macro _BEACON_MAYBE_SCAN_COMPENSATION]
gcode:
	# parameters
	{% set bed_temp = params.BED_TEMP|default(85)|int %}
	{% set chamber_temp = params.CHAMBER_TEMP|default(0)|int %}

	# beacon config
	{% set needs_scan_compensation = true if printer["gcode_macro BEACON_MEASURE_GANTRY_TWIST"].needs_compensation|default(false)|lower == 'true' else false %}

	{% if needs_scan_compensation %}
		BEACON_CREATE_SCAN_COMPENSATION_MESH _AUTOMATED=True BED_TEMP={bed_temp} CHAMBER_TEMP={chamber_temp}
	{% endif %}


#####
# BEACON UTILS
#####
[gcode_macro _BEACON_HOME_AND_ABL]
gcode:
	# config
	{% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}
	{% set z_speed = printer["gcode_macro RatOS"].macro_z_speed|float * 60 %}
	{% set z_hop_speed = printer.configfile.config.ratos_homing.z_hop_speed|float * 60 %}
	{% set z_hop = printer.configfile.config.ratos_homing.z_hop|float %}
	{% set printable_x_max = printer["gcode_macro RatOS"].printable_x_max|float %}
	{% set printable_y_max = printer["gcode_macro RatOS"].printable_y_max|float %}
	{% set safe_home_x = printer["gcode_macro RatOS"].safe_home_x %}
	{% if safe_home_x is not defined or safe_home_x|lower == 'middle' %}
		{% set safe_home_x = printable_x_max / 2 %}
	{% endif %}
	{% set safe_home_y = printer["gcode_macro RatOS"].safe_home_y %}
	{% if safe_home_y is not defined or safe_home_y|lower == 'middle' %}
		{% set safe_home_y = printable_y_max / 2 %}
	{% endif %}

	# home if not homed already
	MAYBE_HOME

	# automatic bed leveling
	{% set needs_rehoming = False %}
	{% if printer.z_tilt is defined and not printer.z_tilt.applied %}
		RATOS_ECHO MSG="Adjusting Z tilt..."
		Z_TILT_ADJUST
		RATOS_ECHO MSG="Rehoming Z after Z tilt adjustment..."
		{% set needs_rehoming = True %}
	{% endif %}
	{% if printer.quad_gantry_level is defined and not printer.quad_gantry_level.applied %}
	 	RATOS_ECHO MSG="Running quad gantry leveling..."
		QUAD_GANTRY_LEVEL 
		RATOS_ECHO MSG="Rehoming Z after quad gantry leveling..."
		{% set needs_rehoming = True %}
	{% endif %}

	# Home again as Z will have changed after automatic bed leveling.
	{% if needs_rehoming %}
		G0 Z{z_hop} F{z_hop_speed}
		G0 X{safe_home_x} Y{safe_home_y} F{speed}
		{% if printer.configfile.settings.beacon is defined and beacon_contact_z_homing %}
			BEACON_AUTO_CALIBRATE  
			G0 Z{z_hop} F{z_hop_speed}
			G0 X{safe_home_x} Y{safe_home_y} F{speed}
		{% else %}
			G28 Z
		{% endif %}
	{% endif %}

	# beacon autocalibration
	G0 Z{z_hop} F{z_speed}
	G0 X{safe_home_x} Y{safe_home_y} F{speed}
	G0 Z5 F{z_speed}
	BEACON_AUTO_CALIBRATE

	# move back to home position
	G0 Z{z_hop} F{z_speed}
	G0 X{safe_home_x} Y{safe_home_y} F{speed}


[gcode_macro _BEACON_SAVE_MULTIPLIER]
gcode:
	# parameters
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro RatOS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}
	{% set multiplier = printer["gcode_macro _BEACON_APPLY_RUNTIME_MULTIPLIER"].runtime_multiplier|default(-1.0)|float %}

	DEBUG_ECHO PREFIX="_BEACON_SAVE_MULTIPLIER" MSG="multiplier: {multiplier}, beacon_contact_z_calibration: {beacon_contact_z_calibration}, beacon_contact_expansion_compensation: {beacon_contact_expansion_compensation}"

	{% if multiplier > 0 and beacon_contact_z_calibration and beacon_contact_expansion_compensation %}
		SAVE_VARIABLE VARIABLE=nozzle_expansion_coefficient_multiplier VALUE={multiplier}
		SET_GCODE_VARIABLE MACRO=_BEACON_APPLY_RUNTIME_MULTIPLIER VARIABLE=runtime_multiplier VALUE=-1.0
		CONSOLE_ECHO TITLE="Hotend thermal expansion compensation" TYPE="success" MSG={'"New value is: %.6f_N_The new multiplier value has been saved to the configuration."' % multiplier}
	{% else %}
		Z_OFFSET_APPLY_PROBE
	{% endif %}


[gcode_macro _BEACON_APPLY_RUNTIME_MULTIPLIER]
variable_runtime_multiplier: -1.0
gcode:
	# config
	{% set toolhead = 0 %}
	{% if printer["dual_carriage"] is defined %}
		{% set idex_mode = printer["dual_carriage"].carriage_1|lower %}
		{% set toolhead = 1 if idex_mode == 'primary' else 0 %}
	{% endif %}

	# beacon config
	{% set beacon_contact_calibration_temp = printer["gcode_macro RatOS"].beacon_contact_calibration_temp|default(150)|int %}
	{% set beacon_contact_z_calibration = true if printer["gcode_macro RatOS"].beacon_contact_z_calibration|default(false)|lower == 'true' else false %}
	{% set beacon_contact_expansion_compensation = true if printer["gcode_macro RatOS"].beacon_contact_expansion_compensation|default(false)|lower == 'true' else false %}

	# get current layer number
	{% set layer_number = printer["gcode_macro _ON_LAYER_CHANGE"].layer_number|default(0)|int %}

	# get is printing gcode state
	{% set is_printing_gcode = true if printer["gcode_macro START_PRINT"].is_printing_gcode|default(true)|lower == 'true' else false %}

	{% if layer_number == 1 and is_printing_gcode and printer.configfile.settings.beacon is defined and beacon_contact_z_calibration and beacon_contact_expansion_compensation %}

		# ratos variables file
		{% set svv = printer.save_variables.variables %}

		# get coefficient
		{% set nozzle_expansion_coefficient = svv.nozzle_expansion_coefficient_t0|default(0)|float %}
		{% if toolhead == 1 %}
			{% set nozzle_expansion_coefficient = svv.nozzle_expansion_coefficient_t1|default(0)|float %}
		{% endif %}

		# calculate new multiplier
		{% set beacon_contact_expansion_multiplier = svv.nozzle_expansion_coefficient_multiplier|default(1.0)|float %}
		{% set print_temp = printer["gcode_macro _BEACON_SET_NOZZLE_TEMP_OFFSET"].runtime_temp|default(0)|int %}

		{% if print_temp > 0 %}
			{% set z_offset = printer.gcode_move.homing_origin.z|float %}
			{% set temp_delta = print_temp - beacon_contact_calibration_temp %}
			{% set coefficient_per_degree = nozzle_expansion_coefficient / 100 %}
			{% set z_offset_per_degree = z_offset / temp_delta %}
			{% set new_multiplier = z_offset_per_degree / coefficient_per_degree %}

			DEBUG_ECHO PREFIX="_BEACON_APPLY_RUNTIME_MULTIPLIER" MSG="print_temp: {print_temp}, z_offset: {z_offset}, temp_delta: {temp_delta}, nozzle_expansion_coefficient: {nozzle_expansion_coefficient}, coefficient_per_degree: {coefficient_per_degree}, z_offset_per_degree: {z_offset_per_degree}, old_multiplier: {beacon_contact_expansion_multiplier}, new_multiplier: {new_multiplier}"
			SET_GCODE_VARIABLE MACRO=_BEACON_APPLY_RUNTIME_MULTIPLIER VARIABLE=runtime_multiplier VALUE={new_multiplier}

		{% endif %}

	{% endif %}
